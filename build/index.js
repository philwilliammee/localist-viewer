(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.app = factory());
}(this, (function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	function commonjsRequire (path) {
		throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
	}

	var jsxRuntime = {exports: {}};

	var reactJsxRuntime_production_min = {};

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	var react = {exports: {}};

	var react_production_min = {};

	/** @license React v17.0.2
	 * react.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var l$1=objectAssign,n$3=60103,p$3=60106;react_production_min.Fragment=60107;react_production_min.StrictMode=60108;react_production_min.Profiler=60114;var q$3=60109,r$3=60110,t$2=60112;react_production_min.Suspense=60113;var u=60115,v$1=60116;
	if("function"===typeof Symbol&&Symbol.for){var w$1=Symbol.for;n$3=w$1("react.element");p$3=w$1("react.portal");react_production_min.Fragment=w$1("react.fragment");react_production_min.StrictMode=w$1("react.strict_mode");react_production_min.Profiler=w$1("react.profiler");q$3=w$1("react.provider");r$3=w$1("react.context");t$2=w$1("react.forward_ref");react_production_min.Suspense=w$1("react.suspense");u=w$1("react.memo");v$1=w$1("react.lazy");}var x$2="function"===typeof Symbol&&Symbol.iterator;
	function y$3(a){if(null===a||"object"!==typeof a)return null;a=x$2&&a[x$2]||a["@@iterator"];return "function"===typeof a?a:null}function z$2(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
	var A$2={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},B$2={};function C$1(a,b,c){this.props=a;this.context=b;this.refs=B$2;this.updater=c||A$2;}C$1.prototype.isReactComponent={};C$1.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(z$2(85));this.updater.enqueueSetState(this,a,b,"setState");};C$1.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};
	function D$2(){}D$2.prototype=C$1.prototype;function E$2(a,b,c){this.props=a;this.context=b;this.refs=B$2;this.updater=c||A$2;}var F$2=E$2.prototype=new D$2;F$2.constructor=E$2;l$1(F$2,C$1.prototype);F$2.isPureReactComponent=!0;var G$3={current:null},H$2=Object.prototype.hasOwnProperty,I$2={key:!0,ref:!0,__self:!0,__source:!0};
	function J$1(a,b,c){var e,d={},k=null,h=null;if(null!=b)for(e in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=""+b.key),b)H$2.call(b,e)&&!I$2.hasOwnProperty(e)&&(d[e]=b[e]);var g=arguments.length-2;if(1===g)d.children=c;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];d.children=f;}if(a&&a.defaultProps)for(e in g=a.defaultProps,g)void 0===d[e]&&(d[e]=g[e]);return {$$typeof:n$3,type:a,key:k,ref:h,props:d,_owner:G$3.current}}
	function K$1(a,b){return {$$typeof:n$3,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function L$1(a){return "object"===typeof a&&null!==a&&a.$$typeof===n$3}function escape(a){var b={"=":"=0",":":"=2"};return "$"+a.replace(/[=:]/g,function(a){return b[a]})}var M$2=/\/+/g;function N$2(a,b){return "object"===typeof a&&null!==a&&null!=a.key?escape(""+a.key):b.toString(36)}
	function O$2(a,b,c,e,d){var k=typeof a;if("undefined"===k||"boolean"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case "string":case "number":h=!0;break;case "object":switch(a.$$typeof){case n$3:case p$3:h=!0;}}if(h)return h=a,d=d(h),a=""===e?"."+N$2(h,0):e,Array.isArray(d)?(c="",null!=a&&(c=a.replace(M$2,"$&/")+"/"),O$2(d,b,c,"",function(a){return a})):null!=d&&(L$1(d)&&(d=K$1(d,c+(!d.key||h&&h.key===d.key?"":(""+d.key).replace(M$2,"$&/")+"/")+a)),b.push(d)),1;h=0;e=""===e?".":e+":";if(Array.isArray(a))for(var g=
	0;g<a.length;g++){k=a[g];var f=e+N$2(k,g);h+=O$2(k,b,c,f,d);}else if(f=y$3(a),"function"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=e+N$2(k,g++),h+=O$2(k,b,c,f,d);else if("object"===k)throw b=""+a,Error(z$2(31,"[object Object]"===b?"object with keys {"+Object.keys(a).join(", ")+"}":b));return h}function P$2(a,b,c){if(null==a)return a;var e=[],d=0;O$2(a,e,"","",function(a){return b.call(c,a,d++)});return e}
	function Q$1(a){if(-1===a._status){var b=a._result;b=b();a._status=0;a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b);},function(b){0===a._status&&(a._status=2,a._result=b);});}if(1===a._status)return a._result;throw a._result;}var R$2={current:null};function S$2(){var a=R$2.current;if(null===a)throw Error(z$2(321));return a}var T$2={ReactCurrentDispatcher:R$2,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:G$3,IsSomeRendererActing:{current:!1},assign:l$1};
	react_production_min.Children={map:P$2,forEach:function(a,b,c){P$2(a,function(){b.apply(this,arguments);},c);},count:function(a){var b=0;P$2(a,function(){b++;});return b},toArray:function(a){return P$2(a,function(a){return a})||[]},only:function(a){if(!L$1(a))throw Error(z$2(143));return a}};react_production_min.Component=C$1;react_production_min.PureComponent=E$2;react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T$2;
	react_production_min.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(z$2(267,a));var e=l$1({},a.props),d=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=G$3.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)H$2.call(b,f)&&!I$2.hasOwnProperty(f)&&(e[f]=void 0===b[f]&&void 0!==g?g[f]:b[f]);}var f=arguments.length-2;if(1===f)e.children=c;else if(1<f){g=Array(f);for(var m=0;m<f;m++)g[m]=arguments[m+2];e.children=g;}return {$$typeof:n$3,type:a.type,
	key:d,ref:k,props:e,_owner:h}};react_production_min.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:r$3,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:q$3,_context:a};return a.Consumer=a};react_production_min.createElement=J$1;react_production_min.createFactory=function(a){var b=J$1.bind(null,a);b.type=a;return b};react_production_min.createRef=function(){return {current:null}};react_production_min.forwardRef=function(a){return {$$typeof:t$2,render:a}};react_production_min.isValidElement=L$1;
	react_production_min.lazy=function(a){return {$$typeof:v$1,_payload:{_status:-1,_result:a},_init:Q$1}};react_production_min.memo=function(a,b){return {$$typeof:u,type:a,compare:void 0===b?null:b}};react_production_min.useCallback=function(a,b){return S$2().useCallback(a,b)};react_production_min.useContext=function(a,b){return S$2().useContext(a,b)};react_production_min.useDebugValue=function(){};react_production_min.useEffect=function(a,b){return S$2().useEffect(a,b)};react_production_min.useImperativeHandle=function(a,b,c){return S$2().useImperativeHandle(a,b,c)};
	react_production_min.useLayoutEffect=function(a,b){return S$2().useLayoutEffect(a,b)};react_production_min.useMemo=function(a,b){return S$2().useMemo(a,b)};react_production_min.useReducer=function(a,b,c){return S$2().useReducer(a,b,c)};react_production_min.useRef=function(a){return S$2().useRef(a)};react_production_min.useState=function(a){return S$2().useState(a)};react_production_min.version="17.0.2";

	{
	  react.exports = react_production_min;
	}

	var React$1 = react.exports;

	/** @license React v17.0.2
	 * react-jsx-runtime.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var f$1=react.exports,g$2=60103;reactJsxRuntime_production_min.Fragment=60107;if("function"===typeof Symbol&&Symbol.for){var h$1=Symbol.for;g$2=h$1("react.element");reactJsxRuntime_production_min.Fragment=h$1("react.fragment");}var m$3=f$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n$2=Object.prototype.hasOwnProperty,p$2={key:!0,ref:!0,__self:!0,__source:!0};
	function q$2(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=""+k);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n$2.call(a,b)&&!p$2.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return {$$typeof:g$2,type:c,key:e,ref:l,props:d,_owner:m$3.current}}reactJsxRuntime_production_min.jsx=q$2;reactJsxRuntime_production_min.jsxs=q$2;

	{
	  jsxRuntime.exports = reactJsxRuntime_production_min;
	}

	var reactDom = {exports: {}};

	var reactDom_production_min = {};

	var scheduler = {exports: {}};

	var scheduler_production_min = {};

	/** @license React v0.20.2
	 * scheduler.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function (exports) {
	var f,g,h,k;if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()};}else {var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q};}
	if("undefined"===typeof window||"function"!==typeof MessageChannel){var t=null,u=null,w=function(){if(null!==t)try{var a=exports.unstable_now();t(!0,a);t=null;}catch(b){throw setTimeout(w,0),b;}};f=function(a){null!==t?setTimeout(f,0,a):(t=a,setTimeout(w,0));};g=function(a,b){u=setTimeout(a,b);};h=function(){clearTimeout(u);};exports.unstable_shouldYield=function(){return !1};k=exports.unstable_forceFrameRate=function(){};}else {var x=window.setTimeout,y=window.clearTimeout;if("undefined"!==typeof console){var z=
	window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");"function"!==typeof z&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");}var A=!1,B=null,C=-1,D=5,E=0;exports.unstable_shouldYield=function(){return exports.unstable_now()>=
	E};k=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):D=0<a?Math.floor(1E3/a):5;};var F=new MessageChannel,G=F.port2;F.port1.onmessage=function(){if(null!==B){var a=exports.unstable_now();E=a+D;try{B(!0,a)?G.postMessage(null):(A=!1,B=null);}catch(b){throw G.postMessage(null),b;}}else A=!1;};f=function(a){B=a;A||(A=!0,G.postMessage(null));};g=function(a,b){C=
	x(function(){a(exports.unstable_now());},b);};h=function(){y(C);C=-1;};}function H(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<I(e,b))a[d]=b,a[c]=e,c=d;else break a}}function J(a){a=a[0];return void 0===a?null:a}
	function K(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>I(n,c))void 0!==r&&0>I(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>I(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function I(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var L=[],M=[],N=1,O=null,P=3,Q=!1,R=!1,S=!1;
	function T(a){for(var b=J(M);null!==b;){if(null===b.callback)K(M);else if(b.startTime<=a)K(M),b.sortIndex=b.expirationTime,H(L,b);else break;b=J(M);}}function U(a){S=!1;T(a);if(!R)if(null!==J(L))R=!0,f(V);else {var b=J(M);null!==b&&g(U,b.startTime-a);}}
	function V(a,b){R=!1;S&&(S=!1,h());Q=!0;var c=P;try{T(b);for(O=J(L);null!==O&&(!(O.expirationTime>b)||a&&!exports.unstable_shouldYield());){var d=O.callback;if("function"===typeof d){O.callback=null;P=O.priorityLevel;var e=d(O.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?O.callback=e:O===J(L)&&K(L);T(b);}else K(L);O=J(L);}if(null!==O)var m=!0;else {var n=J(M);null!==n&&g(U,n.startTime-b);m=!1;}return m}finally{O=null,P=c,Q=!1;}}var W=k;exports.unstable_IdlePriority=5;
	exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null;};exports.unstable_continueExecution=function(){R||Q||(R=!0,f(V));};exports.unstable_getCurrentPriorityLevel=function(){return P};exports.unstable_getFirstCallbackNode=function(){return J(L)};
	exports.unstable_next=function(a){switch(P){case 1:case 2:case 3:var b=3;break;default:b=P;}var c=P;P=b;try{return a()}finally{P=c;}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=W;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=P;P=a;try{return b()}finally{P=c;}};
	exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3;}e=c+e;a={id:N++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,H(M,a),null===J(L)&&a===J(M)&&(S?h():S=!0,g(U,c-d))):(a.sortIndex=e,H(L,a),R||Q||(R=!0,f(V)));return a};
	exports.unstable_wrapCallback=function(a){var b=P;return function(){var c=P;P=b;try{return a.apply(this,arguments)}finally{P=c;}}};
	}(scheduler_production_min));

	{
	  scheduler.exports = scheduler_production_min;
	}

	/** @license React v17.0.2
	 * react-dom.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var aa=react.exports,m$2=objectAssign,r$2=scheduler.exports;function y$2(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(y$2(227));var ba=new Set,ca={};function da(a,b){ea(a,b);ea(a+"Capture",b);}
	function ea(a,b){ca[a]=b;for(a=0;a<b.length;a++)ba.add(b[a]);}
	var fa=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),ha=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ia=Object.prototype.hasOwnProperty,
	ja={},ka={};function la(a){if(ia.call(ka,a))return !0;if(ia.call(ja,a))return !1;if(ha.test(a))return ka[a]=!0;ja[a]=!0;return !1}function ma(a,b,c,d){if(null!==c&&0===c.type)return !1;switch(typeof b){case "function":case "symbol":return !0;case "boolean":if(d)return !1;if(null!==c)return !c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return "data-"!==a&&"aria-"!==a;default:return !1}}
	function na(a,b,c,d){if(null===b||"undefined"===typeof b||ma(a,b,c,d))return !0;if(d)return !1;if(null!==c)switch(c.type){case 3:return !b;case 4:return !1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return !1}function B$1(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g;}var D$1={};
	"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){D$1[a]=new B$1(a,0,!1,a,null,!1,!1);});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];D$1[b]=new B$1(b,1,!1,a[1],null,!1,!1);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){D$1[a]=new B$1(a,2,!1,a.toLowerCase(),null,!1,!1);});
	["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){D$1[a]=new B$1(a,2,!1,a,null,!1,!1);});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){D$1[a]=new B$1(a,3,!1,a.toLowerCase(),null,!1,!1);});
	["checked","multiple","muted","selected"].forEach(function(a){D$1[a]=new B$1(a,3,!0,a,null,!1,!1);});["capture","download"].forEach(function(a){D$1[a]=new B$1(a,4,!1,a,null,!1,!1);});["cols","rows","size","span"].forEach(function(a){D$1[a]=new B$1(a,6,!1,a,null,!1,!1);});["rowSpan","start"].forEach(function(a){D$1[a]=new B$1(a,5,!1,a.toLowerCase(),null,!1,!1);});var oa=/[\-:]([a-z])/g;function pa(a){return a[1].toUpperCase()}
	"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(oa,
	pa);D$1[b]=new B$1(b,1,!1,a,null,!1,!1);});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(oa,pa);D$1[b]=new B$1(b,1,!1,a,"http://www.w3.org/1999/xlink",!1,!1);});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(oa,pa);D$1[b]=new B$1(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1,!1);});["tabIndex","crossOrigin"].forEach(function(a){D$1[a]=new B$1(a,1,!1,a.toLowerCase(),null,!1,!1);});
	D$1.xlinkHref=new B$1("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(a){D$1[a]=new B$1(a,1,!1,a.toLowerCase(),null,!0,!0);});
	function qa(a,b,c,d){var e=D$1.hasOwnProperty(b)?D$1[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(na(b,c,e,d)&&(c=null),d||null===e?la(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))));}
	var ra=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,sa=60103,ta=60106,ua=60107,wa=60108,xa=60114,ya=60109,za=60110,Aa=60112,Ba=60113,Ca=60120,Da=60115,Ea=60116,Fa=60121,Ga=60128,Ha=60129,Ia=60130,Ja=60131;
	if("function"===typeof Symbol&&Symbol.for){var E$1=Symbol.for;sa=E$1("react.element");ta=E$1("react.portal");ua=E$1("react.fragment");wa=E$1("react.strict_mode");xa=E$1("react.profiler");ya=E$1("react.provider");za=E$1("react.context");Aa=E$1("react.forward_ref");Ba=E$1("react.suspense");Ca=E$1("react.suspense_list");Da=E$1("react.memo");Ea=E$1("react.lazy");Fa=E$1("react.block");E$1("react.scope");Ga=E$1("react.opaque.id");Ha=E$1("react.debug_trace_mode");Ia=E$1("react.offscreen");Ja=E$1("react.legacy_hidden");}
	var Ka="function"===typeof Symbol&&Symbol.iterator;function La(a){if(null===a||"object"!==typeof a)return null;a=Ka&&a[Ka]||a["@@iterator"];return "function"===typeof a?a:null}var Ma;function Na(a){if(void 0===Ma)try{throw Error();}catch(c){var b=c.stack.trim().match(/\n( *(at )?)/);Ma=b&&b[1]||"";}return "\n"+Ma+a}var Oa=!1;
	function Pa(a,b){if(!a||Oa)return "";Oa=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[]);}catch(k){var d=k;}Reflect.construct(a,[],b);}else {try{b.call();}catch(k){d=k;}a.call(b.prototype);}else {try{throw Error();}catch(k){d=k;}a();}}catch(k){if(k&&d&&"string"===typeof k.stack){for(var e=k.stack.split("\n"),
	f=d.stack.split("\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h])return "\n"+e[g].replace(" at new "," at ");while(1<=g&&0<=h)}break}}}finally{Oa=!1,Error.prepareStackTrace=c;}return (a=a?a.displayName||a.name:"")?Na(a):""}
	function Qa(a){switch(a.tag){case 5:return Na(a.type);case 16:return Na("Lazy");case 13:return Na("Suspense");case 19:return Na("SuspenseList");case 0:case 2:case 15:return a=Pa(a.type,!1),a;case 11:return a=Pa(a.type.render,!1),a;case 22:return a=Pa(a.type._render,!1),a;case 1:return a=Pa(a.type,!0),a;default:return ""}}
	function Ra(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ua:return "Fragment";case ta:return "Portal";case xa:return "Profiler";case wa:return "StrictMode";case Ba:return "Suspense";case Ca:return "SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case za:return (a.displayName||"Context")+".Consumer";case ya:return (a._context.displayName||"Context")+".Provider";case Aa:var b=a.render;b=b.displayName||b.name||"";
	return a.displayName||(""!==b?"ForwardRef("+b+")":"ForwardRef");case Da:return Ra(a.type);case Fa:return Ra(a._render);case Ea:b=a._payload;a=a._init;try{return Ra(a(b))}catch(c){}}return null}function Sa(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return ""}}function Ta(a){var b=a.type;return (a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
	function Ua(a){var b=Ta(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a);}});Object.defineProperty(a,b,{enumerable:c.enumerable});return {getValue:function(){return d},setValue:function(a){d=""+a;},stopTracking:function(){a._valueTracker=
	null;delete a[b];}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a));}function Wa(a){if(!a)return !1;var b=a._valueTracker;if(!b)return !0;var c=b.getValue();var d="";a&&(d=Ta(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}
	function Ya(a,b){var c=b.checked;return m$2({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value};}function $a(a,b){b=b.checked;null!=b&&qa(a,"checked",b,!1);}
	function ab(a,b){$a(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c;}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?bb(a,b.type,c):b.hasOwnProperty("defaultValue")&&bb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked);}
	function cb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b;}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c);}
	function bb(a,b,c){if("number"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c);}function db(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a);});return b}function eb(a,b){a=m$2({children:void 0},b);if(b=db(b.children))a.children=b;return a}
	function fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0);}else {c=""+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e]);}null!==b&&(b.selected=!0);}}
	function gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(y$2(91));return m$2({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(y$2(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(y$2(93));c=c[0];}b=c;}null==b&&(b="");c=b;}a._wrapperState={initialValue:Sa(c)};}
	function ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d);}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b);}var kb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
	function lb(a){switch(a){case "svg":return "http://www.w3.org/2000/svg";case "math":return "http://www.w3.org/1998/Math/MathML";default:return "http://www.w3.org/1999/xhtml"}}function mb(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?lb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
	var nb,ob=function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a}(function(a,b){if(a.namespaceURI!==kb.svg||"innerHTML"in a)a.innerHTML=b;else {nb=nb||document.createElement("div");nb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=nb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
	function pb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b;}
	var qb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
	floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},rb=["Webkit","ms","Moz","O"];Object.keys(qb).forEach(function(a){rb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qb[b]=qb[a];});});function sb(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||qb.hasOwnProperty(a)&&qb[a]?(""+b).trim():b+"px"}
	function tb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=sb(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e;}}var ub=m$2({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
	function vb(a,b){if(b){if(ub[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(y$2(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(y$2(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(y$2(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(y$2(62));}}
	function wb(a,b){if(-1===a.indexOf("-"))return "string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return !1;default:return !0}}function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;
	function Bb(a){if(a=Cb(a)){if("function"!==typeof yb)throw Error(y$2(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b));}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a;}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a]);}}function Gb(a,b){return a(b)}function Hb(a,b,c,d,e){return a(b,c,d,e)}function Ib(){}var Jb=Gb,Kb=!1,Lb=!1;function Mb(){if(null!==zb||null!==Ab)Ib(),Fb();}
	function Nb(a,b,c){if(Lb)return a(b,c);Lb=!0;try{return Jb(a,b,c)}finally{Lb=!1,Mb();}}
	function Ob(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1;}if(a)return null;if(c&&"function"!==
	typeof c)throw Error(y$2(231,b,typeof c));return c}var Pb=!1;if(fa)try{var Qb={};Object.defineProperty(Qb,"passive",{get:function(){Pb=!0;}});window.addEventListener("test",Qb,Qb);window.removeEventListener("test",Qb,Qb);}catch(a){Pb=!1;}function Rb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l);}catch(n){this.onError(n);}}var Sb=!1,Tb=null,Ub=!1,Vb=null,Wb={onError:function(a){Sb=!0;Tb=a;}};function Xb(a,b,c,d,e,f,g,h,k){Sb=!1;Tb=null;Rb.apply(Wb,arguments);}
	function Yb(a,b,c,d,e,f,g,h,k){Xb.apply(this,arguments);if(Sb){if(Sb){var l=Tb;Sb=!1;Tb=null;}else throw Error(y$2(198));Ub||(Ub=!0,Vb=l);}}function Zb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else {a=b;do b=a,0!==(b.flags&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function $b(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function ac(a){if(Zb(a)!==a)throw Error(y$2(188));}
	function bc(a){var b=a.alternate;if(!b){b=Zb(a);if(null===b)throw Error(y$2(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return ac(e),a;if(f===d)return ac(e),b;f=f.sibling;}throw Error(y$2(188));}if(c.return!==d.return)c=e,d=f;else {for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===
	c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}if(!g)throw Error(y$2(189));}}if(c.alternate!==d)throw Error(y$2(190));}if(3!==c.tag)throw Error(y$2(188));return c.stateNode.current===c?a:b}function cc(a){a=bc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else {if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return null}
	function dc(a,b){for(var c=a.alternate;null!==b;){if(b===a||b===c)return !0;b=b.return;}return !1}var ec,fc,gc,hc,ic=!1,jc=[],kc=null,lc=null,mc=null,nc=new Map,oc=new Map,pc=[],qc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
	function rc(a,b,c,d,e){return {blockedOn:a,domEventName:b,eventSystemFlags:c|16,nativeEvent:e,targetContainers:[d]}}function sc(a,b){switch(a){case "focusin":case "focusout":kc=null;break;case "dragenter":case "dragleave":lc=null;break;case "mouseover":case "mouseout":mc=null;break;case "pointerover":case "pointerout":nc.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":oc.delete(b.pointerId);}}
	function tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=rc(b,c,d,e,f),null!==b&&(b=Cb(b),null!==b&&fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}
	function uc(a,b,c,d,e){switch(b){case "focusin":return kc=tc(kc,a,b,c,d,e),!0;case "dragenter":return lc=tc(lc,a,b,c,d,e),!0;case "mouseover":return mc=tc(mc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;nc.set(f,tc(nc.get(f)||null,a,b,c,d,e));return !0;case "gotpointercapture":return f=e.pointerId,oc.set(f,tc(oc.get(f)||null,a,b,c,d,e)),!0}return !1}
	function vc(a){var b=wc(a.target);if(null!==b){var c=Zb(b);if(null!==c)if(b=c.tag,13===b){if(b=$b(c),null!==b){a.blockedOn=b;hc(a.lanePriority,function(){r$2.unstable_runWithPriority(a.priority,function(){gc(c);});});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null;}
	function xc(a){if(null!==a.blockedOn)return !1;for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c)return b=Cb(c),null!==b&&fc(b),a.blockedOn=c,!1;b.shift();}return !0}function zc(a,b,c){xc(a)&&c.delete(b);}
	function Ac(){for(ic=!1;0<jc.length;){var a=jc[0];if(null!==a.blockedOn){a=Cb(a.blockedOn);null!==a&&ec(a);break}for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c){a.blockedOn=c;break}b.shift();}null===a.blockedOn&&jc.shift();}null!==kc&&xc(kc)&&(kc=null);null!==lc&&xc(lc)&&(lc=null);null!==mc&&xc(mc)&&(mc=null);nc.forEach(zc);oc.forEach(zc);}
	function Bc(a,b){a.blockedOn===b&&(a.blockedOn=null,ic||(ic=!0,r$2.unstable_scheduleCallback(r$2.unstable_NormalPriority,Ac)));}
	function Cc(a){function b(b){return Bc(b,a)}if(0<jc.length){Bc(jc[0],a);for(var c=1;c<jc.length;c++){var d=jc[c];d.blockedOn===a&&(d.blockedOn=null);}}null!==kc&&Bc(kc,a);null!==lc&&Bc(lc,a);null!==mc&&Bc(mc,a);nc.forEach(b);oc.forEach(b);for(c=0;c<pc.length;c++)d=pc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<pc.length&&(c=pc[0],null===c.blockedOn);)vc(c),null===c.blockedOn&&pc.shift();}
	function Dc(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Ec={animationend:Dc("Animation","AnimationEnd"),animationiteration:Dc("Animation","AnimationIteration"),animationstart:Dc("Animation","AnimationStart"),transitionend:Dc("Transition","TransitionEnd")},Fc={},Gc={};
	fa&&(Gc=document.createElement("div").style,"AnimationEvent"in window||(delete Ec.animationend.animation,delete Ec.animationiteration.animation,delete Ec.animationstart.animation),"TransitionEvent"in window||delete Ec.transitionend.transition);function Hc(a){if(Fc[a])return Fc[a];if(!Ec[a])return a;var b=Ec[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Gc)return Fc[a]=b[c];return a}
	var Ic=Hc("animationend"),Jc=Hc("animationiteration"),Kc=Hc("animationstart"),Lc=Hc("transitionend"),Mc=new Map,Nc=new Map,Oc=["abort","abort",Ic,"animationEnd",Jc,"animationIteration",Kc,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart",
	"lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Lc,"transitionEnd","waiting","waiting"];function Pc(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1];e="on"+(e[0].toUpperCase()+e.slice(1));Nc.set(d,b);Mc.set(d,e);da(e,[d]);}}var Qc=r$2.unstable_now;Qc();var F$1=8;
	function Rc(a){if(0!==(1&a))return F$1=15,1;if(0!==(2&a))return F$1=14,2;if(0!==(4&a))return F$1=13,4;var b=24&a;if(0!==b)return F$1=12,b;if(0!==(a&32))return F$1=11,32;b=192&a;if(0!==b)return F$1=10,b;if(0!==(a&256))return F$1=9,256;b=3584&a;if(0!==b)return F$1=8,b;if(0!==(a&4096))return F$1=7,4096;b=4186112&a;if(0!==b)return F$1=6,b;b=62914560&a;if(0!==b)return F$1=5,b;if(a&67108864)return F$1=4,67108864;if(0!==(a&134217728))return F$1=3,134217728;b=805306368&a;if(0!==b)return F$1=2,b;if(0!==(1073741824&a))return F$1=1,1073741824;
	F$1=8;return a}function Sc(a){switch(a){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}function Tc(a){switch(a){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(y$2(358,a));}}
	function Uc(a,b){var c=a.pendingLanes;if(0===c)return F$1=0;var d=0,e=0,f=a.expiredLanes,g=a.suspendedLanes,h=a.pingedLanes;if(0!==f)d=f,e=F$1=15;else if(f=c&134217727,0!==f){var k=f&~g;0!==k?(d=Rc(k),e=F$1):(h&=f,0!==h&&(d=Rc(h),e=F$1));}else f=c&~g,0!==f?(d=Rc(f),e=F$1):0!==h&&(d=Rc(h),e=F$1);if(0===d)return 0;d=31-Vc(d);d=c&((0>d?0:1<<d)<<1)-1;if(0!==b&&b!==d&&0===(b&g)){Rc(b);if(e<=F$1)return b;F$1=e;}b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-Vc(b),e=1<<c,d|=a[c],b&=~e;return d}
	function Wc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function Xc(a,b){switch(a){case 15:return 1;case 14:return 2;case 12:return a=Yc(24&~b),0===a?Xc(10,b):a;case 10:return a=Yc(192&~b),0===a?Xc(8,b):a;case 8:return a=Yc(3584&~b),0===a&&(a=Yc(4186112&~b),0===a&&(a=512)),a;case 2:return b=Yc(805306368&~b),0===b&&(b=268435456),b}throw Error(y$2(358,a));}function Yc(a){return a&-a}function Zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}
	function $c(a,b,c){a.pendingLanes|=b;var d=b-1;a.suspendedLanes&=d;a.pingedLanes&=d;a=a.eventTimes;b=31-Vc(b);a[b]=c;}var Vc=Math.clz32?Math.clz32:ad,bd=Math.log,cd=Math.LN2;function ad(a){return 0===a?32:31-(bd(a)/cd|0)|0}var dd=r$2.unstable_UserBlockingPriority,ed=r$2.unstable_runWithPriority,fd=!0;function gd(a,b,c,d){Kb||Ib();var e=hd,f=Kb;Kb=!0;try{Hb(e,a,b,c,d);}finally{(Kb=f)||Mb();}}function id(a,b,c,d){ed(dd,hd.bind(null,a,b,c,d));}
	function hd(a,b,c,d){if(fd){var e;if((e=0===(b&4))&&0<jc.length&&-1<qc.indexOf(a))a=rc(null,a,b,c,d),jc.push(a);else {var f=yc(a,b,c,d);if(null===f)e&&sc(a,d);else {if(e){if(-1<qc.indexOf(a)){a=rc(f,a,b,c,d);jc.push(a);return}if(uc(f,a,b,c,d))return;sc(a,d);}jd(a,b,d,null,c);}}}}
	function yc(a,b,c,d){var e=xb(d);e=wc(e);if(null!==e){var f=Zb(e);if(null===f)e=null;else {var g=f.tag;if(13===g){e=$b(f);if(null!==e)return e;e=null;}else if(3===g){if(f.stateNode.hydrate)return 3===f.tag?f.stateNode.containerInfo:null;e=null;}else f!==e&&(e=null);}}jd(a,b,d,e,c);return null}var kd=null,ld=null,md=null;
	function nd(){if(md)return md;var a,b=ld,c=b.length,d,e="value"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}function od(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return !0}function qd(){return !1}
	function rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}m$2(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&
	(a.returnValue=!1),this.isDefaultPrevented=pd);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd);},persist:function(){},isPersistent:pd});return b}
	var sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=m$2({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=m$2({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in
	a)return a.movementX;a!==yd&&(yd&&"mousemove"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return "movementY"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=m$2({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=m$2({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=m$2({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=m$2({},sd,{clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=m$2({},sd,{data:0}),Ld=rd(Kd),Md={Esc:"Escape",
	Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",
	119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}
	var Qd=m$2({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=od(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return "keypress"===a.type?od(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===
	a.type?od(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=m$2({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=m$2({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=m$2({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=m$2({},Ad,{deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},
	deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae$1=fa&&"CompositionEvent"in window,be=null;fa&&"documentMode"in document&&(be=document.documentMode);var ce$1=fa&&"TextEvent"in window&&!be,de=fa&&(!ae$1||be&&8<be&&11>=be),ee$1=String.fromCharCode(32),fe$1=!1;
	function ge(a,b){switch(a){case "keyup":return -1!==$d.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "focusout":return !0;default:return !1}}function he(a){a=a.detail;return "object"===typeof a&&"data"in a?a.data:null}var ie$1=!1;function je(a,b){switch(a){case "compositionend":return he(b);case "keypress":if(32!==b.which)return null;fe$1=!0;return ee$1;case "textInput":return a=b.data,a===ee$1&&fe$1?null:a;default:return null}}
	function ke(a,b){if(ie$1)return "compositionend"===a||!ae$1&&ge(a,b)?(a=nd(),md=ld=kd=null,ie$1=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return de&&"ko"!==b.locale?null:b.data;default:return null}}
	var le$1={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return "input"===b?!!le$1[a.type]:"textarea"===b?!0:!1}function ne$1(a,b,c,d){Eb(d);b=oe$1(b,"onChange");0<b.length&&(c=new td("onChange","change",null,c,d),a.push({event:c,listeners:b}));}var pe=null,qe=null;function re$1(a){se$1(a,0);}function te$1(a){var b=ue$1(a);if(Wa(b))return a}
	function ve$1(a,b){if("change"===a)return b}var we=!1;if(fa){var xe;if(fa){var ye="oninput"in document;if(!ye){var ze=document.createElement("div");ze.setAttribute("oninput","return;");ye="function"===typeof ze.oninput;}xe=ye;}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode);}function Ae(){pe&&(pe.detachEvent("onpropertychange",Be),qe=pe=null);}function Be(a){if("value"===a.propertyName&&te$1(qe)){var b=[];ne$1(b,qe,a,xb(a));a=re$1;if(Kb)a(b);else {Kb=!0;try{Gb(a,b);}finally{Kb=!1,Mb();}}}}
	function Ce(a,b,c){"focusin"===a?(Ae(),pe=b,qe=c,pe.attachEvent("onpropertychange",Be)):"focusout"===a&&Ae();}function De(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return te$1(qe)}function Ee(a,b){if("click"===a)return te$1(b)}function Fe(a,b){if("input"===a||"change"===a)return te$1(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He="function"===typeof Object.is?Object.is:Ge,Ie=Object.prototype.hasOwnProperty;
	function Je(a,b){if(He(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++)if(!Ie.call(b,c[d])||!He(a[c[d]],b[c[d]]))return !1;return !0}function Ke(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
	function Le(a,b){var c=Ke(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return {node:c,offset:b-a};a=d;}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode;}c=void 0;}c=Ke(c);}}function Me(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Me(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
	function Ne(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href;}catch(d){c=!1;}if(c)a=b.contentWindow;else break;b=Xa(a.document);}return b}function Oe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
	var Pe=fa&&"documentMode"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;
	function Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,"selectionStart"in d&&Oe(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Je(Se,d)||(Se=d,d=oe$1(Re,"onSelect"),0<d.length&&(b=new td("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)));}
	Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),
	0);Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);Pc(Oc,2);for(var Ve="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),We=0;We<Ve.length;We++)Nc.set(Ve[We],0);ea("onMouseEnter",["mouseout","mouseover"]);
	ea("onMouseLeave",["mouseout","mouseover"]);ea("onPointerEnter",["pointerout","pointerover"]);ea("onPointerLeave",["pointerout","pointerover"]);da("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));da("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));da("onBeforeInput",["compositionend","keypress","textInput","paste"]);da("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));
	da("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));da("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Xe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ye=new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));
	function Ze(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;Yb(d,b,void 0,a);a.currentTarget=null;}
	function se$1(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k;}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k;}}}if(Ub)throw a=Vb,Ub=!1,Vb=null,a;}
	function G$2(a,b){var c=$e(b),d=a+"__bubble";c.has(d)||(af(b,a,2,!1),c.add(d));}var bf="_reactListening"+Math.random().toString(36).slice(2);function cf(a){a[bf]||(a[bf]=!0,ba.forEach(function(b){Ye.has(b)||df(b,!1,a,null);df(b,!0,a,null);}));}
	function df(a,b,c,d){var e=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,f=c;"selectionchange"===a&&9!==c.nodeType&&(f=c.ownerDocument);if(null!==d&&!b&&Ye.has(a)){if("scroll"!==a)return;e|=2;f=d;}var g=$e(f),h=a+"__"+(b?"capture":"bubble");g.has(h)||(b&&(e|=4),af(f,a,e,b),g.add(h));}
	function af(a,b,c,d){var e=Nc.get(b);switch(void 0===e?2:e){case 0:e=gd;break;case 1:e=id;break;default:e=hd;}c=e.bind(null,b,c,a);e=void 0;!Pb||"touchstart"!==b&&"touchmove"!==b&&"wheel"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1);}
	function jd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return;}for(;null!==h;){g=wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode;}}d=d.return;}Nb(function(){var d=f,e=xb(c),g=[];
	a:{var h=Mc.get(a);if(void 0!==h){var k=td,x=a;switch(a){case "keypress":if(0===od(c))break a;case "keydown":case "keyup":k=Rd;break;case "focusin":x="focus";k=Fd;break;case "focusout":x="blur";k=Fd;break;case "beforeblur":case "afterblur":k=Fd;break;case "click":if(2===c.button)break a;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":k=Bd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":k=
	Dd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":k=Vd;break;case Ic:case Jc:case Kc:k=Hd;break;case Lc:k=Xd;break;case "scroll":k=vd;break;case "wheel":k=Zd;break;case "copy":case "cut":case "paste":k=Jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":k=Td;}var w=0!==(b&4),z=!w&&"scroll"===a,u=w?null!==h?h+"Capture":null:h;w=[];for(var t=d,q;null!==
	t;){q=t;var v=q.stateNode;5===q.tag&&null!==v&&(q=v,null!==u&&(v=Ob(t,u),null!=v&&w.push(ef(t,v,q))));if(z)break;t=t.return;}0<w.length&&(h=new k(h,x,null,c,e),g.push({event:h,listeners:w}));}}if(0===(b&7)){a:{h="mouseover"===a||"pointerover"===a;k="mouseout"===a||"pointerout"===a;if(h&&0===(b&16)&&(x=c.relatedTarget||c.fromElement)&&(wc(x)||x[ff]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(x=c.relatedTarget||c.toElement,k=d,x=x?wc(x):null,null!==
	x&&(z=Zb(x),x!==z||5!==x.tag&&6!==x.tag))x=null;}else k=null,x=d;if(k!==x){w=Bd;v="onMouseLeave";u="onMouseEnter";t="mouse";if("pointerout"===a||"pointerover"===a)w=Td,v="onPointerLeave",u="onPointerEnter",t="pointer";z=null==k?h:ue$1(k);q=null==x?h:ue$1(x);h=new w(v,t+"leave",k,c,e);h.target=z;h.relatedTarget=q;v=null;wc(e)===d&&(w=new w(u,t+"enter",x,c,e),w.target=q,w.relatedTarget=z,v=w);z=v;if(k&&x)b:{w=k;u=x;t=0;for(q=w;q;q=gf(q))t++;q=0;for(v=u;v;v=gf(v))q++;for(;0<t-q;)w=gf(w),t--;for(;0<q-t;)u=
	gf(u),q--;for(;t--;){if(w===u||null!==u&&w===u.alternate)break b;w=gf(w);u=gf(u);}w=null;}else w=null;null!==k&&hf(g,h,k,w,!1);null!==x&&null!==z&&hf(g,z,x,w,!0);}}}a:{h=d?ue$1(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if("select"===k||"input"===k&&"file"===h.type)var J=ve$1;else if(me(h))if(we)J=Fe;else {J=De;var K=Ce;}else (k=h.nodeName)&&"input"===k.toLowerCase()&&("checkbox"===h.type||"radio"===h.type)&&(J=Ee);if(J&&(J=J(a,d))){ne$1(g,J,c,e);break a}K&&K(a,h,d);"focusout"===a&&(K=h._wrapperState)&&
	K.controlled&&"number"===h.type&&bb(h,"number",h.value);}K=d?ue$1(d):window;switch(a){case "focusin":if(me(K)||"true"===K.contentEditable)Qe=K,Re=d,Se=null;break;case "focusout":Se=Re=Qe=null;break;case "mousedown":Te=!0;break;case "contextmenu":case "mouseup":case "dragend":Te=!1;Ue(g,c,e);break;case "selectionchange":if(Pe)break;case "keydown":case "keyup":Ue(g,c,e);}var Q;if(ae$1)b:{switch(a){case "compositionstart":var L="onCompositionStart";break b;case "compositionend":L="onCompositionEnd";break b;
	case "compositionupdate":L="onCompositionUpdate";break b}L=void 0;}else ie$1?ge(a,c)&&(L="onCompositionEnd"):"keydown"===a&&229===c.keyCode&&(L="onCompositionStart");L&&(de&&"ko"!==c.locale&&(ie$1||"onCompositionStart"!==L?"onCompositionEnd"===L&&ie$1&&(Q=nd()):(kd=e,ld="value"in kd?kd.value:kd.textContent,ie$1=!0)),K=oe$1(d,L),0<K.length&&(L=new Ld(L,a,null,c,e),g.push({event:L,listeners:K}),Q?L.data=Q:(Q=he(c),null!==Q&&(L.data=Q))));if(Q=ce$1?je(a,c):ke(a,c))d=oe$1(d,"onBeforeInput"),0<d.length&&(e=new Ld("onBeforeInput",
	"beforeinput",null,c,e),g.push({event:e,listeners:d}),e.data=Q);}se$1(g,b);});}function ef(a,b,c){return {instance:a,listener:b,currentTarget:c}}function oe$1(a,b){for(var c=b+"Capture",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Ob(a,c),null!=f&&d.unshift(ef(a,f,e)),f=Ob(a,b),null!=f&&d.push(ef(a,f,e)));a=a.return;}return d}function gf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}
	function hf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Ob(c,f),null!=k&&g.unshift(ef(c,k,h))):e||(k=Ob(c,f),null!=k&&g.push(ef(c,k,h))));c=c.return;}0!==g.length&&a.push({event:b,listeners:g});}function jf(){}var kf=null,lf=null;function mf(a,b){switch(a){case "button":case "input":case "select":case "textarea":return !!b.autoFocus}return !1}
	function nf(a,b){return "textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var of="function"===typeof setTimeout?setTimeout:void 0,pf="function"===typeof clearTimeout?clearTimeout:void 0;function qf(a){1===a.nodeType?a.textContent="":9===a.nodeType&&(a=a.body,null!=a&&(a.textContent=""));}
	function rf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}function sf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--;}else "/$"===c&&b++;}a=a.previousSibling;}return null}var tf=0;function uf(a){return {$$typeof:Ga,toString:a,valueOf:a}}var vf=Math.random().toString(36).slice(2),wf="__reactFiber$"+vf,xf="__reactProps$"+vf,ff="__reactContainer$"+vf,yf="__reactEvents$"+vf;
	function wc(a){var b=a[wf];if(b)return b;for(var c=a.parentNode;c;){if(b=c[ff]||c[wf]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=sf(a);null!==a;){if(c=a[wf])return c;a=sf(a);}return b}a=c;c=a.parentNode;}return null}function Cb(a){a=a[wf]||a[ff];return !a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue$1(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(y$2(33));}function Db(a){return a[xf]||null}
	function $e(a){var b=a[yf];void 0===b&&(b=a[yf]=new Set);return b}var zf=[],Af=-1;function Bf(a){return {current:a}}function H$1(a){0>Af||(a.current=zf[Af],zf[Af]=null,Af--);}function I$1(a,b){Af++;zf[Af]=a.current;a.current=b;}var Cf={},M$1=Bf(Cf),N$1=Bf(!1),Df=Cf;
	function Ef(a,b){var c=a.type.contextTypes;if(!c)return Cf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function Ff(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Gf(){H$1(N$1);H$1(M$1);}function Hf(a,b,c){if(M$1.current!==Cf)throw Error(y$2(168));I$1(M$1,b);I$1(N$1,c);}
	function If(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(y$2(108,Ra(b)||"Unknown",e));return m$2({},c,d)}function Jf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Cf;Df=M$1.current;I$1(M$1,a);I$1(N$1,N$1.current);return !0}function Kf(a,b,c){var d=a.stateNode;if(!d)throw Error(y$2(169));c?(a=If(a,b,Df),d.__reactInternalMemoizedMergedChildContext=a,H$1(N$1),H$1(M$1),I$1(M$1,a)):H$1(N$1);I$1(N$1,c);}
	var Lf=null,Mf=null,Nf=r$2.unstable_runWithPriority,Of=r$2.unstable_scheduleCallback,Pf=r$2.unstable_cancelCallback,Qf=r$2.unstable_shouldYield,Rf=r$2.unstable_requestPaint,Sf=r$2.unstable_now,Tf=r$2.unstable_getCurrentPriorityLevel,Uf=r$2.unstable_ImmediatePriority,Vf=r$2.unstable_UserBlockingPriority,Wf=r$2.unstable_NormalPriority,Xf=r$2.unstable_LowPriority,Yf=r$2.unstable_IdlePriority,Zf={},$f=void 0!==Rf?Rf:function(){},ag=null,bg=null,cg=!1,dg=Sf(),O$1=1E4>dg?Sf:function(){return Sf()-dg};
	function eg(){switch(Tf()){case Uf:return 99;case Vf:return 98;case Wf:return 97;case Xf:return 96;case Yf:return 95;default:throw Error(y$2(332));}}function fg(a){switch(a){case 99:return Uf;case 98:return Vf;case 97:return Wf;case 96:return Xf;case 95:return Yf;default:throw Error(y$2(332));}}function gg(a,b){a=fg(a);return Nf(a,b)}function hg(a,b,c){a=fg(a);return Of(a,b,c)}function ig(){if(null!==bg){var a=bg;bg=null;Pf(a);}jg();}
	function jg(){if(!cg&&null!==ag){cg=!0;var a=0;try{var b=ag;gg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});ag=null;}catch(c){throw null!==ag&&(ag=ag.slice(a+1)),Of(Uf,ig),c;}finally{cg=!1;}}}var kg=ra.ReactCurrentBatchConfig;function lg(a,b){if(a&&a.defaultProps){b=m$2({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var mg=Bf(null),ng=null,og=null,pg=null;function qg(){pg=og=ng=null;}
	function rg(a){var b=mg.current;H$1(mg);a.type._context._currentValue=b;}function sg(a,b){for(;null!==a;){var c=a.alternate;if((a.childLanes&b)===b)if(null===c||(c.childLanes&b)===b)break;else c.childLanes|=b;else a.childLanes|=b,null!==c&&(c.childLanes|=b);a=a.return;}}function tg(a,b){ng=a;pg=og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(ug=!0),a.firstContext=null);}
	function vg(a,b){if(pg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)pg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===og){if(null===ng)throw Error(y$2(308));og=b;ng.dependencies={lanes:0,firstContext:b,responders:null};}else og=og.next=b;}return a._currentValue}var wg=!1;function xg(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null};}
	function yg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects});}function zg(a,b){return {eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}function Ag(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b;}}
	function Bg(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next;}while(null!==c);null===f?e=f=b:f=f.next=b;}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=
	b;c.lastBaseUpdate=b;}
	function Cg(a,b,c,d){var e=a.updateQueue;wg=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var n=a.alternate;if(null!==n){n=n.updateQueue;var A=n.lastBaseUpdate;A!==g&&(null===A?n.firstBaseUpdate=l:A.next=l,n.lastBaseUpdate=k);}}if(null!==f){A=e.baseState;g=0;n=l=k=null;do{h=f.lane;var p=f.eventTime;if((d&h)===h){null!==n&&(n=n.next={eventTime:p,lane:0,tag:f.tag,payload:f.payload,callback:f.callback,
	next:null});a:{var C=a,x=f;h=b;p=c;switch(x.tag){case 1:C=x.payload;if("function"===typeof C){A=C.call(p,A,h);break a}A=C;break a;case 3:C.flags=C.flags&-4097|64;case 0:C=x.payload;h="function"===typeof C?C.call(p,A,h):C;if(null===h||void 0===h)break a;A=m$2({},A,h);break a;case 2:wg=!0;}}null!==f.callback&&(a.flags|=32,h=e.effects,null===h?e.effects=[f]:h.push(f));}else p={eventTime:p,lane:h,tag:f.tag,payload:f.payload,callback:f.callback,next:null},null===n?(l=n=p,k=A):n=n.next=p,g|=h;f=f.next;if(null===
	f)if(h=e.shared.pending,null===h)break;else f=h.next,h.next=null,e.lastBaseUpdate=h,e.shared.pending=null;}while(1);null===n&&(k=A);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=n;Dg|=g;a.lanes=g;a.memoizedState=A;}}function Eg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(y$2(191,e));e.call(d);}}}var Fg=(new aa.Component).refs;
	function Gg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:m$2({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c);}
	var Kg={isMounted:function(a){return (a=a._reactInternals)?Zb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d);},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d);},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=Hg(),d=Ig(a),e=zg(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=
	b);Ag(a,e);Jg(a,d,c);}};function Lg(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Je(c,d)||!Je(e,f):!0}
	function Mg(a,b,c){var d=!1,e=Cf;var f=b.contextType;"object"===typeof f&&null!==f?f=vg(f):(e=Ff(b)?Df:M$1.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Ef(a,e):Cf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Kg;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
	function Ng(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Kg.enqueueReplaceState(b,b.state,null);}
	function Og(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Fg;xg(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=vg(f):(f=Ff(b)?Df:M$1.current,e.context=Ef(a,f));Cg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Gg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||
	(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Kg.enqueueReplaceState(e,e.state,null),Cg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4);}var Pg=Array.isArray;
	function Qg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(y$2(309));var d=c.stateNode;}if(!d)throw Error(y$2(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Fg&&(b=d.refs={});null===a?delete b[e]:b[e]=a;};b._stringRef=e;return b}if("string"!==typeof a)throw Error(y$2(284));if(!c._owner)throw Error(y$2(290,a));}return a}
	function Rg(a,b){if("textarea"!==a.type)throw Error(y$2(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b));}
	function Sg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.flags=8;}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Tg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags=2,
	c):d;b.flags=2;return c}function g(b){a&&null===b.alternate&&(b.flags=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Ug(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Qg(a,b,c),d.return=a,d;d=Vg(c.type,c.key,c.props,null,a.mode,d);d.ref=Qg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=
	Wg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function n(a,b,c,d,f){if(null===b||7!==b.tag)return b=Xg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function A(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Ug(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case sa:return c=Vg(b.type,b.key,b.props,null,a.mode,c),c.ref=Qg(a,null,b),c.return=a,c;case ta:return b=Wg(b,a.mode,c),b.return=a,b}if(Pg(b)||La(b))return b=Xg(b,
	a.mode,c,null),b.return=a,b;Rg(a,b);}return null}function p(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case sa:return c.key===e?c.type===ua?n(a,b,c.props.children,d,e):k(a,b,c,d):null;case ta:return c.key===e?l(a,b,c,d):null}if(Pg(c)||La(c))return null!==e?null:n(a,b,c,d,null);Rg(a,c);}return null}function C(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=a.get(c)||
	null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case sa:return a=a.get(null===d.key?c:d.key)||null,d.type===ua?n(b,a,d.props.children,e,d.key):k(b,a,d,e);case ta:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Pg(d)||La(d))return a=a.get(c)||null,n(b,a,d,e,null);Rg(b,d);}return null}function x(e,g,h,k){for(var l=null,t=null,u=g,z=g=0,q=null;null!==u&&z<h.length;z++){u.index>z?(q=u,u=null):q=u.sibling;var n=p(e,u,h[z],k);if(null===n){null===u&&(u=q);break}a&&u&&null===
	n.alternate&&b(e,u);g=f(n,g,z);null===t?l=n:t.sibling=n;t=n;u=q;}if(z===h.length)return c(e,u),l;if(null===u){for(;z<h.length;z++)u=A(e,h[z],k),null!==u&&(g=f(u,g,z),null===t?l=u:t.sibling=u,t=u);return l}for(u=d(e,u);z<h.length;z++)q=C(u,e,z,h[z],k),null!==q&&(a&&null!==q.alternate&&u.delete(null===q.key?z:q.key),g=f(q,g,z),null===t?l=q:t.sibling=q,t=q);a&&u.forEach(function(a){return b(e,a)});return l}function w(e,g,h,k){var l=La(h);if("function"!==typeof l)throw Error(y$2(150));h=l.call(h);if(null==
	h)throw Error(y$2(151));for(var t=l=null,u=g,z=g=0,q=null,n=h.next();null!==u&&!n.done;z++,n=h.next()){u.index>z?(q=u,u=null):q=u.sibling;var w=p(e,u,n.value,k);if(null===w){null===u&&(u=q);break}a&&u&&null===w.alternate&&b(e,u);g=f(w,g,z);null===t?l=w:t.sibling=w;t=w;u=q;}if(n.done)return c(e,u),l;if(null===u){for(;!n.done;z++,n=h.next())n=A(e,n.value,k),null!==n&&(g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);return l}for(u=d(e,u);!n.done;z++,n=h.next())n=C(u,e,z,n.value,k),null!==n&&(a&&null!==n.alternate&&
	u.delete(null===n.key?z:n.key),g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);a&&u.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ua&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case sa:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ua){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,k.sibling);
	d=e(k,f.props);d.ref=Qg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling;}f.type===ua?(d=Xg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Vg(f.type,f.key,f.props,null,a.mode,h),h.ref=Qg(a,d,f),h.return=a,a=h);}return g(a);case ta:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else {c(a,d);break}else b(a,d);d=d.sibling;}d=
	Wg(f,a.mode,h);d.return=a;a=d;}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Ug(f,a.mode,h),d.return=a,a=d),g(a);if(Pg(f))return x(a,d,f,h);if(La(f))return w(a,d,f,h);l&&Rg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 22:case 0:case 11:case 15:throw Error(y$2(152,Ra(a.type)||"Component"));}return c(a,d)}}var Yg=Sg(!0),Zg=Sg(!1),$g={},ah=Bf($g),bh=Bf($g),ch=Bf($g);
	function dh(a){if(a===$g)throw Error(y$2(174));return a}function eh(a,b){I$1(ch,b);I$1(bh,a);I$1(ah,$g);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:mb(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=mb(b,a);}H$1(ah);I$1(ah,b);}function fh(){H$1(ah);H$1(bh);H$1(ch);}function gh(a){dh(ch.current);var b=dh(ah.current);var c=mb(b,a.type);b!==c&&(I$1(bh,a),I$1(ah,c));}function hh(a){bh.current===a&&(H$1(ah),H$1(bh));}var P$1=Bf(0);
	function ih(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||"$?"===c.data||"$!"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}return null}var jh=null,kh=null,lh=!1;
	function mh(a,b){var c=nh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.flags=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c;}function oh(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return !1;default:return !1}}
	function ph(a){if(lh){var b=kh;if(b){var c=b;if(!oh(a,b)){b=rf(c.nextSibling);if(!b||!oh(a,b)){a.flags=a.flags&-1025|2;lh=!1;jh=a;return}mh(jh,c);}jh=a;kh=rf(b.firstChild);}else a.flags=a.flags&-1025|2,lh=!1,jh=a;}}function qh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;jh=a;}
	function rh(a){if(a!==jh)return !1;if(!lh)return qh(a),lh=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!nf(b,a.memoizedProps))for(b=kh;b;)mh(a,b),b=rf(b.nextSibling);qh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(y$2(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if("/$"===c){if(0===b){kh=rf(a.nextSibling);break a}b--;}else "$"!==c&&"$!"!==c&&"$?"!==c||b++;}a=a.nextSibling;}kh=null;}}else kh=jh?rf(a.stateNode.nextSibling):null;return !0}
	function sh(){kh=jh=null;lh=!1;}var th=[];function uh(){for(var a=0;a<th.length;a++)th[a]._workInProgressVersionPrimary=null;th.length=0;}var vh=ra.ReactCurrentDispatcher,wh=ra.ReactCurrentBatchConfig,xh=0,R$1=null,S$1=null,T$1=null,yh=!1,zh=!1;function Ah(){throw Error(y$2(321));}function Bh(a,b){if(null===b)return !1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return !1;return !0}
	function Ch(a,b,c,d,e,f){xh=f;R$1=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;vh.current=null===a||null===a.memoizedState?Dh:Eh;a=c(d,e);if(zh){f=0;do{zh=!1;if(!(25>f))throw Error(y$2(301));f+=1;T$1=S$1=null;b.updateQueue=null;vh.current=Fh;a=c(d,e);}while(zh)}vh.current=Gh;b=null!==S$1&&null!==S$1.next;xh=0;T$1=S$1=R$1=null;yh=!1;if(b)throw Error(y$2(300));return a}function Hh(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===T$1?R$1.memoizedState=T$1=a:T$1=T$1.next=a;return T$1}
	function Ih(){if(null===S$1){var a=R$1.alternate;a=null!==a?a.memoizedState:null;}else a=S$1.next;var b=null===T$1?R$1.memoizedState:T$1.next;if(null!==b)T$1=b,S$1=a;else {if(null===a)throw Error(y$2(310));S$1=a;a={memoizedState:S$1.memoizedState,baseState:S$1.baseState,baseQueue:S$1.baseQueue,queue:S$1.queue,next:null};null===T$1?R$1.memoizedState=T$1=a:T$1=T$1.next=a;}return T$1}function Jh(a,b){return "function"===typeof b?b(a):b}
	function Kh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y$2(311));c.lastRenderedReducer=a;var d=S$1,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g;}d.baseQueue=e=f;c.pending=null;}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.lane;if((xh&l)===l)null!==h&&(h=h.next={lane:0,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),d=k.eagerReducer===a?k.eagerState:a(d,k.action);else {var n={lane:l,action:k.action,eagerReducer:k.eagerReducer,
	eagerState:k.eagerState,next:null};null===h?(g=h=n,f=d):h=h.next=n;R$1.lanes|=l;Dg|=l;}k=k.next;}while(null!==k&&k!==e);null===h?f=d:h.next=g;He(d,b.memoizedState)||(ug=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d;}return [b.memoizedState,c.dispatch]}
	function Lh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y$2(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f;}return [f,d]}
	function Mh(a,b,c){var d=b._getVersion;d=d(b._source);var e=b._workInProgressVersionPrimary;if(null!==e)a=e===d;else if(a=a.mutableReadLanes,a=(xh&a)===a)b._workInProgressVersionPrimary=d,th.push(b);if(a)return c(b._source);th.push(b);throw Error(y$2(350));}
	function Nh(a,b,c,d){var e=U$1;if(null===e)throw Error(y$2(349));var f=b._getVersion,g=f(b._source),h=vh.current,k=h.useState(function(){return Mh(e,b,c)}),l=k[1],n=k[0];k=T$1;var A=a.memoizedState,p=A.refs,C=p.getSnapshot,x=A.source;A=A.subscribe;var w=R$1;a.memoizedState={refs:p,source:b,subscribe:d};h.useEffect(function(){p.getSnapshot=c;p.setSnapshot=l;var a=f(b._source);if(!He(g,a)){a=c(b._source);He(n,a)||(l(a),a=Ig(w),e.mutableReadLanes|=a&e.pendingLanes);a=e.mutableReadLanes;e.entangledLanes|=a;for(var d=
	e.entanglements,h=a;0<h;){var k=31-Vc(h),v=1<<k;d[k]|=a;h&=~v;}}},[c,b,d]);h.useEffect(function(){return d(b._source,function(){var a=p.getSnapshot,c=p.setSnapshot;try{c(a(b._source));var d=Ig(w);e.mutableReadLanes|=d&e.pendingLanes;}catch(q){c(function(){throw q;});}})},[b,d]);He(C,c)&&He(x,b)&&He(A,d)||(a={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:n},a.dispatch=l=Oh.bind(null,R$1,a),k.queue=a,k.baseQueue=null,n=Mh(e,b,c),k.memoizedState=k.baseState=n);return n}
	function Ph(a,b,c){var d=Ih();return Nh(d,a,b,c)}function Qh(a){var b=Hh();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:a};a=a.dispatch=Oh.bind(null,R$1,a);return [b.memoizedState,a]}
	function Rh(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=R$1.updateQueue;null===b?(b={lastEffect:null},R$1.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function Sh(a){var b=Hh();a={current:a};return b.memoizedState=a}function Th(){return Ih().memoizedState}function Uh(a,b,c,d){var e=Hh();R$1.flags|=a;e.memoizedState=Rh(1|b,c,void 0,void 0===d?null:d);}
	function Vh(a,b,c,d){var e=Ih();d=void 0===d?null:d;var f=void 0;if(null!==S$1){var g=S$1.memoizedState;f=g.destroy;if(null!==d&&Bh(d,g.deps)){Rh(b,c,f,d);return}}R$1.flags|=a;e.memoizedState=Rh(1|b,c,f,d);}function Wh(a,b){return Uh(516,4,a,b)}function Xh(a,b){return Vh(516,4,a,b)}function Yh(a,b){return Vh(4,2,a,b)}function Zh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null);};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null;}}
	function $h(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Vh(4,2,Zh.bind(null,b,a),c)}function ai(){}function bi(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}function ci(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}
	function di(a,b){var c=eg();gg(98>c?98:c,function(){a(!0);});gg(97<c?97:c,function(){var c=wh.transition;wh.transition=1;try{a(!1),b();}finally{wh.transition=c;}});}
	function Oh(a,b,c){var d=Hg(),e=Ig(a),f={lane:e,action:c,eagerReducer:null,eagerState:null,next:null},g=b.pending;null===g?f.next=f:(f.next=g.next,g.next=f);b.pending=f;g=a.alternate;if(a===R$1||null!==g&&g===R$1)zh=yh=!0;else {if(0===a.lanes&&(null===g||0===g.lanes)&&(g=b.lastRenderedReducer,null!==g))try{var h=b.lastRenderedState,k=g(h,c);f.eagerReducer=g;f.eagerState=k;if(He(k,h))return}catch(l){}finally{}Jg(a,e,d);}}
	var Gh={readContext:vg,useCallback:Ah,useContext:Ah,useEffect:Ah,useImperativeHandle:Ah,useLayoutEffect:Ah,useMemo:Ah,useReducer:Ah,useRef:Ah,useState:Ah,useDebugValue:Ah,useDeferredValue:Ah,useTransition:Ah,useMutableSource:Ah,useOpaqueIdentifier:Ah,unstable_isNewReconciler:!1},Dh={readContext:vg,useCallback:function(a,b){Hh().memoizedState=[a,void 0===b?null:b];return a},useContext:vg,useEffect:Wh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Uh(4,2,Zh.bind(null,
	b,a),c)},useLayoutEffect:function(a,b){return Uh(4,2,a,b)},useMemo:function(a,b){var c=Hh();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Hh();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=Oh.bind(null,R$1,a);return [d.memoizedState,a]},useRef:Sh,useState:Qh,useDebugValue:ai,useDeferredValue:function(a){var b=Qh(a),c=b[0],d=b[1];Wh(function(){var b=wh.transition;
	wh.transition=1;try{d(a);}finally{wh.transition=b;}},[a]);return c},useTransition:function(){var a=Qh(!1),b=a[0];a=di.bind(null,a[1]);Sh(a);return [a,b]},useMutableSource:function(a,b,c){var d=Hh();d.memoizedState={refs:{getSnapshot:b,setSnapshot:null},source:a,subscribe:c};return Nh(d,a,b,c)},useOpaqueIdentifier:function(){if(lh){var a=!1,b=uf(function(){a||(a=!0,c("r:"+(tf++).toString(36)));throw Error(y$2(355));}),c=Qh(b)[1];0===(R$1.mode&2)&&(R$1.flags|=516,Rh(5,function(){c("r:"+(tf++).toString(36));},
	void 0,null));return b}b="r:"+(tf++).toString(36);Qh(b);return b},unstable_isNewReconciler:!1},Eh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Kh,useRef:Th,useState:function(){return Kh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Kh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a);}finally{wh.transition=b;}},[a]);return c},useTransition:function(){var a=Kh(Jh)[0];return [Th().current,
	a]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Kh(Jh)[0]},unstable_isNewReconciler:!1},Fh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Lh,useRef:Th,useState:function(){return Lh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Lh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a);}finally{wh.transition=b;}},[a]);return c},useTransition:function(){var a=Lh(Jh)[0];return [Th().current,
	a]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Lh(Jh)[0]},unstable_isNewReconciler:!1},ei=ra.ReactCurrentOwner,ug=!1;function fi(a,b,c,d){b.child=null===a?Zg(b,null,c,d):Yg(b,a.child,c,d);}function gi(a,b,c,d,e){c=c.render;var f=b.ref;tg(b,e);d=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi(a,b,d,e);return b.child}
	function ii(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!ji(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ki(a,b,g,d,e,f);a=Vg(c.type,null,d,b,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(0===(e&f)&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:Je,c(e,d)&&a.ref===b.ref))return hi(a,b,f);b.flags|=1;a=Tg(g,d);a.ref=b.ref;a.return=b;return b.child=a}
	function ki(a,b,c,d,e,f){if(null!==a&&Je(a.memoizedProps,d)&&a.ref===b.ref)if(ug=!1,0!==(f&e))0!==(a.flags&16384)&&(ug=!0);else return b.lanes=a.lanes,hi(a,b,f);return li(a,b,c,d,f)}
	function mi(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode||"unstable-defer-without-hiding"===d.mode)if(0===(b.mode&4))b.memoizedState={baseLanes:0},ni(b,c);else if(0!==(c&1073741824))b.memoizedState={baseLanes:0},ni(b,null!==f?f.baseLanes:c);else return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a},ni(b,a),null;else null!==f?(d=f.baseLanes|c,b.memoizedState=null):d=c,ni(b,d);fi(a,b,e,c);return b.child}
	function oi(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=128;}function li(a,b,c,d,e){var f=Ff(c)?Df:M$1.current;f=Ef(b,f);tg(b,e);c=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi(a,b,c,e);return b.child}
	function pi(a,b,c,d,e){if(Ff(c)){var f=!0;Jf(b);}else f=!1;tg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),Mg(b,c,d),Og(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=vg(l):(l=Ff(c)?Df:M$1.current,l=Ef(b,l));var n=c.getDerivedStateFromProps,A="function"===typeof n||"function"===typeof g.getSnapshotBeforeUpdate;A||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
	"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Ng(b,g,d,l);wg=!1;var p=b.memoizedState;g.state=p;Cg(b,d,g,e);k=b.memoizedState;h!==d||p!==k||N$1.current||wg?("function"===typeof n&&(Gg(b,c,n,d),k=b.memoizedState),(h=wg||Lg(b,c,h,d,p,k,l))?(A||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===
	typeof g.componentDidMount&&(b.flags|=4)):("function"===typeof g.componentDidMount&&(b.flags|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4),d=!1);}else {g=b.stateNode;yg(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:lg(b.type,h);g.props=l;A=b.pendingProps;p=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=vg(k):(k=Ff(c)?Df:M$1.current,k=Ef(b,k));var C=c.getDerivedStateFromProps;(n="function"===typeof C||
	"function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==A||p!==k)&&Ng(b,g,d,k);wg=!1;p=b.memoizedState;g.state=p;Cg(b,d,g,e);var x=b.memoizedState;h!==A||p!==x||N$1.current||wg?("function"===typeof C&&(Gg(b,c,C,d),x=b.memoizedState),(l=wg||Lg(b,c,l,d,p,x,k))?(n||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,
	x,k),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||
	h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),d=!1);}return qi(a,b,c,d,f,e)}
	function qi(a,b,c,d,e,f){oi(a,b);var g=0!==(b.flags&64);if(!d&&!g)return e&&Kf(b,c,!1),hi(a,b,f);d=b.stateNode;ei.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Yg(b,a.child,null,f),b.child=Yg(b,null,h,f)):fi(a,b,h,f);b.memoizedState=d.state;e&&Kf(b,c,!0);return b.child}function ri(a){var b=a.stateNode;b.pendingContext?Hf(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Hf(a,b.context,!1);eh(a,b.containerInfo);}
	var si={dehydrated:null,retryLane:0};
	function ti(a,b,c){var d=b.pendingProps,e=P$1.current,f=!1,g;(g=0!==(b.flags&64))||(g=null!==a&&null===a.memoizedState?!1:0!==(e&2));g?(f=!0,b.flags&=-65):null!==a&&null===a.memoizedState||void 0===d.fallback||!0===d.unstable_avoidThisFallback||(e|=1);I$1(P$1,e&1);if(null===a){void 0!==d.fallback&&ph(b);a=d.children;e=d.fallback;if(f)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},b.memoizedState=si,a;if("number"===typeof d.unstable_expectedLoadTime)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},
	b.memoizedState=si,b.lanes=33554432,a;c=vi({mode:"visible",children:a},b.mode,c,null);c.return=b;return b.child=c}if(null!==a.memoizedState){if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:
	{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}function ui(a,b,c,d){var e=a.mode,f=a.child;b={mode:"hidden",children:b};0===(e&2)&&null!==f?(f.childLanes=0,f.pendingProps=b):f=vi(b,e,0,null);c=Xg(c,e,d,null);f.return=a;c.return=a;f.sibling=c;a.child=f;return c}
	function xi(a,b,c,d){var e=a.child;a=e.sibling;c=Tg(e,{mode:"visible",children:c});0===(b.mode&2)&&(c.lanes=d);c.return=b;c.sibling=null;null!==a&&(a.nextEffect=null,a.flags=8,b.firstEffect=b.lastEffect=a);return b.child=c}
	function wi(a,b,c,d,e){var f=b.mode,g=a.child;a=g.sibling;var h={mode:"hidden",children:c};0===(f&2)&&b.child!==g?(c=b.child,c.childLanes=0,c.pendingProps=h,g=c.lastEffect,null!==g?(b.firstEffect=c.firstEffect,b.lastEffect=g,g.nextEffect=null):b.firstEffect=b.lastEffect=null):c=Tg(g,h);null!==a?d=Tg(a,d):(d=Xg(d,f,e,null),d.flags|=2);d.return=b;c.return=b;c.sibling=d;b.child=c;return d}function yi(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);sg(a.return,b);}
	function zi(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailMode=e,g.lastEffect=f);}
	function Ai(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;fi(a,b,d.children,c);d=P$1.current;if(0!==(d&2))d=d&1|2,b.flags|=64;else {if(null!==a&&0!==(a.flags&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&yi(a,c);else if(19===a.tag)yi(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return;}a.sibling.return=a.return;a=a.sibling;}d&=1;}I$1(P$1,d);if(0===(b.mode&2))b.memoizedState=
	null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===ih(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);zi(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===ih(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a;}zi(b,!0,c,null,f,b.lastEffect);break;case "together":zi(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null;}return b.child}
	function hi(a,b,c){null!==a&&(b.dependencies=a.dependencies);Dg|=b.lanes;if(0!==(c&b.childLanes)){if(null!==a&&b.child!==a.child)throw Error(y$2(153));if(null!==b.child){a=b.child;c=Tg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Tg(a,a.pendingProps),c.return=b;c.sibling=null;}return b.child}return null}var Bi,Ci,Di,Ei;
	Bi=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}};Ci=function(){};
	Di=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;dh(ah.current);var f=null;switch(c){case "input":e=Ya(a,e);d=Ya(a,d);f=[];break;case "option":e=eb(a,e);d=eb(a,d);f=[];break;case "select":e=m$2({},e,{value:void 0});d=m$2({},d,{value:void 0});f=[];break;case "textarea":e=gb(a,e);d=gb(a,d);f=[];break;default:"function"!==typeof e.onClick&&"function"===typeof d.onClick&&(a.onclick=jf);}vb(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if("style"===
	l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&(c||(c={}),c[g]="");}else "dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(ca.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if("style"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]="");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||
	(c={}),c[g]=k[g]);}else c||(f||(f=[]),f.push(l,c)),c=k;else "dangerouslySetInnerHTML"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):"children"===l?"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(l,""+k):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(ca.hasOwnProperty(l)?(null!=k&&"onScroll"===l&&G$2("scroll",a),f||h===k||(f=[])):"object"===typeof k&&null!==k&&k.$$typeof===Ga?k.toString():(f=f||[]).push(l,k));}c&&(f=f||[]).push("style",
	c);var l=f;if(b.updateQueue=l)b.flags|=4;}};Ei=function(a,b,c,d){c!==d&&(b.flags|=4);};function Fi(a,b){if(!lh)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null;}}
	function Gi(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return Ff(b.type)&&Gf(),null;case 3:fh();H$1(N$1);H$1(M$1);uh();d=b.stateNode;d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)rh(b)?b.flags|=4:d.hydrate||(b.flags|=256);Ci(b);return null;case 5:hh(b);var e=dh(ch.current);c=b.type;if(null!==a&&null!=b.stateNode)Di(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=128);else {if(!d){if(null===
	b.stateNode)throw Error(y$2(166));return null}a=dh(ah.current);if(rh(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[wf]=b;d[xf]=f;switch(c){case "dialog":G$2("cancel",d);G$2("close",d);break;case "iframe":case "object":case "embed":G$2("load",d);break;case "video":case "audio":for(a=0;a<Xe.length;a++)G$2(Xe[a],d);break;case "source":G$2("error",d);break;case "img":case "image":case "link":G$2("error",d);G$2("load",d);break;case "details":G$2("toggle",d);break;case "input":Za(d,f);G$2("invalid",d);break;case "select":d._wrapperState=
	{wasMultiple:!!f.multiple};G$2("invalid",d);break;case "textarea":hb(d,f),G$2("invalid",d);}vb(c,f);a=null;for(var g in f)f.hasOwnProperty(g)&&(e=f[g],"children"===g?"string"===typeof e?d.textContent!==e&&(a=["children",e]):"number"===typeof e&&d.textContent!==""+e&&(a=["children",""+e]):ca.hasOwnProperty(g)&&null!=e&&"onScroll"===g&&G$2("scroll",d));switch(c){case "input":Va(d);cb(d,f,!0);break;case "textarea":Va(d);jb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&(d.onclick=
	jf);}d=a;b.updateQueue=d;null!==d&&(b.flags|=4);}else {g=9===e.nodeType?e:e.ownerDocument;a===kb.html&&(a=lb(c));a===kb.html?"script"===c?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),"select"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[wf]=b;a[xf]=d;Bi(a,b,!1,!1);b.stateNode=a;g=wb(c,d);switch(c){case "dialog":G$2("cancel",a);G$2("close",a);
	e=d;break;case "iframe":case "object":case "embed":G$2("load",a);e=d;break;case "video":case "audio":for(e=0;e<Xe.length;e++)G$2(Xe[e],a);e=d;break;case "source":G$2("error",a);e=d;break;case "img":case "image":case "link":G$2("error",a);G$2("load",a);e=d;break;case "details":G$2("toggle",a);e=d;break;case "input":Za(a,d);e=Ya(a,d);G$2("invalid",a);break;case "option":e=eb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};e=m$2({},d,{value:void 0});G$2("invalid",a);break;case "textarea":hb(a,d);e=
	gb(a,d);G$2("invalid",a);break;default:e=d;}vb(c,e);var h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];"style"===f?tb(a,k):"dangerouslySetInnerHTML"===f?(k=k?k.__html:void 0,null!=k&&ob(a,k)):"children"===f?"string"===typeof k?("textarea"!==c||""!==k)&&pb(a,k):"number"===typeof k&&pb(a,""+k):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(ca.hasOwnProperty(f)?null!=k&&"onScroll"===f&&G$2("scroll",a):null!=k&&qa(a,f,k,g));}switch(c){case "input":Va(a);cb(a,d,!1);
	break;case "textarea":Va(a);jb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+Sa(d.value));break;case "select":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof e.onClick&&(a.onclick=jf);}mf(c,d)&&(b.flags|=4);}null!==b.ref&&(b.flags|=128);}return null;case 6:if(a&&null!=b.stateNode)Ei(a,b,a.memoizedProps,d);else {if("string"!==typeof d&&null===b.stateNode)throw Error(y$2(166));
	c=dh(ch.current);dh(ah.current);rh(b)?(d=b.stateNode,c=b.memoizedProps,d[wf]=b,d.nodeValue!==c&&(b.flags|=4)):(d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[wf]=b,b.stateNode=d);}return null;case 13:H$1(P$1);d=b.memoizedState;if(0!==(b.flags&64))return b.lanes=c,b;d=null!==d;c=!1;null===a?void 0!==b.memoizedProps.fallback&&rh(b):c=null!==a.memoizedState;if(d&&!c&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(P$1.current&1))0===V$1&&(V$1=3);else {if(0===V$1||3===V$1)V$1=
	4;null===U$1||0===(Dg&134217727)&&0===(Hi&134217727)||Ii(U$1,W);}if(d||c)b.flags|=4;return null;case 4:return fh(),Ci(b),null===a&&cf(b.stateNode.containerInfo),null;case 10:return rg(b),null;case 17:return Ff(b.type)&&Gf(),null;case 19:H$1(P$1);d=b.memoizedState;if(null===d)return null;f=0!==(b.flags&64);g=d.rendering;if(null===g)if(f)Fi(d,!1);else {if(0!==V$1||null!==a&&0!==(a.flags&64))for(a=b.child;null!==a;){g=ih(a);if(null!==g){b.flags|=64;Fi(d,!1);f=g.updateQueue;null!==f&&(b.updateQueue=f,b.flags|=4);
	null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=2,f.nextEffect=null,f.firstEffect=null,f.lastEffect=null,g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,
	f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;I$1(P$1,P$1.current&1|2);return b.child}a=a.sibling;}null!==d.tail&&O$1()>Ji&&(b.flags|=64,f=!0,Fi(d,!1),b.lanes=33554432);}else {if(!f)if(a=ih(g),null!==a){if(b.flags|=64,f=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Fi(d,!0),null===d.tail&&"hidden"===d.tailMode&&!g.alternate&&!lh)return b=b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*O$1()-d.renderingStartTime>Ji&&1073741824!==c&&(b.flags|=
	64,f=!0,Fi(d,!1),b.lanes=33554432);d.isBackwards?(g.sibling=b.child,b.child=g):(c=d.last,null!==c?c.sibling=g:b.child=g,d.last=g);}return null!==d.tail?(c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=O$1(),c.sibling=null,b=P$1.current,I$1(P$1,f?b&1|2:b&1),c):null;case 23:case 24:return Ki(),null!==a&&null!==a.memoizedState!==(null!==b.memoizedState)&&"unstable-defer-without-hiding"!==d.mode&&(b.flags|=4),null}throw Error(y$2(156,b.tag));}
	function Li(a){switch(a.tag){case 1:Ff(a.type)&&Gf();var b=a.flags;return b&4096?(a.flags=b&-4097|64,a):null;case 3:fh();H$1(N$1);H$1(M$1);uh();b=a.flags;if(0!==(b&64))throw Error(y$2(285));a.flags=b&-4097|64;return a;case 5:return hh(a),null;case 13:return H$1(P$1),b=a.flags,b&4096?(a.flags=b&-4097|64,a):null;case 19:return H$1(P$1),null;case 4:return fh(),null;case 10:return rg(a),null;case 23:case 24:return Ki(),null;default:return null}}
	function Mi(a,b){try{var c="",d=b;do c+=Qa(d),d=d.return;while(d);var e=c;}catch(f){e="\nError generating stack: "+f.message+"\n"+f.stack;}return {value:a,source:b,stack:e}}function Ni(a,b){try{console.error(b.value);}catch(c){setTimeout(function(){throw c;});}}var Oi="function"===typeof WeakMap?WeakMap:Map;function Pi(a,b,c){c=zg(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Qi||(Qi=!0,Ri=d);Ni(a,b);};return c}
	function Si(a,b,c){c=zg(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ni(a,b);return d(e)};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===Ti?Ti=new Set([this]):Ti.add(this),Ni(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""});});return c}var Ui="function"===typeof WeakSet?WeakSet:Set;
	function Vi(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null);}catch(c){Wi(a,c);}else b.current=null;}function Xi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.flags&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:lg(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b;}return;case 3:b.flags&256&&qf(b.stateNode.containerInfo);return;case 5:case 6:case 4:case 17:return}throw Error(y$2(163));}
	function Yi(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{if(3===(a.tag&3)){var d=a.create;a.destroy=d();}a=a.next;}while(a!==b)}b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{var e=a;d=e.next;e=e.tag;0!==(e&4)&&0!==(e&1)&&(Zi(c,a),$i(c,a));a=d;}while(a!==b)}return;case 1:a=c.stateNode;c.flags&4&&(null===b?a.componentDidMount():(d=c.elementType===c.type?b.memoizedProps:lg(c.type,b.memoizedProps),a.componentDidUpdate(d,
	b.memoizedState,a.__reactInternalSnapshotBeforeUpdate)));b=c.updateQueue;null!==b&&Eg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode;}Eg(c,b,a);}return;case 5:a=c.stateNode;null===b&&c.flags&4&&mf(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Cc(c))));
	return;case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(y$2(163));}
	function aj(a,b){for(var c=a;;){if(5===c.tag){var d=c.stateNode;if(b)d=d.style,"function"===typeof d.setProperty?d.setProperty("display","none","important"):d.display="none";else {d=c.stateNode;var e=c.memoizedProps.style;e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null;d.style.display=sb("display",e);}}else if(6===c.tag)c.stateNode.nodeValue=b?"":c.memoizedProps;else if((23!==c.tag&&24!==c.tag||null===c.memoizedState||c===a)&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===
	a)break;for(;null===c.sibling;){if(null===c.return||c.return===a)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}}
	function bj(a,b){if(Mf&&"function"===typeof Mf.onCommitFiberUnmount)try{Mf.onCommitFiberUnmount(Lf,b);}catch(f){}switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var c=a=a.next;do{var d=c,e=d.destroy;d=d.tag;if(void 0!==e)if(0!==(d&4))Zi(b,c);else {d=b;try{e();}catch(f){Wi(d,f);}}c=c.next;}while(c!==a)}break;case 1:Vi(b);a=b.stateNode;if("function"===typeof a.componentWillUnmount)try{a.props=b.memoizedProps,a.state=b.memoizedState,a.componentWillUnmount();}catch(f){Wi(b,
	f);}break;case 5:Vi(b);break;case 4:cj(a,b);}}function dj(a){a.alternate=null;a.child=null;a.dependencies=null;a.firstEffect=null;a.lastEffect=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.return=null;a.updateQueue=null;}function ej(a){return 5===a.tag||3===a.tag||4===a.tag}
	function fj(a){a:{for(var b=a.return;null!==b;){if(ej(b))break a;b=b.return;}throw Error(y$2(160));}var c=b;b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(y$2(161));}c.flags&16&&(pb(b,""),c.flags&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||ej(c.return)){c=null;break a}c=c.return;}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.flags&2)continue b;if(null===
	c.child||4===c.tag)continue b;else c.child.return=c,c=c.child;}if(!(c.flags&2)){c=c.stateNode;break a}}d?gj(a,c,b):hj(a,c,b);}
	function gj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=jf));else if(4!==d&&(a=a.child,null!==a))for(gj(a,b,c),a=a.sibling;null!==a;)gj(a,b,c),a=a.sibling;}
	function hj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(hj(a,b,c),a=a.sibling;null!==a;)hj(a,b,c),a=a.sibling;}
	function cj(a,b){for(var c=b,d=!1,e,f;;){if(!d){d=c.return;a:for(;;){if(null===d)throw Error(y$2(160));e=d.stateNode;switch(d.tag){case 5:f=!1;break a;case 3:e=e.containerInfo;f=!0;break a;case 4:e=e.containerInfo;f=!0;break a}d=d.return;}d=!0;}if(5===c.tag||6===c.tag){a:for(var g=a,h=c,k=h;;)if(bj(g,k),null!==k.child&&4!==k.tag)k.child.return=k,k=k.child;else {if(k===h)break a;for(;null===k.sibling;){if(null===k.return||k.return===h)break a;k=k.return;}k.sibling.return=k.return;k=k.sibling;}f?(g=e,h=c.stateNode,
	8===g.nodeType?g.parentNode.removeChild(h):g.removeChild(h)):e.removeChild(c.stateNode);}else if(4===c.tag){if(null!==c.child){e=c.stateNode.containerInfo;f=!0;c.child.return=c;c=c.child;continue}}else if(bj(a,c),null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;4===c.tag&&(d=!1);}c.sibling.return=c.return;c=c.sibling;}}
	function ij(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:var c=b.updateQueue;c=null!==c?c.lastEffect:null;if(null!==c){var d=c=c.next;do 3===(d.tag&3)&&(a=d.destroy,d.destroy=void 0,void 0!==a&&a()),d=d.next;while(d!==c)}return;case 1:return;case 5:c=b.stateNode;if(null!=c){d=b.memoizedProps;var e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[xf]=d;"input"===a&&"radio"===d.type&&null!=d.name&&$a(c,d);wb(a,e);b=wb(a,d);for(e=0;e<f.length;e+=
	2){var g=f[e],h=f[e+1];"style"===g?tb(c,h):"dangerouslySetInnerHTML"===g?ob(c,h):"children"===g?pb(c,h):qa(c,g,h,b);}switch(a){case "input":ab(c,d);break;case "textarea":ib(c,d);break;case "select":a=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,f=d.value,null!=f?fb(c,!!d.multiple,f,!1):a!==!!d.multiple&&(null!=d.defaultValue?fb(c,!!d.multiple,d.defaultValue,!0):fb(c,!!d.multiple,d.multiple?[]:"",!1));}}}return;case 6:if(null===b.stateNode)throw Error(y$2(162));b.stateNode.nodeValue=
	b.memoizedProps;return;case 3:c=b.stateNode;c.hydrate&&(c.hydrate=!1,Cc(c.containerInfo));return;case 12:return;case 13:null!==b.memoizedState&&(jj=O$1(),aj(b.child,!0));kj(b);return;case 19:kj(b);return;case 17:return;case 23:case 24:aj(b,null!==b.memoizedState);return}throw Error(y$2(163));}function kj(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Ui);b.forEach(function(b){var d=lj.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d));});}}
	function mj(a,b){return null!==a&&(a=a.memoizedState,null===a||null!==a.dehydrated)?(b=b.memoizedState,null!==b&&null===b.dehydrated):!1}var nj=Math.ceil,oj=ra.ReactCurrentDispatcher,pj=ra.ReactCurrentOwner,X$1=0,U$1=null,Y=null,W=0,qj=0,rj=Bf(0),V$1=0,sj=null,tj=0,Dg=0,Hi=0,uj=0,vj=null,jj=0,Ji=Infinity;function wj(){Ji=O$1()+500;}var Z$1=null,Qi=!1,Ri=null,Ti=null,xj=!1,yj=null,zj=90,Aj=[],Bj=[],Cj=null,Dj=0,Ej=null,Fj=-1,Gj=0,Hj=0,Ij=null,Jj=!1;function Hg(){return 0!==(X$1&48)?O$1():-1!==Fj?Fj:Fj=O$1()}
	function Ig(a){a=a.mode;if(0===(a&2))return 1;if(0===(a&4))return 99===eg()?1:2;0===Gj&&(Gj=tj);if(0!==kg.transition){0!==Hj&&(Hj=null!==vj?vj.pendingLanes:0);a=Gj;var b=4186112&~Hj;b&=-b;0===b&&(a=4186112&~a,b=a&-a,0===b&&(b=8192));return b}a=eg();0!==(X$1&4)&&98===a?a=Xc(12,Gj):(a=Sc(a),a=Xc(a,Gj));return a}
	function Jg(a,b,c){if(50<Dj)throw Dj=0,Ej=null,Error(y$2(185));a=Kj(a,b);if(null===a)return null;$c(a,b,c);a===U$1&&(Hi|=b,4===V$1&&Ii(a,W));var d=eg();1===b?0!==(X$1&8)&&0===(X$1&48)?Lj(a):(Mj(a,c),0===X$1&&(wj(),ig())):(0===(X$1&4)||98!==d&&99!==d||(null===Cj?Cj=new Set([a]):Cj.add(a)),Mj(a,c));vj=a;}function Kj(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}
	function Mj(a,b){for(var c=a.callbackNode,d=a.suspendedLanes,e=a.pingedLanes,f=a.expirationTimes,g=a.pendingLanes;0<g;){var h=31-Vc(g),k=1<<h,l=f[h];if(-1===l){if(0===(k&d)||0!==(k&e)){l=b;Rc(k);var n=F$1;f[h]=10<=n?l+250:6<=n?l+5E3:-1;}}else l<=b&&(a.expiredLanes|=k);g&=~k;}d=Uc(a,a===U$1?W:0);b=F$1;if(0===d)null!==c&&(c!==Zf&&Pf(c),a.callbackNode=null,a.callbackPriority=0);else {if(null!==c){if(a.callbackPriority===b)return;c!==Zf&&Pf(c);}15===b?(c=Lj.bind(null,a),null===ag?(ag=[c],bg=Of(Uf,jg)):ag.push(c),
	c=Zf):14===b?c=hg(99,Lj.bind(null,a)):(c=Tc(b),c=hg(c,Nj.bind(null,a)));a.callbackPriority=b;a.callbackNode=c;}}
	function Nj(a){Fj=-1;Hj=Gj=0;if(0!==(X$1&48))throw Error(y$2(327));var b=a.callbackNode;if(Oj()&&a.callbackNode!==b)return null;var c=Uc(a,a===U$1?W:0);if(0===c)return null;var d=c;var e=X$1;X$1|=16;var f=Pj();if(U$1!==a||W!==d)wj(),Qj(a,d);do try{Rj();break}catch(h){Sj(a,h);}while(1);qg();oj.current=f;X$1=e;null!==Y?d=0:(U$1=null,W=0,d=V$1);if(0!==(tj&Hi))Qj(a,0);else if(0!==d){2===d&&(X$1|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),c=Wc(a),0!==c&&(d=Tj(a,c)));if(1===d)throw b=sj,Qj(a,0),Ii(a,c),Mj(a,O$1()),b;a.finishedWork=
	a.current.alternate;a.finishedLanes=c;switch(d){case 0:case 1:throw Error(y$2(345));case 2:Uj(a);break;case 3:Ii(a,c);if((c&62914560)===c&&(d=jj+500-O$1(),10<d)){if(0!==Uc(a,0))break;e=a.suspendedLanes;if((e&c)!==c){Hg();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=of(Uj.bind(null,a),d);break}Uj(a);break;case 4:Ii(a,c);if((c&4186112)===c)break;d=a.eventTimes;for(e=-1;0<c;){var g=31-Vc(c);f=1<<g;g=d[g];g>e&&(e=g);c&=~f;}c=e;c=O$1()-c;c=(120>c?120:480>c?480:1080>c?1080:1920>c?1920:3E3>c?3E3:4320>
	c?4320:1960*nj(c/1960))-c;if(10<c){a.timeoutHandle=of(Uj.bind(null,a),c);break}Uj(a);break;case 5:Uj(a);break;default:throw Error(y$2(329));}}Mj(a,O$1());return a.callbackNode===b?Nj.bind(null,a):null}function Ii(a,b){b&=~uj;b&=~Hi;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-Vc(b),d=1<<c;a[c]=-1;b&=~d;}}
	function Lj(a){if(0!==(X$1&48))throw Error(y$2(327));Oj();if(a===U$1&&0!==(a.expiredLanes&W)){var b=W;var c=Tj(a,b);0!==(tj&Hi)&&(b=Uc(a,b),c=Tj(a,b));}else b=Uc(a,0),c=Tj(a,b);0!==a.tag&&2===c&&(X$1|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),b=Wc(a),0!==b&&(c=Tj(a,b)));if(1===c)throw c=sj,Qj(a,0),Ii(a,b),Mj(a,O$1()),c;a.finishedWork=a.current.alternate;a.finishedLanes=b;Uj(a);Mj(a,O$1());return null}
	function Vj(){if(null!==Cj){var a=Cj;Cj=null;a.forEach(function(a){a.expiredLanes|=24&a.pendingLanes;Mj(a,O$1());});}ig();}function Wj(a,b){var c=X$1;X$1|=1;try{return a(b)}finally{X$1=c,0===X$1&&(wj(),ig());}}function Xj(a,b){var c=X$1;X$1&=-2;X$1|=8;try{return a(b)}finally{X$1=c,0===X$1&&(wj(),ig());}}function ni(a,b){I$1(rj,qj);qj|=b;tj|=b;}function Ki(){qj=rj.current;H$1(rj);}
	function Qj(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,pf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Gf();break;case 3:fh();H$1(N$1);H$1(M$1);uh();break;case 5:hh(d);break;case 4:fh();break;case 13:H$1(P$1);break;case 19:H$1(P$1);break;case 10:rg(d);break;case 23:case 24:Ki();}c=c.return;}U$1=a;Y=Tg(a.current,null);W=qj=tj=b;V$1=0;sj=null;uj=Hi=Dg=0;}
	function Sj(a,b){do{var c=Y;try{qg();vh.current=Gh;if(yh){for(var d=R$1.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next;}yh=!1;}xh=0;T$1=S$1=R$1=null;zh=!1;pj.current=null;if(null===c||null===c.return){V$1=1;sj=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=W;h.flags|=2048;h.firstEffect=h.lastEffect=null;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k;if(0===(h.mode&2)){var n=h.alternate;n?(h.updateQueue=n.updateQueue,h.memoizedState=n.memoizedState,h.lanes=n.lanes):
	(h.updateQueue=null,h.memoizedState=null);}var A=0!==(P$1.current&1),p=g;do{var C;if(C=13===p.tag){var x=p.memoizedState;if(null!==x)C=null!==x.dehydrated?!0:!1;else {var w=p.memoizedProps;C=void 0===w.fallback?!1:!0!==w.unstable_avoidThisFallback?!0:A?!1:!0;}}if(C){var z=p.updateQueue;if(null===z){var u=new Set;u.add(l);p.updateQueue=u;}else z.add(l);if(0===(p.mode&2)){p.flags|=64;h.flags|=16384;h.flags&=-2981;if(1===h.tag)if(null===h.alternate)h.tag=17;else {var t=zg(-1,1);t.tag=2;Ag(h,t);}h.lanes|=1;break a}k=
	void 0;h=b;var q=f.pingCache;null===q?(q=f.pingCache=new Oi,k=new Set,q.set(l,k)):(k=q.get(l),void 0===k&&(k=new Set,q.set(l,k)));if(!k.has(h)){k.add(h);var v=Yj.bind(null,f,l,h);l.then(v,v);}p.flags|=4096;p.lanes=b;break a}p=p.return;}while(null!==p);k=Error((Ra(h.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");}5!==V$1&&(V$1=2);k=Mi(k,h);p=
	g;do{switch(p.tag){case 3:f=k;p.flags|=4096;b&=-b;p.lanes|=b;var J=Pi(p,f,b);Bg(p,J);break a;case 1:f=k;var K=p.type,Q=p.stateNode;if(0===(p.flags&64)&&("function"===typeof K.getDerivedStateFromError||null!==Q&&"function"===typeof Q.componentDidCatch&&(null===Ti||!Ti.has(Q)))){p.flags|=4096;b&=-b;p.lanes|=b;var L=Si(p,f,b);Bg(p,L);break a}}p=p.return;}while(null!==p)}Zj(c);}catch(va){b=va;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}
	function Pj(){var a=oj.current;oj.current=Gh;return null===a?Gh:a}function Tj(a,b){var c=X$1;X$1|=16;var d=Pj();U$1===a&&W===b||Qj(a,b);do try{ak();break}catch(e){Sj(a,e);}while(1);qg();X$1=c;oj.current=d;if(null!==Y)throw Error(y$2(261));U$1=null;W=0;return V$1}function ak(){for(;null!==Y;)bk(Y);}function Rj(){for(;null!==Y&&!Qf();)bk(Y);}function bk(a){var b=ck(a.alternate,a,qj);a.memoizedProps=a.pendingProps;null===b?Zj(a):Y=b;pj.current=null;}
	function Zj(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&2048)){c=Gi(c,b,qj);if(null!==c){Y=c;return}c=b;if(24!==c.tag&&23!==c.tag||null===c.memoizedState||0!==(qj&1073741824)||0===(c.mode&4)){for(var d=0,e=c.child;null!==e;)d|=e.lanes|e.childLanes,e=e.sibling;c.childLanes=d;}null!==a&&0===(a.flags&2048)&&(null===a.firstEffect&&(a.firstEffect=b.firstEffect),null!==b.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=b.firstEffect),a.lastEffect=b.lastEffect),1<b.flags&&(null!==
	a.lastEffect?a.lastEffect.nextEffect=b:a.firstEffect=b,a.lastEffect=b));}else {c=Li(b);if(null!==c){c.flags&=2047;Y=c;return}null!==a&&(a.firstEffect=a.lastEffect=null,a.flags|=2048);}b=b.sibling;if(null!==b){Y=b;return}Y=b=a;}while(null!==b);0===V$1&&(V$1=5);}function Uj(a){var b=eg();gg(99,dk.bind(null,a,b));return null}
	function dk(a,b){do Oj();while(null!==yj);if(0!==(X$1&48))throw Error(y$2(327));var c=a.finishedWork;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(y$2(177));a.callbackNode=null;var d=c.lanes|c.childLanes,e=d,f=a.pendingLanes&~e;a.pendingLanes=e;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=e;a.mutableReadLanes&=e;a.entangledLanes&=e;e=a.entanglements;for(var g=a.eventTimes,h=a.expirationTimes;0<f;){var k=31-Vc(f),l=1<<k;e[k]=0;g[k]=-1;h[k]=-1;f&=~l;}null!==
	Cj&&0===(d&24)&&Cj.has(a)&&Cj.delete(a);a===U$1&&(Y=U$1=null,W=0);1<c.flags?null!==c.lastEffect?(c.lastEffect.nextEffect=c,d=c.firstEffect):d=c:d=c.firstEffect;if(null!==d){e=X$1;X$1|=32;pj.current=null;kf=fd;g=Ne();if(Oe(g)){if("selectionStart"in g)h={start:g.selectionStart,end:g.selectionEnd};else a:if(h=(h=g.ownerDocument)&&h.defaultView||window,(l=h.getSelection&&h.getSelection())&&0!==l.rangeCount){h=l.anchorNode;f=l.anchorOffset;k=l.focusNode;l=l.focusOffset;try{h.nodeType,k.nodeType;}catch(va){h=null;
	break a}var n=0,A=-1,p=-1,C=0,x=0,w=g,z=null;b:for(;;){for(var u;;){w!==h||0!==f&&3!==w.nodeType||(A=n+f);w!==k||0!==l&&3!==w.nodeType||(p=n+l);3===w.nodeType&&(n+=w.nodeValue.length);if(null===(u=w.firstChild))break;z=w;w=u;}for(;;){if(w===g)break b;z===h&&++C===f&&(A=n);z===k&&++x===l&&(p=n);if(null!==(u=w.nextSibling))break;w=z;z=w.parentNode;}w=u;}h=-1===A||-1===p?null:{start:A,end:p};}else h=null;h=h||{start:0,end:0};}else h=null;lf={focusedElem:g,selectionRange:h};fd=!1;Ij=null;Jj=!1;Z$1=d;do try{ek();}catch(va){if(null===
	Z$1)throw Error(y$2(330));Wi(Z$1,va);Z$1=Z$1.nextEffect;}while(null!==Z$1);Ij=null;Z$1=d;do try{for(g=a;null!==Z$1;){var t=Z$1.flags;t&16&&pb(Z$1.stateNode,"");if(t&128){var q=Z$1.alternate;if(null!==q){var v=q.ref;null!==v&&("function"===typeof v?v(null):v.current=null);}}switch(t&1038){case 2:fj(Z$1);Z$1.flags&=-3;break;case 6:fj(Z$1);Z$1.flags&=-3;ij(Z$1.alternate,Z$1);break;case 1024:Z$1.flags&=-1025;break;case 1028:Z$1.flags&=-1025;ij(Z$1.alternate,Z$1);break;case 4:ij(Z$1.alternate,Z$1);break;case 8:h=Z$1;cj(g,h);var J=h.alternate;dj(h);null!==
	J&&dj(J);}Z$1=Z$1.nextEffect;}}catch(va){if(null===Z$1)throw Error(y$2(330));Wi(Z$1,va);Z$1=Z$1.nextEffect;}while(null!==Z$1);v=lf;q=Ne();t=v.focusedElem;g=v.selectionRange;if(q!==t&&t&&t.ownerDocument&&Me(t.ownerDocument.documentElement,t)){null!==g&&Oe(t)&&(q=g.start,v=g.end,void 0===v&&(v=q),"selectionStart"in t?(t.selectionStart=q,t.selectionEnd=Math.min(v,t.value.length)):(v=(q=t.ownerDocument||document)&&q.defaultView||window,v.getSelection&&(v=v.getSelection(),h=t.textContent.length,J=Math.min(g.start,h),g=void 0===
	g.end?J:Math.min(g.end,h),!v.extend&&J>g&&(h=g,g=J,J=h),h=Le(t,J),f=Le(t,g),h&&f&&(1!==v.rangeCount||v.anchorNode!==h.node||v.anchorOffset!==h.offset||v.focusNode!==f.node||v.focusOffset!==f.offset)&&(q=q.createRange(),q.setStart(h.node,h.offset),v.removeAllRanges(),J>g?(v.addRange(q),v.extend(f.node,f.offset)):(q.setEnd(f.node,f.offset),v.addRange(q))))));q=[];for(v=t;v=v.parentNode;)1===v.nodeType&&q.push({element:v,left:v.scrollLeft,top:v.scrollTop});"function"===typeof t.focus&&t.focus();for(t=
	0;t<q.length;t++)v=q[t],v.element.scrollLeft=v.left,v.element.scrollTop=v.top;}fd=!!kf;lf=kf=null;a.current=c;Z$1=d;do try{for(t=a;null!==Z$1;){var K=Z$1.flags;K&36&&Yi(t,Z$1.alternate,Z$1);if(K&128){q=void 0;var Q=Z$1.ref;if(null!==Q){var L=Z$1.stateNode;switch(Z$1.tag){case 5:q=L;break;default:q=L;}"function"===typeof Q?Q(q):Q.current=q;}}Z$1=Z$1.nextEffect;}}catch(va){if(null===Z$1)throw Error(y$2(330));Wi(Z$1,va);Z$1=Z$1.nextEffect;}while(null!==Z$1);Z$1=null;$f();X$1=e;}else a.current=c;if(xj)xj=!1,yj=a,zj=b;else for(Z$1=d;null!==Z$1;)b=
	Z$1.nextEffect,Z$1.nextEffect=null,Z$1.flags&8&&(K=Z$1,K.sibling=null,K.stateNode=null),Z$1=b;d=a.pendingLanes;0===d&&(Ti=null);1===d?a===Ej?Dj++:(Dj=0,Ej=a):Dj=0;c=c.stateNode;if(Mf&&"function"===typeof Mf.onCommitFiberRoot)try{Mf.onCommitFiberRoot(Lf,c,void 0,64===(c.current.flags&64));}catch(va){}Mj(a,O$1());if(Qi)throw Qi=!1,a=Ri,Ri=null,a;if(0!==(X$1&8))return null;ig();return null}
	function ek(){for(;null!==Z$1;){var a=Z$1.alternate;Jj||null===Ij||(0!==(Z$1.flags&8)?dc(Z$1,Ij)&&(Jj=!0):13===Z$1.tag&&mj(a,Z$1)&&dc(Z$1,Ij)&&(Jj=!0));var b=Z$1.flags;0!==(b&256)&&Xi(a,Z$1);0===(b&512)||xj||(xj=!0,hg(97,function(){Oj();return null}));Z$1=Z$1.nextEffect;}}function Oj(){if(90!==zj){var a=97<zj?97:zj;zj=90;return gg(a,fk)}return !1}function $i(a,b){Aj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}));}function Zi(a,b){Bj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}));}
	function fk(){if(null===yj)return !1;var a=yj;yj=null;if(0!==(X$1&48))throw Error(y$2(331));var b=X$1;X$1|=32;var c=Bj;Bj=[];for(var d=0;d<c.length;d+=2){var e=c[d],f=c[d+1],g=e.destroy;e.destroy=void 0;if("function"===typeof g)try{g();}catch(k){if(null===f)throw Error(y$2(330));Wi(f,k);}}c=Aj;Aj=[];for(d=0;d<c.length;d+=2){e=c[d];f=c[d+1];try{var h=e.create;e.destroy=h();}catch(k){if(null===f)throw Error(y$2(330));Wi(f,k);}}for(h=a.current.firstEffect;null!==h;)a=h.nextEffect,h.nextEffect=null,h.flags&8&&(h.sibling=
	null,h.stateNode=null),h=a;X$1=b;ig();return !0}function gk(a,b,c){b=Mi(c,b);b=Pi(a,b,1);Ag(a,b);b=Hg();a=Kj(a,1);null!==a&&($c(a,1,b),Mj(a,b));}
	function Wi(a,b){if(3===a.tag)gk(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){gk(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d))){a=Mi(b,a);var e=Si(c,a,1);Ag(c,e);e=Hg();c=Kj(c,1);if(null!==c)$c(c,1,e),Mj(c,e);else if("function"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d)))try{d.componentDidCatch(b,a);}catch(f){}break}}c=c.return;}}
	function Yj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=Hg();a.pingedLanes|=a.suspendedLanes&c;U$1===a&&(W&c)===c&&(4===V$1||3===V$1&&(W&62914560)===W&&500>O$1()-jj?Qj(a,0):uj|=c);Mj(a,b);}function lj(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=a.mode,0===(b&2)?b=1:0===(b&4)?b=99===eg()?1:2:(0===Gj&&(Gj=tj),b=Yc(62914560&~Gj),0===b&&(b=4194304)));c=Hg();a=Kj(a,b);null!==a&&($c(a,b,c),Mj(a,c));}var ck;
	ck=function(a,b,c){var d=b.lanes;if(null!==a)if(a.memoizedProps!==b.pendingProps||N$1.current)ug=!0;else if(0!==(c&d))ug=0!==(a.flags&16384)?!0:!1;else {ug=!1;switch(b.tag){case 3:ri(b);sh();break;case 5:gh(b);break;case 1:Ff(b.type)&&Jf(b);break;case 4:eh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;var e=b.type._context;I$1(mg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){if(0!==(c&b.child.childLanes))return ti(a,b,c);I$1(P$1,P$1.current&1);b=hi(a,b,c);return null!==
	b?b.sibling:null}I$1(P$1,P$1.current&1);break;case 19:d=0!==(c&b.childLanes);if(0!==(a.flags&64)){if(d)return Ai(a,b,c);b.flags|=64;}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);I$1(P$1,P$1.current);if(d)break;else return null;case 23:case 24:return b.lanes=0,mi(a,b,c)}return hi(a,b,c)}else ug=!1;b.lanes=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);a=b.pendingProps;e=Ef(b,M$1.current);tg(b,c);e=Ch(null,b,d,a,e,c);b.flags|=1;if("object"===
	typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(Ff(d)){var f=!0;Jf(b);}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;xg(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Gg(b,d,g,a);e.updater=Kg;b.stateNode=e;e._reactInternals=b;Og(b,d,a,c);b=qi(null,b,d,!0,f,c);}else b.tag=0,fi(null,b,e,c),b=b.child;return b;case 16:e=b.elementType;a:{null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);
	a=b.pendingProps;f=e._init;e=f(e._payload);b.type=e;f=b.tag=hk(e);a=lg(e,a);switch(f){case 0:b=li(null,b,e,a,c);break a;case 1:b=pi(null,b,e,a,c);break a;case 11:b=gi(null,b,e,a,c);break a;case 14:b=ii(null,b,e,lg(e.type,a),d,c);break a}throw Error(y$2(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),li(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),pi(a,b,d,e,c);case 3:ri(b);d=b.updateQueue;if(null===a||null===d)throw Error(y$2(282));
	d=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;yg(a,b);Cg(b,d,null,c);d=b.memoizedState.element;if(d===e)sh(),b=hi(a,b,c);else {e=b.stateNode;if(f=e.hydrate)kh=rf(b.stateNode.containerInfo.firstChild),jh=b,f=lh=!0;if(f){a=e.mutableSourceEagerHydrationData;if(null!=a)for(e=0;e<a.length;e+=2)f=a[e],f._workInProgressVersionPrimary=a[e+1],th.push(f);c=Zg(b,null,d,c);for(b.child=c;c;)c.flags=c.flags&-3|1024,c=c.sibling;}else fi(a,b,d,c),sh();b=b.child;}return b;case 5:return gh(b),null===a&&
	ph(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,nf(d,e)?g=null:null!==f&&nf(d,f)&&(b.flags|=16),oi(a,b),fi(a,b,g,c),b.child;case 6:return null===a&&ph(b),null;case 13:return ti(a,b,c);case 4:return eh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Yg(b,null,d,c):fi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),gi(a,b,d,e,c);case 7:return fi(a,b,b.pendingProps,c),b.child;case 8:return fi(a,b,b.pendingProps.children,
	c),b.child;case 12:return fi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I$1(mg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=He(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!N$1.current){b=hi(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==k){g=h.child;for(var l=
	k.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=zg(-1,c&-c),l.tag=2,Ag(h,l));h.lanes|=c;l=h.alternate;null!==l&&(l.lanes|=c);sg(h.return,c);k.lanes|=c;break}l=l.next;}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return;}h=g;}fi(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,tg(b,c),e=vg(e,
	f.unstable_observedBits),d=d(e),b.flags|=1,fi(a,b,d,c),b.child;case 14:return e=b.type,f=lg(e,b.pendingProps),f=lg(e.type,f),ii(a,b,e,f,d,c);case 15:return ki(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),b.tag=1,Ff(d)?(a=!0,Jf(b)):a=!1,tg(b,c),Mg(b,d,e),Og(b,d,e,c),qi(null,b,d,!0,a,c);case 19:return Ai(a,b,c);case 23:return mi(a,b,c);case 24:return mi(a,b,c)}throw Error(y$2(156,b.tag));
	};function ik(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.flags=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childLanes=this.lanes=0;this.alternate=null;}function nh(a,b,c,d){return new ik(a,b,c,d)}function ji(a){a=a.prototype;return !(!a||!a.isReactComponent)}
	function hk(a){if("function"===typeof a)return ji(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Aa)return 11;if(a===Da)return 14}return 2}
	function Tg(a,b){var c=a.alternate;null===c?(c=nh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};
	c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
	function Vg(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)ji(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ua:return Xg(c.children,e,f,b);case Ha:g=8;e|=16;break;case wa:g=8;e|=1;break;case xa:return a=nh(12,c,b,e|8),a.elementType=xa,a.type=xa,a.lanes=f,a;case Ba:return a=nh(13,c,b,e),a.type=Ba,a.elementType=Ba,a.lanes=f,a;case Ca:return a=nh(19,c,b,e),a.elementType=Ca,a.lanes=f,a;case Ia:return vi(c,e,f,b);case Ja:return a=nh(24,c,b,e),a.elementType=Ja,a.lanes=f,a;default:if("object"===
	typeof a&&null!==a)switch(a.$$typeof){case ya:g=10;break a;case za:g=9;break a;case Aa:g=11;break a;case Da:g=14;break a;case Ea:g=16;d=null;break a;case Fa:g=22;break a}throw Error(y$2(130,null==a?a:typeof a,""));}b=nh(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Xg(a,b,c,d){a=nh(7,a,d,b);a.lanes=c;return a}function vi(a,b,c,d){a=nh(23,a,d,b);a.elementType=Ia;a.lanes=c;return a}function Ug(a,b,c){a=nh(6,a,null,b);a.lanes=c;return a}
	function Wg(a,b,c){b=nh(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
	function jk(a,b,c){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=0;this.eventTimes=Zc(0);this.expirationTimes=Zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=Zc(0);this.mutableSourceEagerHydrationData=null;}
	function kk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return {$$typeof:ta,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
	function lk(a,b,c,d){var e=b.current,f=Hg(),g=Ig(e);a:if(c){c=c._reactInternals;b:{if(Zb(c)!==c||1!==c.tag)throw Error(y$2(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(Ff(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return;}while(null!==h);throw Error(y$2(171));}if(1===c.tag){var k=c.type;if(Ff(k)){c=If(c,k,h);break a}}c=h;}else c=Cf;null===b.context?b.context=c:b.pendingContext=c;b=zg(f,g);b.payload={element:a};d=void 0===d?null:d;null!==
	d&&(b.callback=d);Ag(e,b);Jg(e,g,f);return g}function mk(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function nk(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b;}}function ok(a,b){nk(a,b);(a=a.alternate)&&nk(a,b);}function pk(){return null}
	function qk(a,b,c){var d=null!=c&&null!=c.hydrationOptions&&c.hydrationOptions.mutableSources||null;c=new jk(a,b,null!=c&&!0===c.hydrate);b=nh(3,null,null,2===b?7:1===b?3:0);c.current=b;b.stateNode=c;xg(b);a[ff]=c.current;cf(8===a.nodeType?a.parentNode:a);if(d)for(a=0;a<d.length;a++){b=d[a];var e=b._getVersion;e=e(b._source);null==c.mutableSourceEagerHydrationData?c.mutableSourceEagerHydrationData=[b,e]:c.mutableSourceEagerHydrationData.push(b,e);}this._internalRoot=c;}
	qk.prototype.render=function(a){lk(a,this._internalRoot,null,null);};qk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;lk(null,a,null,function(){b[ff]=null;});};function rk(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}
	function sk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new qk(a,0,b?{hydrate:!0}:void 0)}
	function tk(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=mk(g);h.call(a);};}lk(b,g,a,e);}else {f=c._reactRootContainer=sk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=mk(g);k.call(a);};}Xj(function(){lk(b,g,a,e);});}return mk(g)}ec=function(a){if(13===a.tag){var b=Hg();Jg(a,4,b);ok(a,4);}};fc=function(a){if(13===a.tag){var b=Hg();Jg(a,67108864,b);ok(a,67108864);}};
	gc=function(a){if(13===a.tag){var b=Hg(),c=Ig(a);Jg(a,c,b);ok(a,c);}};hc=function(a,b){return b()};
	yb=function(a,b,c){switch(b){case "input":ab(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(y$2(90));Wa(d);ab(d,e);}}}break;case "textarea":ib(a,c);break;case "select":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1);}};Gb=Wj;
	Hb=function(a,b,c,d,e){var f=X$1;X$1|=4;try{return gg(98,a.bind(null,b,c,d,e))}finally{X$1=f,0===X$1&&(wj(),ig());}};Ib=function(){0===(X$1&49)&&(Vj(),Oj());};Jb=function(a,b){var c=X$1;X$1|=2;try{return a(b)}finally{X$1=c,0===X$1&&(wj(),ig());}};function uk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rk(b))throw Error(y$2(200));return kk(a,b,null,c)}var vk={Events:[Cb,ue$1,Db,Eb,Fb,Oj,{current:!1}]},wk={findFiberByHostInstance:wc,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"};
	var xk={bundleType:wk.bundleType,version:wk.version,rendererPackageName:wk.rendererPackageName,rendererConfig:wk.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ra.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=cc(a);return null===a?null:a.stateNode},findFiberByHostInstance:wk.findFiberByHostInstance||
	pk,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var yk=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!yk.isDisabled&&yk.supportsFiber)try{Lf=yk.inject(xk),Mf=yk;}catch(a){}}reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=vk;reactDom_production_min.createPortal=uk;
	reactDom_production_min.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(y$2(188));throw Error(y$2(268,Object.keys(a)));}a=cc(b);a=null===a?null:a.stateNode;return a};reactDom_production_min.flushSync=function(a,b){var c=X$1;if(0!==(c&48))return a(b);X$1|=1;try{if(a)return gg(99,a.bind(null,b))}finally{X$1=c,ig();}};reactDom_production_min.hydrate=function(a,b,c){if(!rk(b))throw Error(y$2(200));return tk(null,a,b,!0,c)};
	reactDom_production_min.render=function(a,b,c){if(!rk(b))throw Error(y$2(200));return tk(null,a,b,!1,c)};reactDom_production_min.unmountComponentAtNode=function(a){if(!rk(a))throw Error(y$2(40));return a._reactRootContainer?(Xj(function(){tk(null,null,a,!1,function(){a._reactRootContainer=null;a[ff]=null;});}),!0):!1};reactDom_production_min.unstable_batchedUpdates=Wj;reactDom_production_min.unstable_createPortal=function(a,b){return uk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};
	reactDom_production_min.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!rk(c))throw Error(y$2(200));if(null==a||void 0===a._reactInternals)throw Error(y$2(38));return tk(a,b,c,!1,d)};reactDom_production_min.version="17.0.2";

	function checkDCE() {
	  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	  if (
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
	  ) {
	    return;
	  }
	  try {
	    // Verify that the code above has been dead code eliminated (DCE'd).
	    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
	  } catch (err) {
	    // DevTools shouldn't crash React, no matter what.
	    // We should still report in case we break this code.
	    console.error(err);
	  }
	}

	{
	  // DCE check should happen before ReactDOM bundle executes so that
	  // DevTools can report bad minification during injection.
	  checkDCE();
	  reactDom.exports = reactDom_production_min;
	}

	var ReactDOM = reactDom.exports;

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */

	var __assign$2 = function() {
	    __assign$2 = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2.apply(this, arguments);
	};

	function __awaiter(thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	}

	function __generator(thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	}

	function __read(o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	}

	function __spreadArray(to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	}

	var propTypes = {exports: {}};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret = ReactPropTypesSecret_1;

	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	var factoryWithThrowingShims = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  }  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  }  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  propTypes.exports = factoryWithThrowingShims();
	}

	var PropTypes = propTypes.exports;

	var moment$1 = {exports: {}};

	(function (module, exports) {
	(function (global, factory) {
	    module.exports = factory() ;
	}(commonjsGlobal, (function () {
	    var hookCallback;

	    function hooks() {
	        return hookCallback.apply(null, arguments);
	    }

	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback(callback) {
	        hookCallback = callback;
	    }

	    function isArray(input) {
	        return (
	            input instanceof Array ||
	            Object.prototype.toString.call(input) === '[object Array]'
	        );
	    }

	    function isObject(input) {
	        // IE8 will treat undefined and null as object if it wasn't for
	        // input != null
	        return (
	            input != null &&
	            Object.prototype.toString.call(input) === '[object Object]'
	        );
	    }

	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }

	    function isObjectEmpty(obj) {
	        if (Object.getOwnPropertyNames) {
	            return Object.getOwnPropertyNames(obj).length === 0;
	        } else {
	            var k;
	            for (k in obj) {
	                if (hasOwnProp(obj, k)) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    }

	    function isUndefined(input) {
	        return input === void 0;
	    }

	    function isNumber(input) {
	        return (
	            typeof input === 'number' ||
	            Object.prototype.toString.call(input) === '[object Number]'
	        );
	    }

	    function isDate(input) {
	        return (
	            input instanceof Date ||
	            Object.prototype.toString.call(input) === '[object Date]'
	        );
	    }

	    function map(arr, fn) {
	        var res = [],
	            i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }

	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }

	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }

	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function createUTC(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }

	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty: false,
	            unusedTokens: [],
	            unusedInput: [],
	            overflow: -2,
	            charsLeftOver: 0,
	            nullInput: false,
	            invalidEra: null,
	            invalidMonth: null,
	            invalidFormat: false,
	            userInvalidated: false,
	            iso: false,
	            parsedDateParts: [],
	            era: null,
	            meridiem: null,
	            rfc2822: false,
	            weekdayMismatch: false,
	        };
	    }

	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }

	    var some;
	    if (Array.prototype.some) {
	        some = Array.prototype.some;
	    } else {
	        some = function (fun) {
	            var t = Object(this),
	                len = t.length >>> 0,
	                i;

	            for (i = 0; i < len; i++) {
	                if (i in t && fun.call(this, t[i], i, t)) {
	                    return true;
	                }
	            }

	            return false;
	        };
	    }

	    function isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m),
	                parsedParts = some.call(flags.parsedDateParts, function (i) {
	                    return i != null;
	                }),
	                isNowValid =
	                    !isNaN(m._d.getTime()) &&
	                    flags.overflow < 0 &&
	                    !flags.empty &&
	                    !flags.invalidEra &&
	                    !flags.invalidMonth &&
	                    !flags.invalidWeekday &&
	                    !flags.weekdayMismatch &&
	                    !flags.nullInput &&
	                    !flags.invalidFormat &&
	                    !flags.userInvalidated &&
	                    (!flags.meridiem || (flags.meridiem && parsedParts));

	            if (m._strict) {
	                isNowValid =
	                    isNowValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }

	            if (Object.isFrozen == null || !Object.isFrozen(m)) {
	                m._isValid = isNowValid;
	            } else {
	                return isNowValid;
	            }
	        }
	        return m._isValid;
	    }

	    function createInvalid(flags) {
	        var m = createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        } else {
	            getParsingFlags(m).userInvalidated = true;
	        }

	        return m;
	    }

	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = (hooks.momentProperties = []),
	        updateInProgress = false;

	    function copyConfig(to, from) {
	        var i, prop, val;

	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }

	        if (momentProperties.length > 0) {
	            for (i = 0; i < momentProperties.length; i++) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }

	        return to;
	    }

	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        if (!this.isValid()) {
	            this._d = new Date(NaN);
	        }
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }

	    function isMoment(obj) {
	        return (
	            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
	        );
	    }

	    function warn(msg) {
	        if (
	            hooks.suppressDeprecationWarnings === false &&
	            typeof console !== 'undefined' &&
	            console.warn
	        ) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }

	    function deprecate(msg, fn) {
	        var firstTime = true;

	        return extend(function () {
	            if (hooks.deprecationHandler != null) {
	                hooks.deprecationHandler(null, msg);
	            }
	            if (firstTime) {
	                var args = [],
	                    arg,
	                    i,
	                    key;
	                for (i = 0; i < arguments.length; i++) {
	                    arg = '';
	                    if (typeof arguments[i] === 'object') {
	                        arg += '\n[' + i + '] ';
	                        for (key in arguments[0]) {
	                            if (hasOwnProp(arguments[0], key)) {
	                                arg += key + ': ' + arguments[0][key] + ', ';
	                            }
	                        }
	                        arg = arg.slice(0, -2); // Remove trailing comma and space
	                    } else {
	                        arg = arguments[i];
	                    }
	                    args.push(arg);
	                }
	                warn(
	                    msg +
	                        '\nArguments: ' +
	                        Array.prototype.slice.call(args).join('') +
	                        '\n' +
	                        new Error().stack
	                );
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }

	    var deprecations = {};

	    function deprecateSimple(name, msg) {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(name, msg);
	        }
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }

	    hooks.suppressDeprecationWarnings = false;
	    hooks.deprecationHandler = null;

	    function isFunction(input) {
	        return (
	            (typeof Function !== 'undefined' && input instanceof Function) ||
	            Object.prototype.toString.call(input) === '[object Function]'
	        );
	    }

	    function set(config) {
	        var prop, i;
	        for (i in config) {
	            if (hasOwnProp(config, i)) {
	                prop = config[i];
	                if (isFunction(prop)) {
	                    this[i] = prop;
	                } else {
	                    this['_' + i] = prop;
	                }
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        this._dayOfMonthOrdinalParseLenient = new RegExp(
	            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	                '|' +
	                /\d{1,2}/.source
	        );
	    }

	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig),
	            prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        for (prop in parentConfig) {
	            if (
	                hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])
	            ) {
	                // make sure changes to properties don't modify parent config
	                res[prop] = extend({}, res[prop]);
	            }
	        }
	        return res;
	    }

	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }

	    var keys;

	    if (Object.keys) {
	        keys = Object.keys;
	    } else {
	        keys = function (obj) {
	            var i,
	                res = [];
	            for (i in obj) {
	                if (hasOwnProp(obj, i)) {
	                    res.push(i);
	                }
	            }
	            return res;
	        };
	    }

	    var defaultCalendar = {
	        sameDay: '[Today at] LT',
	        nextDay: '[Tomorrow at] LT',
	        nextWeek: 'dddd [at] LT',
	        lastDay: '[Yesterday at] LT',
	        lastWeek: '[Last] dddd [at] LT',
	        sameElse: 'L',
	    };

	    function calendar(key, mom, now) {
	        var output = this._calendar[key] || this._calendar['sameElse'];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }

	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (
	            (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
	            absNumber
	        );
	    }

	    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
	        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
	        formatFunctions = {},
	        formatTokenFunctions = {};

	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken(token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(
	                    func.apply(this, arguments),
	                    token
	                );
	            };
	        }
	    }

	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens),
	            i,
	            length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = '',
	                i;
	            for (i = 0; i < length; i++) {
	                output += isFunction(array[i])
	                    ? array[i].call(mom, format)
	                    : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }

	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] =
	            formatFunctions[format] || makeFormatFunction(format);

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, locale) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(
	                localFormattingTokens,
	                replaceLongDateFormatTokens
	            );
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }

	    var defaultLongDateFormat = {
	        LTS: 'h:mm:ss A',
	        LT: 'h:mm A',
	        L: 'MM/DD/YYYY',
	        LL: 'MMMM D, YYYY',
	        LLL: 'MMMM D, YYYY h:mm A',
	        LLLL: 'dddd, MMMM D, YYYY h:mm A',
	    };

	    function longDateFormat(key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];

	        if (format || !formatUpper) {
	            return format;
	        }

	        this._longDateFormat[key] = formatUpper
	            .match(formattingTokens)
	            .map(function (tok) {
	                if (
	                    tok === 'MMMM' ||
	                    tok === 'MM' ||
	                    tok === 'DD' ||
	                    tok === 'dddd'
	                ) {
	                    return tok.slice(1);
	                }
	                return tok;
	            })
	            .join('');

	        return this._longDateFormat[key];
	    }

	    var defaultInvalidDate = 'Invalid date';

	    function invalidDate() {
	        return this._invalidDate;
	    }

	    var defaultOrdinal = '%d',
	        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

	    function ordinal(number) {
	        return this._ordinal.replace('%d', number);
	    }

	    var defaultRelativeTime = {
	        future: 'in %s',
	        past: '%s ago',
	        s: 'a few seconds',
	        ss: '%d seconds',
	        m: 'a minute',
	        mm: '%d minutes',
	        h: 'an hour',
	        hh: '%d hours',
	        d: 'a day',
	        dd: '%d days',
	        w: 'a week',
	        ww: '%d weeks',
	        M: 'a month',
	        MM: '%d months',
	        y: 'a year',
	        yy: '%d years',
	    };

	    function relativeTime(number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return isFunction(output)
	            ? output(number, withoutSuffix, string, isFuture)
	            : output.replace(/%d/i, number);
	    }

	    function pastFuture(diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }

	    var aliases = {};

	    function addUnitAlias(unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }

	    function normalizeUnits(units) {
	        return typeof units === 'string'
	            ? aliases[units] || aliases[units.toLowerCase()]
	            : undefined;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    var priorities = {};

	    function addUnitPriority(unit, priority) {
	        priorities[unit] = priority;
	    }

	    function getPrioritizedUnits(unitsObj) {
	        var units = [],
	            u;
	        for (u in unitsObj) {
	            if (hasOwnProp(unitsObj, u)) {
	                units.push({ unit: u, priority: priorities[u] });
	            }
	        }
	        units.sort(function (a, b) {
	            return a.priority - b.priority;
	        });
	        return units;
	    }

	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }

	    function absFloor(number) {
	        if (number < 0) {
	            // -0 -> 0
	            return Math.ceil(number) || 0;
	        } else {
	            return Math.floor(number);
	        }
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }

	        return value;
	    }

	    function makeGetSet(unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                set$1(this, unit, value);
	                hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get(this, unit);
	            }
	        };
	    }

	    function get(mom, unit) {
	        return mom.isValid()
	            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
	            : NaN;
	    }

	    function set$1(mom, unit, value) {
	        if (mom.isValid() && !isNaN(value)) {
	            if (
	                unit === 'FullYear' &&
	                isLeapYear(mom.year()) &&
	                mom.month() === 1 &&
	                mom.date() === 29
	            ) {
	                value = toInt(value);
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
	                    value,
	                    mom.month(),
	                    daysInMonth(value, mom.month())
	                );
	            } else {
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	            }
	        }
	    }

	    // MOMENTS

	    function stringGet(units) {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units]();
	        }
	        return this;
	    }

	    function stringSet(units, value) {
	        if (typeof units === 'object') {
	            units = normalizeObjectUnits(units);
	            var prioritized = getPrioritizedUnits(units),
	                i;
	            for (i = 0; i < prioritized.length; i++) {
	                this[prioritized[i].unit](units[prioritized[i].unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }

	    var match1 = /\d/, //       0 - 9
	        match2 = /\d\d/, //      00 - 99
	        match3 = /\d{3}/, //     000 - 999
	        match4 = /\d{4}/, //    0000 - 9999
	        match6 = /[+-]?\d{6}/, // -999999 - 999999
	        match1to2 = /\d\d?/, //       0 - 99
	        match3to4 = /\d\d\d\d?/, //     999 - 9999
	        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
	        match1to3 = /\d{1,3}/, //       0 - 999
	        match1to4 = /\d{1,4}/, //       0 - 9999
	        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
	        matchUnsigned = /\d+/, //       0 - inf
	        matchSigned = /[+-]?\d+/, //    -inf - inf
	        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
	        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
	        // any word (or two) characters or numbers including two/three word month in arabic.
	        // includes scottish gaelic two word and hyphenated months
	        matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
	        regexes;

	    regexes = {};

	    function addRegexToken(token, regex, strictRegex) {
	        regexes[token] = isFunction(regex)
	            ? regex
	            : function (isStrict, localeData) {
	                  return isStrict && strictRegex ? strictRegex : regex;
	              };
	    }

	    function getParseRegexForToken(token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }

	        return regexes[token](config._strict, config._locale);
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(
	            s
	                .replace('\\', '')
	                .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
	                    matched,
	                    p1,
	                    p2,
	                    p3,
	                    p4
	                ) {
	                    return p1 || p2 || p3 || p4;
	                })
	        );
	    }

	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    var tokens = {};

	    function addParseToken(token, callback) {
	        var i,
	            func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (isNumber(callback)) {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }

	    function addWeekParseToken(token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }

	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }

	    var YEAR = 0,
	        MONTH = 1,
	        DATE = 2,
	        HOUR = 3,
	        MINUTE = 4,
	        SECOND = 5,
	        MILLISECOND = 6,
	        WEEK = 7,
	        WEEKDAY = 8;

	    function mod(n, x) {
	        return ((n % x) + x) % x;
	    }

	    var indexOf;

	    if (Array.prototype.indexOf) {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function (o) {
	            // I know
	            var i;
	            for (i = 0; i < this.length; ++i) {
	                if (this[i] === o) {
	                    return i;
	                }
	            }
	            return -1;
	        };
	    }

	    function daysInMonth(year, month) {
	        if (isNaN(year) || isNaN(month)) {
	            return NaN;
	        }
	        var modMonth = mod(month, 12);
	        year += (month - modMonth) / 12;
	        return modMonth === 1
	            ? isLeapYear(year)
	                ? 29
	                : 28
	            : 31 - ((modMonth % 7) % 2);
	    }

	    // FORMATTING

	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });

	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });

	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });

	    // ALIASES

	    addUnitAlias('month', 'M');

	    // PRIORITY

	    addUnitPriority('month', 8);

	    // PARSING

	    addRegexToken('M', match1to2);
	    addRegexToken('MM', match1to2, match2);
	    addRegexToken('MMM', function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });

	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });

	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });

	    // LOCALES

	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
	            '_'
	        ),
	        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
	        defaultMonthsShortRegex = matchWord,
	        defaultMonthsRegex = matchWord;

	    function localeMonths(m, format) {
	        if (!m) {
	            return isArray(this._months)
	                ? this._months
	                : this._months['standalone'];
	        }
	        return isArray(this._months)
	            ? this._months[m.month()]
	            : this._months[
	                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
	                      ? 'format'
	                      : 'standalone'
	              ][m.month()];
	    }

	    function localeMonthsShort(m, format) {
	        if (!m) {
	            return isArray(this._monthsShort)
	                ? this._monthsShort
	                : this._monthsShort['standalone'];
	        }
	        return isArray(this._monthsShort)
	            ? this._monthsShort[m.month()]
	            : this._monthsShort[
	                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
	              ][m.month()];
	    }

	    function handleStrictParse(monthName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = monthName.toLocaleLowerCase();
	        if (!this._monthsParse) {
	            // this is not used
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	            for (i = 0; i < 12; ++i) {
	                mom = createUTC([2000, i]);
	                this._shortMonthsParse[i] = this.monthsShort(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeMonthsParse(monthName, format, strict) {
	        var i, mom, regex;

	        if (this._monthsParseExact) {
	            return handleStrictParse.call(this, monthName, format, strict);
	        }

	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }

	        // TODO: add sorting
	        // Sorting makes sure if one month (or abbr) is a prefix of another
	        // see sorting in computeMonthsParse
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp(
	                    '^' + this.months(mom, '').replace('.', '') + '$',
	                    'i'
	                );
	                this._shortMonthsParse[i] = new RegExp(
	                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
	                    'i'
	                );
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex =
	                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (
	                strict &&
	                format === 'MMMM' &&
	                this._longMonthsParse[i].test(monthName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'MMM' &&
	                this._shortMonthsParse[i].test(monthName)
	            ) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function setMonth(mom, value) {
	        var dayOfMonth;

	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }

	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (!isNumber(value)) {
	                    return mom;
	                }
	            }
	        }

	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }

	    function getSetMonth(value) {
	        if (value != null) {
	            setMonth(this, value);
	            hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get(this, 'Month');
	        }
	    }

	    function getDaysInMonth() {
	        return daysInMonth(this.year(), this.month());
	    }

	    function monthsShortRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsShortRegex')) {
	                this._monthsShortRegex = defaultMonthsShortRegex;
	            }
	            return this._monthsShortStrictRegex && isStrict
	                ? this._monthsShortStrictRegex
	                : this._monthsShortRegex;
	        }
	    }

	    function monthsRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                this._monthsRegex = defaultMonthsRegex;
	            }
	            return this._monthsStrictRegex && isStrict
	                ? this._monthsStrictRegex
	                : this._monthsRegex;
	        }
	    }

	    function computeMonthsParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	        }
	        for (i = 0; i < 24; i++) {
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }

	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp(
	            '^(' + longPieces.join('|') + ')',
	            'i'
	        );
	        this._monthsShortStrictRegex = new RegExp(
	            '^(' + shortPieces.join('|') + ')',
	            'i'
	        );
	    }

	    // FORMATTING

	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
	    });

	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });

	    addFormatToken(0, ['YYYY', 4], 0, 'year');
	    addFormatToken(0, ['YYYYY', 5], 0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	    // ALIASES

	    addUnitAlias('year', 'y');

	    // PRIORITIES

	    addUnitPriority('year', 1);

	    // PARSING

	    addRegexToken('Y', matchSigned);
	    addRegexToken('YY', match1to2, match2);
	    addRegexToken('YYYY', match1to4, match4);
	    addRegexToken('YYYYY', match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);

	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] =
	            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });

	    // HELPERS

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    // HOOKS

	    hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };

	    // MOMENTS

	    var getSetYear = makeGetSet('FullYear', true);

	    function getIsLeapYear() {
	        return isLeapYear(this.year());
	    }

	    function createDate(y, m, d, h, M, s, ms) {
	        // can't just apply() to create a date:
	        // https://stackoverflow.com/q/181348
	        var date;
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            date = new Date(y + 400, m, d, h, M, s, ms);
	            if (isFinite(date.getFullYear())) {
	                date.setFullYear(y);
	            }
	        } else {
	            date = new Date(y, m, d, h, M, s, ms);
	        }

	        return date;
	    }

	    function createUTCDate(y) {
	        var date, args;
	        // the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            args = Array.prototype.slice.call(arguments);
	            // preserve leap years using a full 400 year cycle, then reset
	            args[0] = y + 400;
	            date = new Date(Date.UTC.apply(null, args));
	            if (isFinite(date.getUTCFullYear())) {
	                date.setUTCFullYear(y);
	            }
	        } else {
	            date = new Date(Date.UTC.apply(null, arguments));
	        }

	        return date;
	    }

	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	            fwd = 7 + dow - doy,
	            // first-week day local weekday -- which local weekday is fwd
	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	        return -fwdlw + fwd - 1;
	    }

	    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear,
	            resDayOfYear;

	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }

	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear,
	        };
	    }

	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek,
	            resYear;

	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }

	        return {
	            week: resWeek,
	            year: resYear,
	        };
	    }

	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }

	    // FORMATTING

	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	    // ALIASES

	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');

	    // PRIORITIES

	    addUnitPriority('week', 5);
	    addUnitPriority('isoWeek', 5);

	    // PARSING

	    addRegexToken('w', match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W', match1to2);
	    addRegexToken('WW', match1to2, match2);

	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
	        input,
	        week,
	        config,
	        token
	    ) {
	        week[token.substr(0, 1)] = toInt(input);
	    });

	    // HELPERS

	    // LOCALES

	    function localeWeek(mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }

	    var defaultLocaleWeek = {
	        dow: 0, // Sunday is the first day of the week.
	        doy: 6, // The week that contains Jan 6th is the first week of the year.
	    };

	    function localeFirstDayOfWeek() {
	        return this._week.dow;
	    }

	    function localeFirstDayOfYear() {
	        return this._week.doy;
	    }

	    // MOMENTS

	    function getSetWeek(input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    function getSetISOWeek(input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    // FORMATTING

	    addFormatToken('d', 0, 'do', 'day');

	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });

	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });

	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });

	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');

	    // ALIASES

	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');

	    // PRIORITY
	    addUnitPriority('day', 11);
	    addUnitPriority('weekday', 11);
	    addUnitPriority('isoWeekday', 11);

	    // PARSING

	    addRegexToken('d', match1to2);
	    addRegexToken('e', match1to2);
	    addRegexToken('E', match1to2);
	    addRegexToken('dd', function (isStrict, locale) {
	        return locale.weekdaysMinRegex(isStrict);
	    });
	    addRegexToken('ddd', function (isStrict, locale) {
	        return locale.weekdaysShortRegex(isStrict);
	    });
	    addRegexToken('dddd', function (isStrict, locale) {
	        return locale.weekdaysRegex(isStrict);
	    });

	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });

	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });

	    // HELPERS

	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }

	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }

	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }

	        return null;
	    }

	    function parseIsoWeekday(input, locale) {
	        if (typeof input === 'string') {
	            return locale.weekdaysParse(input) % 7 || 7;
	        }
	        return isNaN(input) ? null : input;
	    }

	    // LOCALES
	    function shiftWeekdays(ws, n) {
	        return ws.slice(n, 7).concat(ws.slice(0, n));
	    }

	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        defaultWeekdaysRegex = matchWord,
	        defaultWeekdaysShortRegex = matchWord,
	        defaultWeekdaysMinRegex = matchWord;

	    function localeWeekdays(m, format) {
	        var weekdays = isArray(this._weekdays)
	            ? this._weekdays
	            : this._weekdays[
	                  m && m !== true && this._weekdays.isFormat.test(format)
	                      ? 'format'
	                      : 'standalone'
	              ];
	        return m === true
	            ? shiftWeekdays(weekdays, this._week.dow)
	            : m
	            ? weekdays[m.day()]
	            : weekdays;
	    }

	    function localeWeekdaysShort(m) {
	        return m === true
	            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
	            : m
	            ? this._weekdaysShort[m.day()]
	            : this._weekdaysShort;
	    }

	    function localeWeekdaysMin(m) {
	        return m === true
	            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
	            : m
	            ? this._weekdaysMin[m.day()]
	            : this._weekdaysMin;
	    }

	    function handleStrictParse$1(weekdayName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = weekdayName.toLocaleLowerCase();
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._minWeekdaysParse = [];

	            for (i = 0; i < 7; ++i) {
	                mom = createUTC([2000, 1]).day(i);
	                this._minWeekdaysParse[i] = this.weekdaysMin(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._shortWeekdaysParse[i] = this.weekdaysShort(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeWeekdaysParse(weekdayName, format, strict) {
	        var i, mom, regex;

	        if (this._weekdaysParseExact) {
	            return handleStrictParse$1.call(this, weekdayName, format, strict);
	        }

	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }

	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already

	            mom = createUTC([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	                this._shortWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	                this._minWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	            }
	            if (!this._weekdaysParse[i]) {
	                regex =
	                    '^' +
	                    this.weekdays(mom, '') +
	                    '|^' +
	                    this.weekdaysShort(mom, '') +
	                    '|^' +
	                    this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (
	                strict &&
	                format === 'dddd' &&
	                this._fullWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'ddd' &&
	                this._shortWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'dd' &&
	                this._minWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function getSetDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }

	    function getSetLocaleDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }

	    function getSetISODayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }

	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.

	        if (input != null) {
	            var weekday = parseIsoWeekday(input, this.localeData());
	            return this.day(this.day() % 7 ? weekday : weekday - 7);
	        } else {
	            return this.day() || 7;
	        }
	    }

	    function weekdaysRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysStrictRegex;
	            } else {
	                return this._weekdaysRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                this._weekdaysRegex = defaultWeekdaysRegex;
	            }
	            return this._weekdaysStrictRegex && isStrict
	                ? this._weekdaysStrictRegex
	                : this._weekdaysRegex;
	        }
	    }

	    function weekdaysShortRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysShortStrictRegex;
	            } else {
	                return this._weekdaysShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	            }
	            return this._weekdaysShortStrictRegex && isStrict
	                ? this._weekdaysShortStrictRegex
	                : this._weekdaysShortRegex;
	        }
	    }

	    function weekdaysMinRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysMinStrictRegex;
	            } else {
	                return this._weekdaysMinRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	            }
	            return this._weekdaysMinStrictRegex && isStrict
	                ? this._weekdaysMinStrictRegex
	                : this._weekdaysMinRegex;
	        }
	    }

	    function computeWeekdaysParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var minPieces = [],
	            shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom,
	            minp,
	            shortp,
	            longp;
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, 1]).day(i);
	            minp = regexEscape(this.weekdaysMin(mom, ''));
	            shortp = regexEscape(this.weekdaysShort(mom, ''));
	            longp = regexEscape(this.weekdays(mom, ''));
	            minPieces.push(minp);
	            shortPieces.push(shortp);
	            longPieces.push(longp);
	            mixedPieces.push(minp);
	            mixedPieces.push(shortp);
	            mixedPieces.push(longp);
	        }
	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	        // will match the longer piece.
	        minPieces.sort(cmpLenRev);
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);

	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._weekdaysShortRegex = this._weekdaysRegex;
	        this._weekdaysMinRegex = this._weekdaysRegex;

	        this._weekdaysStrictRegex = new RegExp(
	            '^(' + longPieces.join('|') + ')',
	            'i'
	        );
	        this._weekdaysShortStrictRegex = new RegExp(
	            '^(' + shortPieces.join('|') + ')',
	            'i'
	        );
	        this._weekdaysMinStrictRegex = new RegExp(
	            '^(' + minPieces.join('|') + ')',
	            'i'
	        );
	    }

	    // FORMATTING

	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }

	    function kFormat() {
	        return this.hours() || 24;
	    }

	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	    addFormatToken('k', ['kk', 2], 0, kFormat);

	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('hmmss', 0, 0, function () {
	        return (
	            '' +
	            hFormat.apply(this) +
	            zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2)
	        );
	    });

	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('Hmmss', 0, 0, function () {
	        return (
	            '' +
	            this.hours() +
	            zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2)
	        );
	    });

	    function meridiem(token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(
	                this.hours(),
	                this.minutes(),
	                lowercase
	            );
	        });
	    }

	    meridiem('a', true);
	    meridiem('A', false);

	    // ALIASES

	    addUnitAlias('hour', 'h');

	    // PRIORITY
	    addUnitPriority('hour', 13);

	    // PARSING

	    function matchMeridiem(isStrict, locale) {
	        return locale._meridiemParse;
	    }

	    addRegexToken('a', matchMeridiem);
	    addRegexToken('A', matchMeridiem);
	    addRegexToken('H', match1to2);
	    addRegexToken('h', match1to2);
	    addRegexToken('k', match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);
	    addRegexToken('kk', match1to2, match2);

	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);

	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['k', 'kk'], function (input, array, config) {
	        var kInput = toInt(input);
	        array[HOUR] = kInput === 24 ? 0 : kInput;
	    });
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4,
	            pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4,
	            pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });

	    // LOCALES

	    function localeIsPM(input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return (input + '').toLowerCase().charAt(0) === 'p';
	    }

	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
	        // Setting the hour should keep the time, because the user explicitly
	        // specified which hour they want. So trying to maintain the same hour (in
	        // a new timezone) makes sense. Adding/subtracting hours does not follow
	        // this rule.
	        getSetHour = makeGetSet('Hours', true);

	    function localeMeridiem(hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }

	    var baseConfig = {
	        calendar: defaultCalendar,
	        longDateFormat: defaultLongDateFormat,
	        invalidDate: defaultInvalidDate,
	        ordinal: defaultOrdinal,
	        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	        relativeTime: defaultRelativeTime,

	        months: defaultLocaleMonths,
	        monthsShort: defaultLocaleMonthsShort,

	        week: defaultLocaleWeek,

	        weekdays: defaultLocaleWeekdays,
	        weekdaysMin: defaultLocaleWeekdaysMin,
	        weekdaysShort: defaultLocaleWeekdaysShort,

	        meridiemParse: defaultLocaleMeridiemParse,
	    };

	    // internal storage for locale config files
	    var locales = {},
	        localeFamilies = {},
	        globalLocale;

	    function commonPrefix(arr1, arr2) {
	        var i,
	            minl = Math.min(arr1.length, arr2.length);
	        for (i = 0; i < minl; i += 1) {
	            if (arr1[i] !== arr2[i]) {
	                return i;
	            }
	        }
	        return minl;
	    }

	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0,
	            j,
	            next,
	            locale,
	            split;

	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (
	                    next &&
	                    next.length >= j &&
	                    commonPrefix(split, next) >= j - 1
	                ) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return globalLocale;
	    }

	    function loadLocale(name) {
	        var oldLocale = null,
	            aliasedRequire;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (
	            locales[name] === undefined &&
	            'object' !== 'undefined' &&
	            module &&
	            module.exports
	        ) {
	            try {
	                oldLocale = globalLocale._abbr;
	                aliasedRequire = commonjsRequire;
	                aliasedRequire('./locale/' + name);
	                getSetGlobalLocale(oldLocale);
	            } catch (e) {
	                // mark as not found to avoid repeating expensive file require call causing high CPU
	                // when trying to find en-US, en_US, en-us for every format call
	                locales[name] = null; // null means not found
	            }
	        }
	        return locales[name];
	    }

	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function getSetGlobalLocale(key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = getLocale(key);
	            } else {
	                data = defineLocale(key, values);
	            }

	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            } else {
	                if (typeof console !== 'undefined' && console.warn) {
	                    //warn user if arguments are passed but the locale could not be set
	                    console.warn(
	                        'Locale ' + key + ' not found. Did you forget to load it?'
	                    );
	                }
	            }
	        }

	        return globalLocale._abbr;
	    }

	    function defineLocale(name, config) {
	        if (config !== null) {
	            var locale,
	                parentConfig = baseConfig;
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple(
	                    'defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                        'an existing locale. moment.defineLocale(localeName, ' +
	                        'config) should only be used for creating a new locale ' +
	                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
	                );
	                parentConfig = locales[name]._config;
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    parentConfig = locales[config.parentLocale]._config;
	                } else {
	                    locale = loadLocale(config.parentLocale);
	                    if (locale != null) {
	                        parentConfig = locale._config;
	                    } else {
	                        if (!localeFamilies[config.parentLocale]) {
	                            localeFamilies[config.parentLocale] = [];
	                        }
	                        localeFamilies[config.parentLocale].push({
	                            name: name,
	                            config: config,
	                        });
	                        return null;
	                    }
	                }
	            }
	            locales[name] = new Locale(mergeConfigs(parentConfig, config));

	            if (localeFamilies[name]) {
	                localeFamilies[name].forEach(function (x) {
	                    defineLocale(x.name, x.config);
	                });
	            }

	            // backwards compat for now: also set the locale
	            // make sure we set the locale AFTER all child locales have been
	            // created, so we won't end up with the child locale set.
	            getSetGlobalLocale(name);

	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }

	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale,
	                tmpLocale,
	                parentConfig = baseConfig;

	            if (locales[name] != null && locales[name].parentLocale != null) {
	                // Update existing child locale in-place to avoid memory-leaks
	                locales[name].set(mergeConfigs(locales[name]._config, config));
	            } else {
	                // MERGE
	                tmpLocale = loadLocale(name);
	                if (tmpLocale != null) {
	                    parentConfig = tmpLocale._config;
	                }
	                config = mergeConfigs(parentConfig, config);
	                if (tmpLocale == null) {
	                    // updateLocale is called for creating a new locale
	                    // Set abbr so it will have a name (getters return
	                    // undefined otherwise).
	                    config.abbr = name;
	                }
	                locale = new Locale(config);
	                locale.parentLocale = locales[name];
	                locales[name] = locale;
	            }

	            // backwards compat for now: also set the locale
	            getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                    if (name === getSetGlobalLocale()) {
	                        getSetGlobalLocale(name);
	                    }
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }

	    // returns locale data
	    function getLocale(key) {
	        var locale;

	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }

	        if (!key) {
	            return globalLocale;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }

	        return chooseLocale(key);
	    }

	    function listLocales() {
	        return keys(locales);
	    }

	    function checkOverflow(m) {
	        var overflow,
	            a = m._a;

	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH] < 0 || a[MONTH] > 11
	                    ? MONTH
	                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
	                    ? DATE
	                    : a[HOUR] < 0 ||
	                      a[HOUR] > 24 ||
	                      (a[HOUR] === 24 &&
	                          (a[MINUTE] !== 0 ||
	                              a[SECOND] !== 0 ||
	                              a[MILLISECOND] !== 0))
	                    ? HOUR
	                    : a[MINUTE] < 0 || a[MINUTE] > 59
	                    ? MINUTE
	                    : a[SECOND] < 0 || a[SECOND] > 59
	                    ? SECOND
	                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
	                    ? MILLISECOND
	                    : -1;

	            if (
	                getParsingFlags(m)._overflowDayOfYear &&
	                (overflow < YEAR || overflow > DATE)
	            ) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }

	            getParsingFlags(m).overflow = overflow;
	        }

	        return m;
	    }

	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	        basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
	        isoDates = [
	            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	            ['YYYY-DDD', /\d{4}-\d{3}/],
	            ['YYYY-MM', /\d{4}-\d\d/, false],
	            ['YYYYYYMMDD', /[+-]\d{10}/],
	            ['YYYYMMDD', /\d{8}/],
	            ['GGGG[W]WWE', /\d{4}W\d{3}/],
	            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	            ['YYYYDDD', /\d{7}/],
	            ['YYYYMM', /\d{6}/, false],
	            ['YYYY', /\d{4}/, false],
	        ],
	        // iso time formats and regexes
	        isoTimes = [
	            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	            ['HH:mm', /\d\d:\d\d/],
	            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	            ['HHmmss', /\d\d\d\d\d\d/],
	            ['HHmm', /\d\d\d\d/],
	            ['HH', /\d\d/],
	        ],
	        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
	        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
	        obsOffsets = {
	            UT: 0,
	            GMT: 0,
	            EDT: -4 * 60,
	            EST: -5 * 60,
	            CDT: -5 * 60,
	            CST: -6 * 60,
	            MDT: -6 * 60,
	            MST: -7 * 60,
	            PDT: -7 * 60,
	            PST: -8 * 60,
	        };

	    // date from iso format
	    function configFromISO(config) {
	        var i,
	            l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime,
	            dateFormat,
	            timeFormat,
	            tzFormat;

	        if (match) {
	            getParsingFlags(config).iso = true;

	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimes.length; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }

	    function extractFromRFC2822Strings(
	        yearStr,
	        monthStr,
	        dayStr,
	        hourStr,
	        minuteStr,
	        secondStr
	    ) {
	        var result = [
	            untruncateYear(yearStr),
	            defaultLocaleMonthsShort.indexOf(monthStr),
	            parseInt(dayStr, 10),
	            parseInt(hourStr, 10),
	            parseInt(minuteStr, 10),
	        ];

	        if (secondStr) {
	            result.push(parseInt(secondStr, 10));
	        }

	        return result;
	    }

	    function untruncateYear(yearStr) {
	        var year = parseInt(yearStr, 10);
	        if (year <= 49) {
	            return 2000 + year;
	        } else if (year <= 999) {
	            return 1900 + year;
	        }
	        return year;
	    }

	    function preprocessRFC2822(s) {
	        // Remove comments and folding whitespace and replace multiple-spaces with a single space
	        return s
	            .replace(/\([^)]*\)|[\n\t]/g, ' ')
	            .replace(/(\s\s+)/g, ' ')
	            .replace(/^\s\s*/, '')
	            .replace(/\s\s*$/, '');
	    }

	    function checkWeekday(weekdayStr, parsedInput, config) {
	        if (weekdayStr) {
	            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
	            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	                weekdayActual = new Date(
	                    parsedInput[0],
	                    parsedInput[1],
	                    parsedInput[2]
	                ).getDay();
	            if (weekdayProvided !== weekdayActual) {
	                getParsingFlags(config).weekdayMismatch = true;
	                config._isValid = false;
	                return false;
	            }
	        }
	        return true;
	    }

	    function calculateOffset(obsOffset, militaryOffset, numOffset) {
	        if (obsOffset) {
	            return obsOffsets[obsOffset];
	        } else if (militaryOffset) {
	            // the only allowed military tz is Z
	            return 0;
	        } else {
	            var hm = parseInt(numOffset, 10),
	                m = hm % 100,
	                h = (hm - m) / 100;
	            return h * 60 + m;
	        }
	    }

	    // date and time from ref 2822 format
	    function configFromRFC2822(config) {
	        var match = rfc2822.exec(preprocessRFC2822(config._i)),
	            parsedArray;
	        if (match) {
	            parsedArray = extractFromRFC2822Strings(
	                match[4],
	                match[3],
	                match[2],
	                match[5],
	                match[6],
	                match[7]
	            );
	            if (!checkWeekday(match[1], parsedArray, config)) {
	                return;
	            }

	            config._a = parsedArray;
	            config._tzm = calculateOffset(match[8], match[9], match[10]);

	            config._d = createUTCDate.apply(null, config._a);
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

	            getParsingFlags(config).rfc2822 = true;
	        } else {
	            config._isValid = false;
	        }
	    }

	    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);
	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }

	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }

	        configFromRFC2822(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }

	        if (config._strict) {
	            config._isValid = false;
	        } else {
	            // Final attempt, use Input Fallback
	            hooks.createFromInputFallback(config);
	        }
	    }

	    hooks.createFromInputFallback = deprecate(
	        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );

	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }

	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(hooks.now());
	        if (config._useUTC) {
	            return [
	                nowValue.getUTCFullYear(),
	                nowValue.getUTCMonth(),
	                nowValue.getUTCDate(),
	            ];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray(config) {
	        var i,
	            date,
	            input = [],
	            currentDate,
	            expectedWeekday,
	            yearToUse;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear != null) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	            if (
	                config._dayOfYear > daysInYear(yearToUse) ||
	                config._dayOfYear === 0
	            ) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }

	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] =
	                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
	        }

	        // Check for 24:00:00.000
	        if (
	            config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0
	        ) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }

	        config._d = (config._useUTC ? createUTCDate : createDate).apply(
	            null,
	            input
	        );
	        expectedWeekday = config._useUTC
	            ? config._d.getUTCDay()
	            : config._d.getDay();

	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }

	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }

	        // check for mismatching day of week
	        if (
	            config._w &&
	            typeof config._w.d !== 'undefined' &&
	            config._w.d !== expectedWeekday
	        ) {
	            getParsingFlags(config).weekdayMismatch = true;
	        }
	    }

	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;

	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(
	                w.GG,
	                config._a[YEAR],
	                weekOfYear(createLocal(), 1, 4).year
	            );
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;

	            curWeek = weekOfYear(createLocal(), dow, doy);

	            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

	            // Default to current week.
	            week = defaults(w.w, curWeek.week);

	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from beginning of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to beginning of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }

	    // constant that refers to the ISO standard
	    hooks.ISO_8601 = function () {};

	    // constant that refers to the RFC 2822 form
	    hooks.RFC_2822 = function () {};

	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }
	        if (config._f === hooks.RFC_2822) {
	            configFromRFC2822(config);
	            return;
	        }
	        config._a = [];
	        getParsingFlags(config).empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i,
	            parsedInput,
	            tokens,
	            token,
	            skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0,
	            era;

	        tokens =
	            expandFormat(config._f, config._locale).match(formattingTokens) || [];

	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
	                [])[0];
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(
	                    string.indexOf(parsedInput) + parsedInput.length
	                );
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                } else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            } else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver =
	            stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }

	        // clear _12h flag if hour is <= 12
	        if (
	            config._a[HOUR] <= 12 &&
	            getParsingFlags(config).bigHour === true &&
	            config._a[HOUR] > 0
	        ) {
	            getParsingFlags(config).bigHour = undefined;
	        }

	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
	        getParsingFlags(config).meridiem = config._meridiem;
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(
	            config._locale,
	            config._a[HOUR],
	            config._meridiem
	        );

	        // handle era
	        era = getParsingFlags(config).era;
	        if (era !== null) {
	            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
	        }

	        configFromArray(config);
	        checkOverflow(config);
	    }

	    function meridiemFixWrap(locale, hour, meridiem) {
	        var isPm;

	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }

	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,
	            scoreToBeat,
	            i,
	            currentScore,
	            validFormatFound,
	            bestFormatIsValid = false;

	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            validFormatFound = false;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);

	            if (isValid(tempConfig)) {
	                validFormatFound = true;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;

	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	            getParsingFlags(tempConfig).score = currentScore;

	            if (!bestFormatIsValid) {
	                if (
	                    scoreToBeat == null ||
	                    currentScore < scoreToBeat ||
	                    validFormatFound
	                ) {
	                    scoreToBeat = currentScore;
	                    bestMoment = tempConfig;
	                    if (validFormatFound) {
	                        bestFormatIsValid = true;
	                    }
	                }
	            } else {
	                if (currentScore < scoreToBeat) {
	                    scoreToBeat = currentScore;
	                    bestMoment = tempConfig;
	                }
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }

	        var i = normalizeObjectUnits(config._i),
	            dayOrDate = i.day === undefined ? i.date : i.day;
	        config._a = map(
	            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
	            function (obj) {
	                return obj && parseInt(obj, 10);
	            }
	        );

	        configFromArray(config);
	    }

	    function createFromConfig(config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }

	        return res;
	    }

	    function prepareConfig(config) {
	        var input = config._i,
	            format = config._f;

	        config._locale = config._locale || getLocale(config._l);

	        if (input === null || (format === undefined && input === '')) {
	            return createInvalid({ nullInput: true });
	        }

	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }

	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isDate(input)) {
	            config._d = input;
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        } else {
	            configFromInput(config);
	        }

	        if (!isValid(config)) {
	            config._d = null;
	        }

	        return config;
	    }

	    function configFromInput(config) {
	        var input = config._i;
	        if (isUndefined(input)) {
	            config._d = new Date(hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(input.valueOf());
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (isObject(input)) {
	            configFromObject(config);
	        } else if (isNumber(input)) {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            hooks.createFromInputFallback(config);
	        }
	    }

	    function createLocalOrUTC(input, format, locale, strict, isUTC) {
	        var c = {};

	        if (format === true || format === false) {
	            strict = format;
	            format = undefined;
	        }

	        if (locale === true || locale === false) {
	            strict = locale;
	            locale = undefined;
	        }

	        if (
	            (isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)
	        ) {
	            input = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;

	        return createFromConfig(c);
	    }

	    function createLocal(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }

	    var prototypeMin = deprecate(
	            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	            function () {
	                var other = createLocal.apply(null, arguments);
	                if (this.isValid() && other.isValid()) {
	                    return other < this ? this : other;
	                } else {
	                    return createInvalid();
	                }
	            }
	        ),
	        prototypeMax = deprecate(
	            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	            function () {
	                var other = createLocal.apply(null, arguments);
	                if (this.isValid() && other.isValid()) {
	                    return other > this ? this : other;
	                } else {
	                    return createInvalid();
	                }
	            }
	        );

	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }

	    // TODO: Use [].sort instead?
	    function min() {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isBefore', args);
	    }

	    function max() {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isAfter', args);
	    }

	    var now = function () {
	        return Date.now ? Date.now() : +new Date();
	    };

	    var ordering = [
	        'year',
	        'quarter',
	        'month',
	        'week',
	        'day',
	        'hour',
	        'minute',
	        'second',
	        'millisecond',
	    ];

	    function isDurationValid(m) {
	        var key,
	            unitHasDecimal = false,
	            i;
	        for (key in m) {
	            if (
	                hasOwnProp(m, key) &&
	                !(
	                    indexOf.call(ordering, key) !== -1 &&
	                    (m[key] == null || !isNaN(m[key]))
	                )
	            ) {
	                return false;
	            }
	        }

	        for (i = 0; i < ordering.length; ++i) {
	            if (m[ordering[i]]) {
	                if (unitHasDecimal) {
	                    return false; // only allow non-integers for smallest unit
	                }
	                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                    unitHasDecimal = true;
	                }
	            }
	        }

	        return true;
	    }

	    function isValid$1() {
	        return this._isValid;
	    }

	    function createInvalid$1() {
	        return createDuration(NaN);
	    }

	    function Duration(duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        this._isValid = isDurationValid(normalizedInput);

	        // representation for dateAddRemove
	        this._milliseconds =
	            +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days + weeks * 7;
	        // It is impossible to translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months + quarters * 3 + years * 12;

	        this._data = {};

	        this._locale = getLocale();

	        this._bubble();
	    }

	    function isDuration(obj) {
	        return obj instanceof Duration;
	    }

	    function absRound(number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }

	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if (
	                (dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
	            ) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    // FORMATTING

	    function offset(token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset(),
	                sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return (
	                sign +
	                zeroFill(~~(offset / 60), 2) +
	                separator +
	                zeroFill(~~offset % 60, 2)
	            );
	        });
	    }

	    offset('Z', ':');
	    offset('ZZ', '');

	    // PARSING

	    addRegexToken('Z', matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });

	    // HELPERS

	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;

	    function offsetFromString(matcher, string) {
	        var matches = (string || '').match(matcher),
	            chunk,
	            parts,
	            minutes;

	        if (matches === null) {
	            return null;
	        }

	        chunk = matches[matches.length - 1] || [];
	        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
	    }

	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff =
	                (isMoment(input) || isDate(input)
	                    ? input.valueOf()
	                    : createLocal(input).valueOf()) - res.valueOf();
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(res._d.valueOf() + diff);
	            hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return createLocal(input).local();
	        }
	    }

	    function getDateOffset(m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset());
	    }

	    // HOOKS

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    hooks.updateOffset = function () {};

	    // MOMENTS

	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset(input, keepLocalTime, keepMinutes) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	                if (input === null) {
	                    return this;
	                }
	            } else if (Math.abs(input) < 16 && !keepMinutes) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    addSubtract(
	                        this,
	                        createDuration(input - offset, 'm'),
	                        1,
	                        false
	                    );
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }

	    function getSetZone(input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }

	            this.utcOffset(input, keepLocalTime);

	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }

	    function setOffsetToUTC(keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }

	    function setOffsetToLocal(keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;

	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }

	    function setOffsetToParsedOffset() {
	        if (this._tzm != null) {
	            this.utcOffset(this._tzm, false, true);
	        } else if (typeof this._i === 'string') {
	            var tZone = offsetFromString(matchOffset, this._i);
	            if (tZone != null) {
	                this.utcOffset(tZone);
	            } else {
	                this.utcOffset(0, true);
	            }
	        }
	        return this;
	    }

	    function hasAlignedHourOffset(input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? createLocal(input).utcOffset() : 0;

	        return (this.utcOffset() - input) % 60 === 0;
	    }

	    function isDaylightSavingTime() {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }

	    function isDaylightSavingTimeShifted() {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }

	        var c = {},
	            other;

	        copyConfig(c, this);
	        c = prepareConfig(c);

	        if (c._a) {
	            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	            this._isDSTShifted =
	                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }

	        return this._isDSTShifted;
	    }

	    function isLocal() {
	        return this.isValid() ? !this._isUTC : false;
	    }

	    function isUtcOffset() {
	        return this.isValid() ? this._isUTC : false;
	    }

	    function isUtc() {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }

	    // ASP.NET json date format regex
	    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
	        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	        // and further modified to allow for strings containing both week and day
	        isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

	    function createDuration(input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;

	        if (isDuration(input)) {
	            duration = {
	                ms: input._milliseconds,
	                d: input._days,
	                M: input._months,
	            };
	        } else if (isNumber(input) || !isNaN(+input)) {
	            duration = {};
	            if (key) {
	                duration[key] = +input;
	            } else {
	                duration.milliseconds = +input;
	            }
	        } else if ((match = aspNetRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: 0,
	                d: toInt(match[DATE]) * sign,
	                h: toInt(match[HOUR]) * sign,
	                m: toInt(match[MINUTE]) * sign,
	                s: toInt(match[SECOND]) * sign,
	                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
	            };
	        } else if ((match = isoRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: parseIso(match[2], sign),
	                M: parseIso(match[3], sign),
	                w: parseIso(match[4], sign),
	                d: parseIso(match[5], sign),
	                h: parseIso(match[6], sign),
	                m: parseIso(match[7], sign),
	                s: parseIso(match[8], sign),
	            };
	        } else if (duration == null) {
	            // checks for null or undefined
	            duration = {};
	        } else if (
	            typeof duration === 'object' &&
	            ('from' in duration || 'to' in duration)
	        ) {
	            diffRes = momentsDifference(
	                createLocal(duration.from),
	                createLocal(duration.to)
	            );

	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }

	        ret = new Duration(duration);

	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }

	        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
	            ret._isValid = input._isValid;
	        }

	        return ret;
	    }

	    createDuration.fn = Duration.prototype;
	    createDuration.invalid = createInvalid$1;

	    function parseIso(inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }

	    function positiveMomentsDifference(base, other) {
	        var res = {};

	        res.months =
	            other.month() - base.month() + (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }

	        res.milliseconds = +other - +base.clone().add(res.months, 'M');

	        return res;
	    }

	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return { milliseconds: 0, months: 0 };
	        }

	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }

	        return res;
	    }

	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(
	                    name,
	                    'moment().' +
	                        name +
	                        '(period, number) is deprecated. Please use moment().' +
	                        name +
	                        '(number, period). ' +
	                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
	                );
	                tmp = val;
	                val = period;
	                period = tmp;
	            }

	            dur = createDuration(val, period);
	            addSubtract(this, dur, direction);
	            return this;
	        };
	    }

	    function addSubtract(mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);

	        if (!mom.isValid()) {
	            // No op
	            return;
	        }

	        updateOffset = updateOffset == null ? true : updateOffset;

	        if (months) {
	            setMonth(mom, get(mom, 'Month') + months * isAdding);
	        }
	        if (days) {
	            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	        }
	        if (milliseconds) {
	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	        }
	        if (updateOffset) {
	            hooks.updateOffset(mom, days || months);
	        }
	    }

	    var add = createAdder(1, 'add'),
	        subtract = createAdder(-1, 'subtract');

	    function isString(input) {
	        return typeof input === 'string' || input instanceof String;
	    }

	    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
	    function isMomentInput(input) {
	        return (
	            isMoment(input) ||
	            isDate(input) ||
	            isString(input) ||
	            isNumber(input) ||
	            isNumberOrStringArray(input) ||
	            isMomentInputObject(input) ||
	            input === null ||
	            input === undefined
	        );
	    }

	    function isMomentInputObject(input) {
	        var objectTest = isObject(input) && !isObjectEmpty(input),
	            propertyTest = false,
	            properties = [
	                'years',
	                'year',
	                'y',
	                'months',
	                'month',
	                'M',
	                'days',
	                'day',
	                'd',
	                'dates',
	                'date',
	                'D',
	                'hours',
	                'hour',
	                'h',
	                'minutes',
	                'minute',
	                'm',
	                'seconds',
	                'second',
	                's',
	                'milliseconds',
	                'millisecond',
	                'ms',
	            ],
	            i,
	            property;

	        for (i = 0; i < properties.length; i += 1) {
	            property = properties[i];
	            propertyTest = propertyTest || hasOwnProp(input, property);
	        }

	        return objectTest && propertyTest;
	    }

	    function isNumberOrStringArray(input) {
	        var arrayTest = isArray(input),
	            dataTypeTest = false;
	        if (arrayTest) {
	            dataTypeTest =
	                input.filter(function (item) {
	                    return !isNumber(item) && isString(input);
	                }).length === 0;
	        }
	        return arrayTest && dataTypeTest;
	    }

	    function isCalendarSpec(input) {
	        var objectTest = isObject(input) && !isObjectEmpty(input),
	            propertyTest = false,
	            properties = [
	                'sameDay',
	                'nextDay',
	                'lastDay',
	                'nextWeek',
	                'lastWeek',
	                'sameElse',
	            ],
	            i,
	            property;

	        for (i = 0; i < properties.length; i += 1) {
	            property = properties[i];
	            propertyTest = propertyTest || hasOwnProp(input, property);
	        }

	        return objectTest && propertyTest;
	    }

	    function getCalendarFormat(myMoment, now) {
	        var diff = myMoment.diff(now, 'days', true);
	        return diff < -6
	            ? 'sameElse'
	            : diff < -1
	            ? 'lastWeek'
	            : diff < 0
	            ? 'lastDay'
	            : diff < 1
	            ? 'sameDay'
	            : diff < 2
	            ? 'nextDay'
	            : diff < 7
	            ? 'nextWeek'
	            : 'sameElse';
	    }

	    function calendar$1(time, formats) {
	        // Support for single parameter, formats only overload to the calendar function
	        if (arguments.length === 1) {
	            if (!arguments[0]) {
	                time = undefined;
	                formats = undefined;
	            } else if (isMomentInput(arguments[0])) {
	                time = arguments[0];
	                formats = undefined;
	            } else if (isCalendarSpec(arguments[0])) {
	                formats = arguments[0];
	                time = undefined;
	            }
	        }
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            format = hooks.calendarFormat(this, sod) || 'sameElse',
	            output =
	                formats &&
	                (isFunction(formats[format])
	                    ? formats[format].call(this, now)
	                    : formats[format]);

	        return this.format(
	            output || this.localeData().calendar(format, this, createLocal(now))
	        );
	    }

	    function clone() {
	        return new Moment(this);
	    }

	    function isAfter(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() > localInput.valueOf();
	        } else {
	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
	        }
	    }

	    function isBefore(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() < localInput.valueOf();
	        } else {
	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
	        }
	    }

	    function isBetween(from, to, units, inclusivity) {
	        var localFrom = isMoment(from) ? from : createLocal(from),
	            localTo = isMoment(to) ? to : createLocal(to);
	        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
	            return false;
	        }
	        inclusivity = inclusivity || '()';
	        return (
	            (inclusivity[0] === '('
	                ? this.isAfter(localFrom, units)
	                : !this.isBefore(localFrom, units)) &&
	            (inclusivity[1] === ')'
	                ? this.isBefore(localTo, units)
	                : !this.isAfter(localTo, units))
	        );
	    }

	    function isSame(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() === localInput.valueOf();
	        } else {
	            inputMs = localInput.valueOf();
	            return (
	                this.clone().startOf(units).valueOf() <= inputMs &&
	                inputMs <= this.clone().endOf(units).valueOf()
	            );
	        }
	    }

	    function isSameOrAfter(input, units) {
	        return this.isSame(input, units) || this.isAfter(input, units);
	    }

	    function isSameOrBefore(input, units) {
	        return this.isSame(input, units) || this.isBefore(input, units);
	    }

	    function diff(input, units, asFloat) {
	        var that, zoneDelta, output;

	        if (!this.isValid()) {
	            return NaN;
	        }

	        that = cloneWithOffset(input, this);

	        if (!that.isValid()) {
	            return NaN;
	        }

	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	        units = normalizeUnits(units);

	        switch (units) {
	            case 'year':
	                output = monthDiff(this, that) / 12;
	                break;
	            case 'month':
	                output = monthDiff(this, that);
	                break;
	            case 'quarter':
	                output = monthDiff(this, that) / 3;
	                break;
	            case 'second':
	                output = (this - that) / 1e3;
	                break; // 1000
	            case 'minute':
	                output = (this - that) / 6e4;
	                break; // 1000 * 60
	            case 'hour':
	                output = (this - that) / 36e5;
	                break; // 1000 * 60 * 60
	            case 'day':
	                output = (this - that - zoneDelta) / 864e5;
	                break; // 1000 * 60 * 60 * 24, negate dst
	            case 'week':
	                output = (this - that - zoneDelta) / 6048e5;
	                break; // 1000 * 60 * 60 * 24 * 7, negate dst
	            default:
	                output = this - that;
	        }

	        return asFloat ? output : absFloor(output);
	    }

	    function monthDiff(a, b) {
	        if (a.date() < b.date()) {
	            // end-of-month calculations work correct when the start month has more
	            // days than the end month.
	            return -monthDiff(b, a);
	        }
	        // difference in months
	        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2,
	            adjust;

	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }

	        //check for negative zero, return zero if negative zero
	        return -(wholeMonthDiff + adjust) || 0;
	    }

	    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	    function toString() {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }

	    function toISOString(keepOffset) {
	        if (!this.isValid()) {
	            return null;
	        }
	        var utc = keepOffset !== true,
	            m = utc ? this.clone().utc() : this;
	        if (m.year() < 0 || m.year() > 9999) {
	            return formatMoment(
	                m,
	                utc
	                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
	                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
	            );
	        }
	        if (isFunction(Date.prototype.toISOString)) {
	            // native implementation is ~50x faster, use it when we can
	            if (utc) {
	                return this.toDate().toISOString();
	            } else {
	                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
	                    .toISOString()
	                    .replace('Z', formatMoment(m, 'Z'));
	            }
	        }
	        return formatMoment(
	            m,
	            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
	        );
	    }

	    /**
	     * Return a human readable representation of a moment that can
	     * also be evaluated to get a new moment which is the same
	     *
	     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	     */
	    function inspect() {
	        if (!this.isValid()) {
	            return 'moment.invalid(/* ' + this._i + ' */)';
	        }
	        var func = 'moment',
	            zone = '',
	            prefix,
	            year,
	            datetime,
	            suffix;
	        if (!this.isLocal()) {
	            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	            zone = 'Z';
	        }
	        prefix = '[' + func + '("]';
	        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
	        datetime = '-MM-DD[T]HH:mm:ss.SSS';
	        suffix = zone + '[")]';

	        return this.format(prefix + year + datetime + suffix);
	    }

	    function format(inputString) {
	        if (!inputString) {
	            inputString = this.isUtc()
	                ? hooks.defaultFormatUtc
	                : hooks.defaultFormat;
	        }
	        var output = formatMoment(this, inputString);
	        return this.localeData().postformat(output);
	    }

	    function from(time, withoutSuffix) {
	        if (
	            this.isValid() &&
	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
	        ) {
	            return createDuration({ to: this, from: time })
	                .locale(this.locale())
	                .humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function fromNow(withoutSuffix) {
	        return this.from(createLocal(), withoutSuffix);
	    }

	    function to(time, withoutSuffix) {
	        if (
	            this.isValid() &&
	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
	        ) {
	            return createDuration({ from: this, to: time })
	                .locale(this.locale())
	                .humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function toNow(withoutSuffix) {
	        return this.to(createLocal(), withoutSuffix);
	    }

	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale(key) {
	        var newLocaleData;

	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }

	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );

	    function localeData() {
	        return this._locale;
	    }

	    var MS_PER_SECOND = 1000,
	        MS_PER_MINUTE = 60 * MS_PER_SECOND,
	        MS_PER_HOUR = 60 * MS_PER_MINUTE,
	        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

	    // actual modulo - handles negative numbers (for dates before 1970):
	    function mod$1(dividend, divisor) {
	        return ((dividend % divisor) + divisor) % divisor;
	    }

	    function localStartOfDate(y, m, d) {
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return new Date(y, m, d).valueOf();
	        }
	    }

	    function utcStartOfDate(y, m, d) {
	        // Date.UTC remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return Date.UTC(y, m, d);
	        }
	    }

	    function startOf(units) {
	        var time, startOfDate;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }

	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year(), 0, 1);
	                break;
	            case 'quarter':
	                time = startOfDate(
	                    this.year(),
	                    this.month() - (this.month() % 3),
	                    1
	                );
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month(), 1);
	                break;
	            case 'week':
	                time = startOfDate(
	                    this.year(),
	                    this.month(),
	                    this.date() - this.weekday()
	                );
	                break;
	            case 'isoWeek':
	                time = startOfDate(
	                    this.year(),
	                    this.month(),
	                    this.date() - (this.isoWeekday() - 1)
	                );
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date());
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time -= mod$1(
	                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
	                    MS_PER_HOUR
	                );
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_MINUTE);
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_SECOND);
	                break;
	        }

	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }

	    function endOf(units) {
	        var time, startOfDate;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }

	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year() + 1, 0, 1) - 1;
	                break;
	            case 'quarter':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month() - (this.month() % 3) + 3,
	                        1
	                    ) - 1;
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
	                break;
	            case 'week':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month(),
	                        this.date() - this.weekday() + 7
	                    ) - 1;
	                break;
	            case 'isoWeek':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month(),
	                        this.date() - (this.isoWeekday() - 1) + 7
	                    ) - 1;
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time +=
	                    MS_PER_HOUR -
	                    mod$1(
	                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
	                        MS_PER_HOUR
	                    ) -
	                    1;
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
	                break;
	        }

	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }

	    function valueOf() {
	        return this._d.valueOf() - (this._offset || 0) * 60000;
	    }

	    function unix() {
	        return Math.floor(this.valueOf() / 1000);
	    }

	    function toDate() {
	        return new Date(this.valueOf());
	    }

	    function toArray() {
	        var m = this;
	        return [
	            m.year(),
	            m.month(),
	            m.date(),
	            m.hour(),
	            m.minute(),
	            m.second(),
	            m.millisecond(),
	        ];
	    }

	    function toObject() {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds(),
	        };
	    }

	    function toJSON() {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }

	    function isValid$2() {
	        return isValid(this);
	    }

	    function parsingFlags() {
	        return extend({}, getParsingFlags(this));
	    }

	    function invalidAt() {
	        return getParsingFlags(this).overflow;
	    }

	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict,
	        };
	    }

	    addFormatToken('N', 0, 0, 'eraAbbr');
	    addFormatToken('NN', 0, 0, 'eraAbbr');
	    addFormatToken('NNN', 0, 0, 'eraAbbr');
	    addFormatToken('NNNN', 0, 0, 'eraName');
	    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

	    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
	    addFormatToken('y', ['yy', 2], 0, 'eraYear');
	    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
	    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

	    addRegexToken('N', matchEraAbbr);
	    addRegexToken('NN', matchEraAbbr);
	    addRegexToken('NNN', matchEraAbbr);
	    addRegexToken('NNNN', matchEraName);
	    addRegexToken('NNNNN', matchEraNarrow);

	    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
	        input,
	        array,
	        config,
	        token
	    ) {
	        var era = config._locale.erasParse(input, token, config._strict);
	        if (era) {
	            getParsingFlags(config).era = era;
	        } else {
	            getParsingFlags(config).invalidEra = input;
	        }
	    });

	    addRegexToken('y', matchUnsigned);
	    addRegexToken('yy', matchUnsigned);
	    addRegexToken('yyy', matchUnsigned);
	    addRegexToken('yyyy', matchUnsigned);
	    addRegexToken('yo', matchEraYearOrdinal);

	    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
	    addParseToken(['yo'], function (input, array, config, token) {
	        var match;
	        if (config._locale._eraYearOrdinalRegex) {
	            match = input.match(config._locale._eraYearOrdinalRegex);
	        }

	        if (config._locale.eraYearOrdinalParse) {
	            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
	        } else {
	            array[YEAR] = parseInt(input, 10);
	        }
	    });

	    function localeEras(m, format) {
	        var i,
	            l,
	            date,
	            eras = this._eras || getLocale('en')._eras;
	        for (i = 0, l = eras.length; i < l; ++i) {
	            switch (typeof eras[i].since) {
	                case 'string':
	                    // truncate time
	                    date = hooks(eras[i].since).startOf('day');
	                    eras[i].since = date.valueOf();
	                    break;
	            }

	            switch (typeof eras[i].until) {
	                case 'undefined':
	                    eras[i].until = +Infinity;
	                    break;
	                case 'string':
	                    // truncate time
	                    date = hooks(eras[i].until).startOf('day').valueOf();
	                    eras[i].until = date.valueOf();
	                    break;
	            }
	        }
	        return eras;
	    }

	    function localeErasParse(eraName, format, strict) {
	        var i,
	            l,
	            eras = this.eras(),
	            name,
	            abbr,
	            narrow;
	        eraName = eraName.toUpperCase();

	        for (i = 0, l = eras.length; i < l; ++i) {
	            name = eras[i].name.toUpperCase();
	            abbr = eras[i].abbr.toUpperCase();
	            narrow = eras[i].narrow.toUpperCase();

	            if (strict) {
	                switch (format) {
	                    case 'N':
	                    case 'NN':
	                    case 'NNN':
	                        if (abbr === eraName) {
	                            return eras[i];
	                        }
	                        break;

	                    case 'NNNN':
	                        if (name === eraName) {
	                            return eras[i];
	                        }
	                        break;

	                    case 'NNNNN':
	                        if (narrow === eraName) {
	                            return eras[i];
	                        }
	                        break;
	                }
	            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
	                return eras[i];
	            }
	        }
	    }

	    function localeErasConvertYear(era, year) {
	        var dir = era.since <= era.until ? +1 : -1;
	        if (year === undefined) {
	            return hooks(era.since).year();
	        } else {
	            return hooks(era.since).year() + (year - era.offset) * dir;
	        }
	    }

	    function getEraName() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();

	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].name;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].name;
	            }
	        }

	        return '';
	    }

	    function getEraNarrow() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();

	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].narrow;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].narrow;
	            }
	        }

	        return '';
	    }

	    function getEraAbbr() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();

	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].abbr;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].abbr;
	            }
	        }

	        return '';
	    }

	    function getEraYear() {
	        var i,
	            l,
	            dir,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            dir = eras[i].since <= eras[i].until ? +1 : -1;

	            // truncate time
	            val = this.clone().startOf('day').valueOf();

	            if (
	                (eras[i].since <= val && val <= eras[i].until) ||
	                (eras[i].until <= val && val <= eras[i].since)
	            ) {
	                return (
	                    (this.year() - hooks(eras[i].since).year()) * dir +
	                    eras[i].offset
	                );
	            }
	        }

	        return this.year();
	    }

	    function erasNameRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasNameRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasNameRegex : this._erasRegex;
	    }

	    function erasAbbrRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasAbbrRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasAbbrRegex : this._erasRegex;
	    }

	    function erasNarrowRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasNarrowRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasNarrowRegex : this._erasRegex;
	    }

	    function matchEraAbbr(isStrict, locale) {
	        return locale.erasAbbrRegex(isStrict);
	    }

	    function matchEraName(isStrict, locale) {
	        return locale.erasNameRegex(isStrict);
	    }

	    function matchEraNarrow(isStrict, locale) {
	        return locale.erasNarrowRegex(isStrict);
	    }

	    function matchEraYearOrdinal(isStrict, locale) {
	        return locale._eraYearOrdinalRegex || matchUnsigned;
	    }

	    function computeErasParse() {
	        var abbrPieces = [],
	            namePieces = [],
	            narrowPieces = [],
	            mixedPieces = [],
	            i,
	            l,
	            eras = this.eras();

	        for (i = 0, l = eras.length; i < l; ++i) {
	            namePieces.push(regexEscape(eras[i].name));
	            abbrPieces.push(regexEscape(eras[i].abbr));
	            narrowPieces.push(regexEscape(eras[i].narrow));

	            mixedPieces.push(regexEscape(eras[i].name));
	            mixedPieces.push(regexEscape(eras[i].abbr));
	            mixedPieces.push(regexEscape(eras[i].narrow));
	        }

	        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
	        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
	        this._erasNarrowRegex = new RegExp(
	            '^(' + narrowPieces.join('|') + ')',
	            'i'
	        );
	    }

	    // FORMATTING

	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });

	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });

	    function addWeekYearFormatToken(token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }

	    addWeekYearFormatToken('gggg', 'weekYear');
	    addWeekYearFormatToken('ggggg', 'weekYear');
	    addWeekYearFormatToken('GGGG', 'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	    // ALIASES

	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');

	    // PRIORITY

	    addUnitPriority('weekYear', 1);
	    addUnitPriority('isoWeekYear', 1);

	    // PARSING

	    addRegexToken('G', matchSigned);
	    addRegexToken('g', matchSigned);
	    addRegexToken('GG', match1to2, match2);
	    addRegexToken('gg', match1to2, match2);
	    addRegexToken('GGGG', match1to4, match4);
	    addRegexToken('gggg', match1to4, match4);
	    addRegexToken('GGGGG', match1to6, match6);
	    addRegexToken('ggggg', match1to6, match6);

	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
	        input,
	        week,
	        config,
	        token
	    ) {
	        week[token.substr(0, 2)] = toInt(input);
	    });

	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = hooks.parseTwoDigitYear(input);
	    });

	    // MOMENTS

	    function getSetWeekYear(input) {
	        return getSetWeekYearHelper.call(
	            this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy
	        );
	    }

	    function getSetISOWeekYear(input) {
	        return getSetWeekYearHelper.call(
	            this,
	            input,
	            this.isoWeek(),
	            this.isoWeekday(),
	            1,
	            4
	        );
	    }

	    function getISOWeeksInYear() {
	        return weeksInYear(this.year(), 1, 4);
	    }

	    function getISOWeeksInISOWeekYear() {
	        return weeksInYear(this.isoWeekYear(), 1, 4);
	    }

	    function getWeeksInYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }

	    function getWeeksInWeekYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
	    }

	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }

	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }

	    // FORMATTING

	    addFormatToken('Q', 0, 'Qo', 'quarter');

	    // ALIASES

	    addUnitAlias('quarter', 'Q');

	    // PRIORITY

	    addUnitPriority('quarter', 7);

	    // PARSING

	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });

	    // MOMENTS

	    function getSetQuarter(input) {
	        return input == null
	            ? Math.ceil((this.month() + 1) / 3)
	            : this.month((input - 1) * 3 + (this.month() % 3));
	    }

	    // FORMATTING

	    addFormatToken('D', ['DD', 2], 'Do', 'date');

	    // ALIASES

	    addUnitAlias('date', 'D');

	    // PRIORITY
	    addUnitPriority('date', 9);

	    // PARSING

	    addRegexToken('D', match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        return isStrict
	            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
	            : locale._dayOfMonthOrdinalParseLenient;
	    });

	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0]);
	    });

	    // MOMENTS

	    var getSetDayOfMonth = makeGetSet('Date', true);

	    // FORMATTING

	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	    // ALIASES

	    addUnitAlias('dayOfYear', 'DDD');

	    // PRIORITY
	    addUnitPriority('dayOfYear', 4);

	    // PARSING

	    addRegexToken('DDD', match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });

	    // HELPERS

	    // MOMENTS

	    function getSetDayOfYear(input) {
	        var dayOfYear =
	            Math.round(
	                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
	            ) + 1;
	        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
	    }

	    // FORMATTING

	    addFormatToken('m', ['mm', 2], 0, 'minute');

	    // ALIASES

	    addUnitAlias('minute', 'm');

	    // PRIORITY

	    addUnitPriority('minute', 14);

	    // PARSING

	    addRegexToken('m', match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);

	    // MOMENTS

	    var getSetMinute = makeGetSet('Minutes', false);

	    // FORMATTING

	    addFormatToken('s', ['ss', 2], 0, 'second');

	    // ALIASES

	    addUnitAlias('second', 's');

	    // PRIORITY

	    addUnitPriority('second', 15);

	    // PARSING

	    addRegexToken('s', match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);

	    // MOMENTS

	    var getSetSecond = makeGetSet('Seconds', false);

	    // FORMATTING

	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });

	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });

	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });

	    // ALIASES

	    addUnitAlias('millisecond', 'ms');

	    // PRIORITY

	    addUnitPriority('millisecond', 16);

	    // PARSING

	    addRegexToken('S', match1to3, match1);
	    addRegexToken('SS', match1to3, match2);
	    addRegexToken('SSS', match1to3, match3);

	    var token, getSetMillisecond;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }

	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }

	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }

	    getSetMillisecond = makeGetSet('Milliseconds', false);

	    // FORMATTING

	    addFormatToken('z', 0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');

	    // MOMENTS

	    function getZoneAbbr() {
	        return this._isUTC ? 'UTC' : '';
	    }

	    function getZoneName() {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }

	    var proto = Moment.prototype;

	    proto.add = add;
	    proto.calendar = calendar$1;
	    proto.clone = clone;
	    proto.diff = diff;
	    proto.endOf = endOf;
	    proto.format = format;
	    proto.from = from;
	    proto.fromNow = fromNow;
	    proto.to = to;
	    proto.toNow = toNow;
	    proto.get = stringGet;
	    proto.invalidAt = invalidAt;
	    proto.isAfter = isAfter;
	    proto.isBefore = isBefore;
	    proto.isBetween = isBetween;
	    proto.isSame = isSame;
	    proto.isSameOrAfter = isSameOrAfter;
	    proto.isSameOrBefore = isSameOrBefore;
	    proto.isValid = isValid$2;
	    proto.lang = lang;
	    proto.locale = locale;
	    proto.localeData = localeData;
	    proto.max = prototypeMax;
	    proto.min = prototypeMin;
	    proto.parsingFlags = parsingFlags;
	    proto.set = stringSet;
	    proto.startOf = startOf;
	    proto.subtract = subtract;
	    proto.toArray = toArray;
	    proto.toObject = toObject;
	    proto.toDate = toDate;
	    proto.toISOString = toISOString;
	    proto.inspect = inspect;
	    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
	        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
	            return 'Moment<' + this.format() + '>';
	        };
	    }
	    proto.toJSON = toJSON;
	    proto.toString = toString;
	    proto.unix = unix;
	    proto.valueOf = valueOf;
	    proto.creationData = creationData;
	    proto.eraName = getEraName;
	    proto.eraNarrow = getEraNarrow;
	    proto.eraAbbr = getEraAbbr;
	    proto.eraYear = getEraYear;
	    proto.year = getSetYear;
	    proto.isLeapYear = getIsLeapYear;
	    proto.weekYear = getSetWeekYear;
	    proto.isoWeekYear = getSetISOWeekYear;
	    proto.quarter = proto.quarters = getSetQuarter;
	    proto.month = getSetMonth;
	    proto.daysInMonth = getDaysInMonth;
	    proto.week = proto.weeks = getSetWeek;
	    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
	    proto.weeksInYear = getWeeksInYear;
	    proto.weeksInWeekYear = getWeeksInWeekYear;
	    proto.isoWeeksInYear = getISOWeeksInYear;
	    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
	    proto.date = getSetDayOfMonth;
	    proto.day = proto.days = getSetDayOfWeek;
	    proto.weekday = getSetLocaleDayOfWeek;
	    proto.isoWeekday = getSetISODayOfWeek;
	    proto.dayOfYear = getSetDayOfYear;
	    proto.hour = proto.hours = getSetHour;
	    proto.minute = proto.minutes = getSetMinute;
	    proto.second = proto.seconds = getSetSecond;
	    proto.millisecond = proto.milliseconds = getSetMillisecond;
	    proto.utcOffset = getSetOffset;
	    proto.utc = setOffsetToUTC;
	    proto.local = setOffsetToLocal;
	    proto.parseZone = setOffsetToParsedOffset;
	    proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    proto.isDST = isDaylightSavingTime;
	    proto.isLocal = isLocal;
	    proto.isUtcOffset = isUtcOffset;
	    proto.isUtc = isUtc;
	    proto.isUTC = isUtc;
	    proto.zoneAbbr = getZoneAbbr;
	    proto.zoneName = getZoneName;
	    proto.dates = deprecate(
	        'dates accessor is deprecated. Use date instead.',
	        getSetDayOfMonth
	    );
	    proto.months = deprecate(
	        'months accessor is deprecated. Use month instead',
	        getSetMonth
	    );
	    proto.years = deprecate(
	        'years accessor is deprecated. Use year instead',
	        getSetYear
	    );
	    proto.zone = deprecate(
	        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
	        getSetZone
	    );
	    proto.isDSTShifted = deprecate(
	        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
	        isDaylightSavingTimeShifted
	    );

	    function createUnix(input) {
	        return createLocal(input * 1000);
	    }

	    function createInZone() {
	        return createLocal.apply(null, arguments).parseZone();
	    }

	    function preParsePostFormat(string) {
	        return string;
	    }

	    var proto$1 = Locale.prototype;

	    proto$1.calendar = calendar;
	    proto$1.longDateFormat = longDateFormat;
	    proto$1.invalidDate = invalidDate;
	    proto$1.ordinal = ordinal;
	    proto$1.preparse = preParsePostFormat;
	    proto$1.postformat = preParsePostFormat;
	    proto$1.relativeTime = relativeTime;
	    proto$1.pastFuture = pastFuture;
	    proto$1.set = set;
	    proto$1.eras = localeEras;
	    proto$1.erasParse = localeErasParse;
	    proto$1.erasConvertYear = localeErasConvertYear;
	    proto$1.erasAbbrRegex = erasAbbrRegex;
	    proto$1.erasNameRegex = erasNameRegex;
	    proto$1.erasNarrowRegex = erasNarrowRegex;

	    proto$1.months = localeMonths;
	    proto$1.monthsShort = localeMonthsShort;
	    proto$1.monthsParse = localeMonthsParse;
	    proto$1.monthsRegex = monthsRegex;
	    proto$1.monthsShortRegex = monthsShortRegex;
	    proto$1.week = localeWeek;
	    proto$1.firstDayOfYear = localeFirstDayOfYear;
	    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

	    proto$1.weekdays = localeWeekdays;
	    proto$1.weekdaysMin = localeWeekdaysMin;
	    proto$1.weekdaysShort = localeWeekdaysShort;
	    proto$1.weekdaysParse = localeWeekdaysParse;

	    proto$1.weekdaysRegex = weekdaysRegex;
	    proto$1.weekdaysShortRegex = weekdaysShortRegex;
	    proto$1.weekdaysMinRegex = weekdaysMinRegex;

	    proto$1.isPM = localeIsPM;
	    proto$1.meridiem = localeMeridiem;

	    function get$1(format, index, field, setter) {
	        var locale = getLocale(),
	            utc = createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }

	    function listMonthsImpl(format, index, field) {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';

	        if (index != null) {
	            return get$1(format, index, field, 'month');
	        }

	        var i,
	            out = [];
	        for (i = 0; i < 12; i++) {
	            out[i] = get$1(format, i, field, 'month');
	        }
	        return out;
	    }

	    // ()
	    // (5)
	    // (fmt, 5)
	    // (fmt)
	    // (true)
	    // (true, 5)
	    // (true, fmt, 5)
	    // (true, fmt)
	    function listWeekdaysImpl(localeSorted, format, index, field) {
	        if (typeof localeSorted === 'boolean') {
	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        } else {
	            format = localeSorted;
	            index = format;
	            localeSorted = false;

	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        }

	        var locale = getLocale(),
	            shift = localeSorted ? locale._week.dow : 0,
	            i,
	            out = [];

	        if (index != null) {
	            return get$1(format, (index + shift) % 7, field, 'day');
	        }

	        for (i = 0; i < 7; i++) {
	            out[i] = get$1(format, (i + shift) % 7, field, 'day');
	        }
	        return out;
	    }

	    function listMonths(format, index) {
	        return listMonthsImpl(format, index, 'months');
	    }

	    function listMonthsShort(format, index) {
	        return listMonthsImpl(format, index, 'monthsShort');
	    }

	    function listWeekdays(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	    }

	    function listWeekdaysShort(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	    }

	    function listWeekdaysMin(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	    }

	    getSetGlobalLocale('en', {
	        eras: [
	            {
	                since: '0001-01-01',
	                until: +Infinity,
	                offset: 1,
	                name: 'Anno Domini',
	                narrow: 'AD',
	                abbr: 'AD',
	            },
	            {
	                since: '0000-12-31',
	                until: -Infinity,
	                offset: 1,
	                name: 'Before Christ',
	                narrow: 'BC',
	                abbr: 'BC',
	            },
	        ],
	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    toInt((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	    });

	    // Side effect imports

	    hooks.lang = deprecate(
	        'moment.lang is deprecated. Use moment.locale instead.',
	        getSetGlobalLocale
	    );
	    hooks.langData = deprecate(
	        'moment.langData is deprecated. Use moment.localeData instead.',
	        getLocale
	    );

	    var mathAbs = Math.abs;

	    function abs() {
	        var data = this._data;

	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days = mathAbs(this._days);
	        this._months = mathAbs(this._months);

	        data.milliseconds = mathAbs(data.milliseconds);
	        data.seconds = mathAbs(data.seconds);
	        data.minutes = mathAbs(data.minutes);
	        data.hours = mathAbs(data.hours);
	        data.months = mathAbs(data.months);
	        data.years = mathAbs(data.years);

	        return this;
	    }

	    function addSubtract$1(duration, input, value, direction) {
	        var other = createDuration(input, value);

	        duration._milliseconds += direction * other._milliseconds;
	        duration._days += direction * other._days;
	        duration._months += direction * other._months;

	        return duration._bubble();
	    }

	    // supports only 2.0-style add(1, 's') or add(duration)
	    function add$1(input, value) {
	        return addSubtract$1(this, input, value, 1);
	    }

	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function subtract$1(input, value) {
	        return addSubtract$1(this, input, value, -1);
	    }

	    function absCeil(number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }

	    function bubble() {
	        var milliseconds = this._milliseconds,
	            days = this._days,
	            months = this._months,
	            data = this._data,
	            seconds,
	            minutes,
	            hours,
	            years,
	            monthsFromDays;

	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (
	            !(
	                (milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0)
	            )
	        ) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }

	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;

	        seconds = absFloor(milliseconds / 1000);
	        data.seconds = seconds % 60;

	        minutes = absFloor(seconds / 60);
	        data.minutes = minutes % 60;

	        hours = absFloor(minutes / 60);
	        data.hours = hours % 24;

	        days += absFloor(hours / 24);

	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        data.days = days;
	        data.months = months;
	        data.years = years;

	        return this;
	    }

	    function daysToMonths(days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return (days * 4800) / 146097;
	    }

	    function monthsToDays(months) {
	        // the reverse of daysToMonths
	        return (months * 146097) / 4800;
	    }

	    function as(units) {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        var days,
	            months,
	            milliseconds = this._milliseconds;

	        units = normalizeUnits(units);

	        if (units === 'month' || units === 'quarter' || units === 'year') {
	            days = this._days + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            switch (units) {
	                case 'month':
	                    return months;
	                case 'quarter':
	                    return months / 3;
	                case 'year':
	                    return months / 12;
	            }
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week':
	                    return days / 7 + milliseconds / 6048e5;
	                case 'day':
	                    return days + milliseconds / 864e5;
	                case 'hour':
	                    return days * 24 + milliseconds / 36e5;
	                case 'minute':
	                    return days * 1440 + milliseconds / 6e4;
	                case 'second':
	                    return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond':
	                    return Math.floor(days * 864e5) + milliseconds;
	                default:
	                    throw new Error('Unknown unit ' + units);
	            }
	        }
	    }

	    // TODO: Use this.as('ms')?
	    function valueOf$1() {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }

	    function makeAs(alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }

	    var asMilliseconds = makeAs('ms'),
	        asSeconds = makeAs('s'),
	        asMinutes = makeAs('m'),
	        asHours = makeAs('h'),
	        asDays = makeAs('d'),
	        asWeeks = makeAs('w'),
	        asMonths = makeAs('M'),
	        asQuarters = makeAs('Q'),
	        asYears = makeAs('y');

	    function clone$1() {
	        return createDuration(this);
	    }

	    function get$2(units) {
	        units = normalizeUnits(units);
	        return this.isValid() ? this[units + 's']() : NaN;
	    }

	    function makeGetter(name) {
	        return function () {
	            return this.isValid() ? this._data[name] : NaN;
	        };
	    }

	    var milliseconds = makeGetter('milliseconds'),
	        seconds = makeGetter('seconds'),
	        minutes = makeGetter('minutes'),
	        hours = makeGetter('hours'),
	        days = makeGetter('days'),
	        months = makeGetter('months'),
	        years = makeGetter('years');

	    function weeks() {
	        return absFloor(this.days() / 7);
	    }

	    var round = Math.round,
	        thresholds = {
	            ss: 44, // a few seconds to seconds
	            s: 45, // seconds to minute
	            m: 45, // minutes to hour
	            h: 22, // hours to day
	            d: 26, // days to month/week
	            w: null, // weeks to month
	            M: 11, // months to year
	        };

	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
	        var duration = createDuration(posNegDuration).abs(),
	            seconds = round(duration.as('s')),
	            minutes = round(duration.as('m')),
	            hours = round(duration.as('h')),
	            days = round(duration.as('d')),
	            months = round(duration.as('M')),
	            weeks = round(duration.as('w')),
	            years = round(duration.as('y')),
	            a =
	                (seconds <= thresholds.ss && ['s', seconds]) ||
	                (seconds < thresholds.s && ['ss', seconds]) ||
	                (minutes <= 1 && ['m']) ||
	                (minutes < thresholds.m && ['mm', minutes]) ||
	                (hours <= 1 && ['h']) ||
	                (hours < thresholds.h && ['hh', hours]) ||
	                (days <= 1 && ['d']) ||
	                (days < thresholds.d && ['dd', days]);

	        if (thresholds.w != null) {
	            a =
	                a ||
	                (weeks <= 1 && ['w']) ||
	                (weeks < thresholds.w && ['ww', weeks]);
	        }
	        a = a ||
	            (months <= 1 && ['M']) ||
	            (months < thresholds.M && ['MM', months]) ||
	            (years <= 1 && ['y']) || ['yy', years];

	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }

	    // This function allows you to set the rounding function for relative time strings
	    function getSetRelativeTimeRounding(roundingFunction) {
	        if (roundingFunction === undefined) {
	            return round;
	        }
	        if (typeof roundingFunction === 'function') {
	            round = roundingFunction;
	            return true;
	        }
	        return false;
	    }

	    // This function allows you to set a threshold for relative time strings
	    function getSetRelativeTimeThreshold(threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        if (threshold === 's') {
	            thresholds.ss = limit - 1;
	        }
	        return true;
	    }

	    function humanize(argWithSuffix, argThresholds) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }

	        var withSuffix = false,
	            th = thresholds,
	            locale,
	            output;

	        if (typeof argWithSuffix === 'object') {
	            argThresholds = argWithSuffix;
	            argWithSuffix = false;
	        }
	        if (typeof argWithSuffix === 'boolean') {
	            withSuffix = argWithSuffix;
	        }
	        if (typeof argThresholds === 'object') {
	            th = Object.assign({}, thresholds, argThresholds);
	            if (argThresholds.s != null && argThresholds.ss == null) {
	                th.ss = argThresholds.s - 1;
	            }
	        }

	        locale = this.localeData();
	        output = relativeTime$1(this, !withSuffix, th, locale);

	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }

	        return locale.postformat(output);
	    }

	    var abs$1 = Math.abs;

	    function sign(x) {
	        return (x > 0) - (x < 0) || +x;
	    }

	    function toISOString$1() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }

	        var seconds = abs$1(this._milliseconds) / 1000,
	            days = abs$1(this._days),
	            months = abs$1(this._months),
	            minutes,
	            hours,
	            years,
	            s,
	            total = this.asSeconds(),
	            totalSign,
	            ymSign,
	            daysSign,
	            hmsSign;

	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }

	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes = absFloor(seconds / 60);
	        hours = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

	        totalSign = total < 0 ? '-' : '';
	        ymSign = sign(this._months) !== sign(total) ? '-' : '';
	        daysSign = sign(this._days) !== sign(total) ? '-' : '';
	        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

	        return (
	            totalSign +
	            'P' +
	            (years ? ymSign + years + 'Y' : '') +
	            (months ? ymSign + months + 'M' : '') +
	            (days ? daysSign + days + 'D' : '') +
	            (hours || minutes || seconds ? 'T' : '') +
	            (hours ? hmsSign + hours + 'H' : '') +
	            (minutes ? hmsSign + minutes + 'M' : '') +
	            (seconds ? hmsSign + s + 'S' : '')
	        );
	    }

	    var proto$2 = Duration.prototype;

	    proto$2.isValid = isValid$1;
	    proto$2.abs = abs;
	    proto$2.add = add$1;
	    proto$2.subtract = subtract$1;
	    proto$2.as = as;
	    proto$2.asMilliseconds = asMilliseconds;
	    proto$2.asSeconds = asSeconds;
	    proto$2.asMinutes = asMinutes;
	    proto$2.asHours = asHours;
	    proto$2.asDays = asDays;
	    proto$2.asWeeks = asWeeks;
	    proto$2.asMonths = asMonths;
	    proto$2.asQuarters = asQuarters;
	    proto$2.asYears = asYears;
	    proto$2.valueOf = valueOf$1;
	    proto$2._bubble = bubble;
	    proto$2.clone = clone$1;
	    proto$2.get = get$2;
	    proto$2.milliseconds = milliseconds;
	    proto$2.seconds = seconds;
	    proto$2.minutes = minutes;
	    proto$2.hours = hours;
	    proto$2.days = days;
	    proto$2.weeks = weeks;
	    proto$2.months = months;
	    proto$2.years = years;
	    proto$2.humanize = humanize;
	    proto$2.toISOString = toISOString$1;
	    proto$2.toString = toISOString$1;
	    proto$2.toJSON = toISOString$1;
	    proto$2.locale = locale;
	    proto$2.localeData = localeData;

	    proto$2.toIsoString = deprecate(
	        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
	        toISOString$1
	    );
	    proto$2.lang = lang;

	    // FORMATTING

	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');

	    // PARSING

	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });

	    //! moment.js

	    hooks.version = '2.29.1';

	    setHookCallback(createLocal);

	    hooks.fn = proto;
	    hooks.min = min;
	    hooks.max = max;
	    hooks.now = now;
	    hooks.utc = createUTC;
	    hooks.unix = createUnix;
	    hooks.months = listMonths;
	    hooks.isDate = isDate;
	    hooks.locale = getSetGlobalLocale;
	    hooks.invalid = createInvalid;
	    hooks.duration = createDuration;
	    hooks.isMoment = isMoment;
	    hooks.weekdays = listWeekdays;
	    hooks.parseZone = createInZone;
	    hooks.localeData = getLocale;
	    hooks.isDuration = isDuration;
	    hooks.monthsShort = listMonthsShort;
	    hooks.weekdaysMin = listWeekdaysMin;
	    hooks.defineLocale = defineLocale;
	    hooks.updateLocale = updateLocale;
	    hooks.locales = listLocales;
	    hooks.weekdaysShort = listWeekdaysShort;
	    hooks.normalizeUnits = normalizeUnits;
	    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	    hooks.calendarFormat = getCalendarFormat;
	    hooks.prototype = proto;

	    // currently HTML5 input type only supports 24-hour formats
	    hooks.HTML5_FMT = {
	        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
	        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
	        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
	        DATE: 'YYYY-MM-DD', // <input type="date" />
	        TIME: 'HH:mm', // <input type="time" />
	        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
	        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
	        WEEK: 'GGGG-[W]WW', // <input type="week" />
	        MONTH: 'YYYY-MM', // <input type="month" />
	    };

	    return hooks;

	})));
	}(moment$1));

	var moment = moment$1.exports;

	var axios$2 = {exports: {}};

	var bind$2 = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};

	var bind$1 = bind$2;

	// utils is a library of generic helper functions non-specific to axios

	var toString = Object.prototype.toString;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}

	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}

	/**
	 * Determine if a value is a Buffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Buffer, otherwise false
	 */
	function isBuffer(val) {
	  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
	    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}

	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}

	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}

	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}

	/**
	 * Determine if a value is a plain Object
	 *
	 * @param {Object} val The value to test
	 * @return {boolean} True if value is a plain Object, otherwise false
	 */
	function isPlainObject$2(val) {
	  if (toString.call(val) !== '[object Object]') {
	    return false;
	  }

	  var prototype = Object.getPrototypeOf(val);
	  return prototype === null || prototype === Object.prototype;
	}

	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}

	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}

	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction$1(val) {
	  return toString.call(val) === '[object Function]';
	}

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction$1(val.pipe);
	}

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
	}

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 * nativescript
	 *  navigator.product -> 'NativeScript' or 'NS'
	 */
	function isStandardBrowserEnv() {
	  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
	                                           navigator.product === 'NativeScript' ||
	                                           navigator.product === 'NS')) {
	    return false;
	  }
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined'
	  );
	}

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge$2(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (isPlainObject$2(result[key]) && isPlainObject$2(val)) {
	      result[key] = merge$2(result[key], val);
	    } else if (isPlainObject$2(val)) {
	      result[key] = merge$2({}, val);
	    } else if (isArray(val)) {
	      result[key] = val.slice();
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind$1(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}

	/**
	 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
	 *
	 * @param {string} content with BOM
	 * @return {string} content value without BOM
	 */
	function stripBOM(content) {
	  if (content.charCodeAt(0) === 0xFEFF) {
	    content = content.slice(1);
	  }
	  return content;
	}

	var utils$e = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isBuffer: isBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isPlainObject: isPlainObject$2,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction$1,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge$2,
	  extend: extend,
	  trim: trim,
	  stripBOM: stripBOM
	};

	var utils$d = utils$e;

	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	var buildURL$2 = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils$d.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];

	    utils$d.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils$d.isArray(val)) {
	        key = key + '[]';
	      } else {
	        val = [val];
	      }

	      utils$d.forEach(val, function parseValue(v) {
	        if (utils$d.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils$d.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });

	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    var hashmarkIndex = url.indexOf('#');
	    if (hashmarkIndex !== -1) {
	      url = url.slice(0, hashmarkIndex);
	    }

	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};

	var utils$c = utils$e;

	function InterceptorManager$1() {
	  this.handlers = [];
	}

	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected,
	    synchronous: options ? options.synchronous : false,
	    runWhen: options ? options.runWhen : null
	  });
	  return this.handlers.length - 1;
	};

	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager$1.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};

	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager$1.prototype.forEach = function forEach(fn) {
	  utils$c.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	var InterceptorManager_1 = InterceptorManager$1;

	var utils$b = utils$e;

	var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
	  utils$b.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};

	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	var enhanceError$2 = function enhanceError(error, config, code, request, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }

	  error.request = request;
	  error.response = response;
	  error.isAxiosError = true;

	  error.toJSON = function toJSON() {
	    return {
	      // Standard
	      message: this.message,
	      name: this.name,
	      // Microsoft
	      description: this.description,
	      number: this.number,
	      // Mozilla
	      fileName: this.fileName,
	      lineNumber: this.lineNumber,
	      columnNumber: this.columnNumber,
	      stack: this.stack,
	      // Axios
	      config: this.config,
	      code: this.code
	    };
	  };
	  return error;
	};

	var enhanceError$1 = enhanceError$2;

	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	var createError$2 = function createError(message, config, code, request, response) {
	  var error = new Error(message);
	  return enhanceError$1(error, config, code, request, response);
	};

	var createError$1 = createError$2;

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	var settle$1 = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError$1(
	      'Request failed with status code ' + response.status,
	      response.config,
	      null,
	      response.request,
	      response
	    ));
	  }
	};

	var utils$a = utils$e;

	var cookies$1 = (
	  utils$a.isStandardBrowserEnv() ?

	  // Standard browser envs support document.cookie
	    (function standardBrowserEnv() {
	      return {
	        write: function write(name, value, expires, path, domain, secure) {
	          var cookie = [];
	          cookie.push(name + '=' + encodeURIComponent(value));

	          if (utils$a.isNumber(expires)) {
	            cookie.push('expires=' + new Date(expires).toGMTString());
	          }

	          if (utils$a.isString(path)) {
	            cookie.push('path=' + path);
	          }

	          if (utils$a.isString(domain)) {
	            cookie.push('domain=' + domain);
	          }

	          if (secure === true) {
	            cookie.push('secure');
	          }

	          document.cookie = cookie.join('; ');
	        },

	        read: function read(name) {
	          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	          return (match ? decodeURIComponent(match[3]) : null);
	        },

	        remove: function remove(name) {
	          this.write(name, '', Date.now() - 86400000);
	        }
	      };
	    })() :

	  // Non standard browser env (web workers, react-native) lack needed support.
	    (function nonStandardBrowserEnv() {
	      return {
	        write: function write() {},
	        read: function read() { return null; },
	        remove: function remove() {}
	      };
	    })()
	);

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	var isAbsoluteURL$1 = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	var combineURLs$1 = function combineURLs(baseURL, relativeURL) {
	  return relativeURL
	    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
	    : baseURL;
	};

	var isAbsoluteURL = isAbsoluteURL$1;
	var combineURLs = combineURLs$1;

	/**
	 * Creates a new URL by combining the baseURL with the requestedURL,
	 * only when the requestedURL is not already an absolute URL.
	 * If the requestURL is absolute, this function returns the requestedURL untouched.
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} requestedURL Absolute or relative URL to combine
	 * @returns {string} The combined full path
	 */
	var buildFullPath$1 = function buildFullPath(baseURL, requestedURL) {
	  if (baseURL && !isAbsoluteURL(requestedURL)) {
	    return combineURLs(baseURL, requestedURL);
	  }
	  return requestedURL;
	};

	var utils$9 = utils$e;

	// Headers whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers
	var ignoreDuplicateOf = [
	  'age', 'authorization', 'content-length', 'content-type', 'etag',
	  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
	  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
	  'referer', 'retry-after', 'user-agent'
	];

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	var parseHeaders$1 = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;

	  if (!headers) { return parsed; }

	  utils$9.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils$9.trim(line.substr(0, i)).toLowerCase();
	    val = utils$9.trim(line.substr(i + 1));

	    if (key) {
	      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
	        return;
	      }
	      if (key === 'set-cookie') {
	        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
	      } else {
	        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	      }
	    }
	  });

	  return parsed;
	};

	var utils$8 = utils$e;

	var isURLSameOrigin$1 = (
	  utils$8.isStandardBrowserEnv() ?

	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	    (function standardBrowserEnv() {
	      var msie = /(msie|trident)/i.test(navigator.userAgent);
	      var urlParsingNode = document.createElement('a');
	      var originURL;

	      /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	      function resolveURL(url) {
	        var href = url;

	        if (msie) {
	        // IE needs attribute set twice to normalize properties
	          urlParsingNode.setAttribute('href', href);
	          href = urlParsingNode.href;
	        }

	        urlParsingNode.setAttribute('href', href);

	        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	        return {
	          href: urlParsingNode.href,
	          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	          host: urlParsingNode.host,
	          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	          hostname: urlParsingNode.hostname,
	          port: urlParsingNode.port,
	          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	            urlParsingNode.pathname :
	            '/' + urlParsingNode.pathname
	        };
	      }

	      originURL = resolveURL(window.location.href);

	      /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	      return function isURLSameOrigin(requestURL) {
	        var parsed = (utils$8.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	        return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	      };
	    })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	    (function nonStandardBrowserEnv() {
	      return function isURLSameOrigin() {
	        return true;
	      };
	    })()
	);

	var utils$7 = utils$e;
	var settle = settle$1;
	var cookies = cookies$1;
	var buildURL$1 = buildURL$2;
	var buildFullPath = buildFullPath$1;
	var parseHeaders = parseHeaders$1;
	var isURLSameOrigin = isURLSameOrigin$1;
	var createError = createError$2;

	var xhr = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;
	    var responseType = config.responseType;

	    if (utils$7.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }

	    var request = new XMLHttpRequest();

	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }

	    var fullPath = buildFullPath(config.baseURL, config.url);
	    request.open(config.method.toUpperCase(), buildURL$1(fullPath, config.params, config.paramsSerializer), true);

	    // Set the request timeout in MS
	    request.timeout = config.timeout;

	    function onloadend() {
	      if (!request) {
	        return;
	      }
	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
	        request.responseText : request.response;
	      var response = {
	        data: responseData,
	        status: request.status,
	        statusText: request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };

	      settle(resolve, reject, response);

	      // Clean up request
	      request = null;
	    }

	    if ('onloadend' in request) {
	      // Use onloadend if available
	      request.onloadend = onloadend;
	    } else {
	      // Listen for ready state to emulate onloadend
	      request.onreadystatechange = function handleLoad() {
	        if (!request || request.readyState !== 4) {
	          return;
	        }

	        // The request errored out and we didn't get a response, this will be
	        // handled by onerror instead
	        // With one exception: request that using file: protocol, most browsers
	        // will return status as 0 even though it's a successful request
	        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	          return;
	        }
	        // readystate handler is calling before onerror or ontimeout handlers,
	        // so we should call onloadend on the next 'tick'
	        setTimeout(onloadend);
	      };
	    }

	    // Handle browser request cancellation (as opposed to a manual cancellation)
	    request.onabort = function handleAbort() {
	      if (!request) {
	        return;
	      }

	      reject(createError('Request aborted', config, 'ECONNABORTED', request));

	      // Clean up request
	      request = null;
	    };

	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config, null, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
	      if (config.timeoutErrorMessage) {
	        timeoutErrorMessage = config.timeoutErrorMessage;
	      }
	      reject(createError(
	        timeoutErrorMessage,
	        config,
	        config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
	        request));

	      // Clean up request
	      request = null;
	    };

	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils$7.isStandardBrowserEnv()) {
	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
	        cookies.read(config.xsrfCookieName) :
	        undefined;

	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }

	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils$7.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }

	    // Add withCredentials to request if needed
	    if (!utils$7.isUndefined(config.withCredentials)) {
	      request.withCredentials = !!config.withCredentials;
	    }

	    // Add responseType to request if needed
	    if (responseType && responseType !== 'json') {
	      request.responseType = config.responseType;
	    }

	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }

	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }

	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }

	        request.abort();
	        reject(cancel);
	        // Clean up request
	        request = null;
	      });
	    }

	    if (!requestData) {
	      requestData = null;
	    }

	    // Send the request
	    request.send(requestData);
	  });
	};

	var utils$6 = utils$e;
	var normalizeHeaderName = normalizeHeaderName$1;
	var enhanceError = enhanceError$2;

	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};

	function setContentTypeIfUnset(headers, value) {
	  if (!utils$6.isUndefined(headers) && utils$6.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}

	function getDefaultAdapter() {
	  var adapter;
	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = xhr;
	  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
	    // For node use HTTP adapter
	    adapter = xhr;
	  }
	  return adapter;
	}

	function stringifySafely(rawValue, parser, encoder) {
	  if (utils$6.isString(rawValue)) {
	    try {
	      (parser || JSON.parse)(rawValue);
	      return utils$6.trim(rawValue);
	    } catch (e) {
	      if (e.name !== 'SyntaxError') {
	        throw e;
	      }
	    }
	  }

	  return (encoder || JSON.stringify)(rawValue);
	}

	var defaults$3 = {

	  transitional: {
	    silentJSONParsing: true,
	    forcedJSONParsing: true,
	    clarifyTimeoutError: false
	  },

	  adapter: getDefaultAdapter(),

	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Accept');
	    normalizeHeaderName(headers, 'Content-Type');

	    if (utils$6.isFormData(data) ||
	      utils$6.isArrayBuffer(data) ||
	      utils$6.isBuffer(data) ||
	      utils$6.isStream(data) ||
	      utils$6.isFile(data) ||
	      utils$6.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils$6.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils$6.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils$6.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
	      setContentTypeIfUnset(headers, 'application/json');
	      return stringifySafely(data);
	    }
	    return data;
	  }],

	  transformResponse: [function transformResponse(data) {
	    var transitional = this.transitional;
	    var silentJSONParsing = transitional && transitional.silentJSONParsing;
	    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
	    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

	    if (strictJSONParsing || (forcedJSONParsing && utils$6.isString(data) && data.length)) {
	      try {
	        return JSON.parse(data);
	      } catch (e) {
	        if (strictJSONParsing) {
	          if (e.name === 'SyntaxError') {
	            throw enhanceError(e, this, 'E_JSON_PARSE');
	          }
	          throw e;
	        }
	      }
	    }

	    return data;
	  }],

	  /**
	   * A timeout in milliseconds to abort a request. If set to 0 (default) a
	   * timeout is not created.
	   */
	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',

	  maxContentLength: -1,
	  maxBodyLength: -1,

	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};

	defaults$3.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};

	utils$6.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  defaults$3.headers[method] = {};
	});

	utils$6.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults$3.headers[method] = utils$6.merge(DEFAULT_CONTENT_TYPE);
	});

	var defaults_1 = defaults$3;

	var utils$5 = utils$e;
	var defaults$2 = defaults_1;

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	var transformData$1 = function transformData(data, headers, fns) {
	  var context = this || defaults$2;
	  /*eslint no-param-reassign:0*/
	  utils$5.forEach(fns, function transform(fn) {
	    data = fn.call(context, data, headers);
	  });

	  return data;
	};

	var isCancel$1 = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};

	var utils$4 = utils$e;
	var transformData = transformData$1;
	var isCancel = isCancel$1;
	var defaults$1 = defaults_1;

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}

	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	var dispatchRequest$1 = function dispatchRequest(config) {
	  throwIfCancellationRequested(config);

	  // Ensure headers exist
	  config.headers = config.headers || {};

	  // Transform request data
	  config.data = transformData.call(
	    config,
	    config.data,
	    config.headers,
	    config.transformRequest
	  );

	  // Flatten headers
	  config.headers = utils$4.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers
	  );

	  utils$4.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );

	  var adapter = config.adapter || defaults$1.adapter;

	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);

	    // Transform response data
	    response.data = transformData.call(
	      config,
	      response.data,
	      response.headers,
	      config.transformResponse
	    );

	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);

	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData.call(
	          config,
	          reason.response.data,
	          reason.response.headers,
	          config.transformResponse
	        );
	      }
	    }

	    return Promise.reject(reason);
	  });
	};

	var utils$3 = utils$e;

	/**
	 * Config-specific merge-function which creates a new config-object
	 * by merging two configuration objects together.
	 *
	 * @param {Object} config1
	 * @param {Object} config2
	 * @returns {Object} New object resulting from merging config2 to config1
	 */
	var mergeConfig$2 = function mergeConfig(config1, config2) {
	  // eslint-disable-next-line no-param-reassign
	  config2 = config2 || {};
	  var config = {};

	  var valueFromConfig2Keys = ['url', 'method', 'data'];
	  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
	  var defaultToConfig2Keys = [
	    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
	    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
	    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
	    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
	    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
	  ];
	  var directMergeKeys = ['validateStatus'];

	  function getMergedValue(target, source) {
	    if (utils$3.isPlainObject(target) && utils$3.isPlainObject(source)) {
	      return utils$3.merge(target, source);
	    } else if (utils$3.isPlainObject(source)) {
	      return utils$3.merge({}, source);
	    } else if (utils$3.isArray(source)) {
	      return source.slice();
	    }
	    return source;
	  }

	  function mergeDeepProperties(prop) {
	    if (!utils$3.isUndefined(config2[prop])) {
	      config[prop] = getMergedValue(config1[prop], config2[prop]);
	    } else if (!utils$3.isUndefined(config1[prop])) {
	      config[prop] = getMergedValue(undefined, config1[prop]);
	    }
	  }

	  utils$3.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
	    if (!utils$3.isUndefined(config2[prop])) {
	      config[prop] = getMergedValue(undefined, config2[prop]);
	    }
	  });

	  utils$3.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

	  utils$3.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
	    if (!utils$3.isUndefined(config2[prop])) {
	      config[prop] = getMergedValue(undefined, config2[prop]);
	    } else if (!utils$3.isUndefined(config1[prop])) {
	      config[prop] = getMergedValue(undefined, config1[prop]);
	    }
	  });

	  utils$3.forEach(directMergeKeys, function merge(prop) {
	    if (prop in config2) {
	      config[prop] = getMergedValue(config1[prop], config2[prop]);
	    } else if (prop in config1) {
	      config[prop] = getMergedValue(undefined, config1[prop]);
	    }
	  });

	  var axiosKeys = valueFromConfig2Keys
	    .concat(mergeDeepPropertiesKeys)
	    .concat(defaultToConfig2Keys)
	    .concat(directMergeKeys);

	  var otherKeys = Object
	    .keys(config1)
	    .concat(Object.keys(config2))
	    .filter(function filterAxiosKeys(key) {
	      return axiosKeys.indexOf(key) === -1;
	    });

	  utils$3.forEach(otherKeys, mergeDeepProperties);

	  return config;
	};

	var _from = "axios@^0.21.1";
	var _id = "axios@0.21.4";
	var _inBundle = false;
	var _integrity = "sha512-ut5vewkiu8jjGBdqpM44XxjuCjq9LAKeHVmoVfHVzy8eHgxxq8SbAVQNovDA8mVi05kP0Ea/n/UzcSHcTJQfNg==";
	var _location = "/axios";
	var _phantomChildren = {
	};
	var _requested = {
		type: "range",
		registry: true,
		raw: "axios@^0.21.1",
		name: "axios",
		escapedName: "axios",
		rawSpec: "^0.21.1",
		saveSpec: null,
		fetchSpec: "^0.21.1"
	};
	var _requiredBy = [
		"/"
	];
	var _resolved = "https://registry.npmjs.org/axios/-/axios-0.21.4.tgz";
	var _shasum = "c67b90dc0568e5c1cf2b0b858c43ba28e2eda575";
	var _spec = "axios@^0.21.1";
	var _where = "/home/phil/js/react-localist-viewer/localist-viewer";
	var author = {
		name: "Matt Zabriskie"
	};
	var browser = {
		"./lib/adapters/http.js": "./lib/adapters/xhr.js"
	};
	var bugs = {
		url: "https://github.com/axios/axios/issues"
	};
	var bundleDependencies = false;
	var bundlesize = [
		{
			path: "./dist/axios.min.js",
			threshold: "5kB"
		}
	];
	var dependencies = {
		"follow-redirects": "^1.14.0"
	};
	var deprecated = false;
	var description = "Promise based HTTP client for the browser and node.js";
	var devDependencies = {
		coveralls: "^3.0.0",
		"es6-promise": "^4.2.4",
		grunt: "^1.3.0",
		"grunt-banner": "^0.6.0",
		"grunt-cli": "^1.2.0",
		"grunt-contrib-clean": "^1.1.0",
		"grunt-contrib-watch": "^1.0.0",
		"grunt-eslint": "^23.0.0",
		"grunt-karma": "^4.0.0",
		"grunt-mocha-test": "^0.13.3",
		"grunt-ts": "^6.0.0-beta.19",
		"grunt-webpack": "^4.0.2",
		"istanbul-instrumenter-loader": "^1.0.0",
		"jasmine-core": "^2.4.1",
		karma: "^6.3.2",
		"karma-chrome-launcher": "^3.1.0",
		"karma-firefox-launcher": "^2.1.0",
		"karma-jasmine": "^1.1.1",
		"karma-jasmine-ajax": "^0.1.13",
		"karma-safari-launcher": "^1.0.0",
		"karma-sauce-launcher": "^4.3.6",
		"karma-sinon": "^1.0.5",
		"karma-sourcemap-loader": "^0.3.8",
		"karma-webpack": "^4.0.2",
		"load-grunt-tasks": "^3.5.2",
		minimist: "^1.2.0",
		mocha: "^8.2.1",
		sinon: "^4.5.0",
		"terser-webpack-plugin": "^4.2.3",
		typescript: "^4.0.5",
		"url-search-params": "^0.10.0",
		webpack: "^4.44.2",
		"webpack-dev-server": "^3.11.0"
	};
	var homepage = "https://axios-http.com";
	var jsdelivr = "dist/axios.min.js";
	var keywords = [
		"xhr",
		"http",
		"ajax",
		"promise",
		"node"
	];
	var license = "MIT";
	var main = "index.js";
	var name = "axios";
	var repository = {
		type: "git",
		url: "git+https://github.com/axios/axios.git"
	};
	var scripts = {
		build: "NODE_ENV=production grunt build",
		coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
		examples: "node ./examples/server.js",
		fix: "eslint --fix lib/**/*.js",
		postversion: "git push && git push --tags",
		preversion: "npm test",
		start: "node ./sandbox/server.js",
		test: "grunt test",
		version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json"
	};
	var typings = "./index.d.ts";
	var unpkg = "dist/axios.min.js";
	var version = "0.21.4";
	var require$$0$1 = {
		_from: _from,
		_id: _id,
		_inBundle: _inBundle,
		_integrity: _integrity,
		_location: _location,
		_phantomChildren: _phantomChildren,
		_requested: _requested,
		_requiredBy: _requiredBy,
		_resolved: _resolved,
		_shasum: _shasum,
		_spec: _spec,
		_where: _where,
		author: author,
		browser: browser,
		bugs: bugs,
		bundleDependencies: bundleDependencies,
		bundlesize: bundlesize,
		dependencies: dependencies,
		deprecated: deprecated,
		description: description,
		devDependencies: devDependencies,
		homepage: homepage,
		jsdelivr: jsdelivr,
		keywords: keywords,
		license: license,
		main: main,
		name: name,
		repository: repository,
		scripts: scripts,
		typings: typings,
		unpkg: unpkg,
		version: version
	};

	var pkg = require$$0$1;

	var validators$1 = {};

	// eslint-disable-next-line func-names
	['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
	  validators$1[type] = function validator(thing) {
	    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
	  };
	});

	var deprecatedWarnings = {};
	var currentVerArr = pkg.version.split('.');

	/**
	 * Compare package versions
	 * @param {string} version
	 * @param {string?} thanVersion
	 * @returns {boolean}
	 */
	function isOlderVersion(version, thanVersion) {
	  var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
	  var destVer = version.split('.');
	  for (var i = 0; i < 3; i++) {
	    if (pkgVersionArr[i] > destVer[i]) {
	      return true;
	    } else if (pkgVersionArr[i] < destVer[i]) {
	      return false;
	    }
	  }
	  return false;
	}

	/**
	 * Transitional option validator
	 * @param {function|boolean?} validator
	 * @param {string?} version
	 * @param {string} message
	 * @returns {function}
	 */
	validators$1.transitional = function transitional(validator, version, message) {
	  var isDeprecated = version && isOlderVersion(version);

	  function formatMessage(opt, desc) {
	    return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
	  }

	  // eslint-disable-next-line func-names
	  return function(value, opt, opts) {
	    if (validator === false) {
	      throw new Error(formatMessage(opt, ' has been removed in ' + version));
	    }

	    if (isDeprecated && !deprecatedWarnings[opt]) {
	      deprecatedWarnings[opt] = true;
	      // eslint-disable-next-line no-console
	      console.warn(
	        formatMessage(
	          opt,
	          ' has been deprecated since v' + version + ' and will be removed in the near future'
	        )
	      );
	    }

	    return validator ? validator(value, opt, opts) : true;
	  };
	};

	/**
	 * Assert object's properties type
	 * @param {object} options
	 * @param {object} schema
	 * @param {boolean?} allowUnknown
	 */

	function assertOptions(options, schema, allowUnknown) {
	  if (typeof options !== 'object') {
	    throw new TypeError('options must be an object');
	  }
	  var keys = Object.keys(options);
	  var i = keys.length;
	  while (i-- > 0) {
	    var opt = keys[i];
	    var validator = schema[opt];
	    if (validator) {
	      var value = options[opt];
	      var result = value === undefined || validator(value, opt, options);
	      if (result !== true) {
	        throw new TypeError('option ' + opt + ' must be ' + result);
	      }
	      continue;
	    }
	    if (allowUnknown !== true) {
	      throw Error('Unknown option ' + opt);
	    }
	  }
	}

	var validator$1 = {
	  isOlderVersion: isOlderVersion,
	  assertOptions: assertOptions,
	  validators: validators$1
	};

	var utils$2 = utils$e;
	var buildURL = buildURL$2;
	var InterceptorManager = InterceptorManager_1;
	var dispatchRequest = dispatchRequest$1;
	var mergeConfig$1 = mergeConfig$2;
	var validator = validator$1;

	var validators = validator.validators;
	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios$1(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}

	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios$1.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = arguments[1] || {};
	    config.url = arguments[0];
	  } else {
	    config = config || {};
	  }

	  config = mergeConfig$1(this.defaults, config);

	  // Set config.method
	  if (config.method) {
	    config.method = config.method.toLowerCase();
	  } else if (this.defaults.method) {
	    config.method = this.defaults.method.toLowerCase();
	  } else {
	    config.method = 'get';
	  }

	  var transitional = config.transitional;

	  if (transitional !== undefined) {
	    validator.assertOptions(transitional, {
	      silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
	      forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
	      clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
	    }, false);
	  }

	  // filter out skipped interceptors
	  var requestInterceptorChain = [];
	  var synchronousRequestInterceptors = true;
	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
	      return;
	    }

	    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

	    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });

	  var responseInterceptorChain = [];
	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
	  });

	  var promise;

	  if (!synchronousRequestInterceptors) {
	    var chain = [dispatchRequest, undefined];

	    Array.prototype.unshift.apply(chain, requestInterceptorChain);
	    chain = chain.concat(responseInterceptorChain);

	    promise = Promise.resolve(config);
	    while (chain.length) {
	      promise = promise.then(chain.shift(), chain.shift());
	    }

	    return promise;
	  }


	  var newConfig = config;
	  while (requestInterceptorChain.length) {
	    var onFulfilled = requestInterceptorChain.shift();
	    var onRejected = requestInterceptorChain.shift();
	    try {
	      newConfig = onFulfilled(newConfig);
	    } catch (error) {
	      onRejected(error);
	      break;
	    }
	  }

	  try {
	    promise = dispatchRequest(newConfig);
	  } catch (error) {
	    return Promise.reject(error);
	  }

	  while (responseInterceptorChain.length) {
	    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
	  }

	  return promise;
	};

	Axios$1.prototype.getUri = function getUri(config) {
	  config = mergeConfig$1(this.defaults, config);
	  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
	};

	// Provide aliases for supported request methods
	utils$2.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios$1.prototype[method] = function(url, config) {
	    return this.request(mergeConfig$1(config || {}, {
	      method: method,
	      url: url,
	      data: (config || {}).data
	    }));
	  };
	});

	utils$2.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios$1.prototype[method] = function(url, data, config) {
	    return this.request(mergeConfig$1(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});

	var Axios_1 = Axios$1;

	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	function Cancel$1(message) {
	  this.message = message;
	}

	Cancel$1.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};

	Cancel$1.prototype.__CANCEL__ = true;

	var Cancel_1 = Cancel$1;

	var Cancel = Cancel_1;

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }

	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });

	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }

	    token.reason = new Cancel(message);
	    resolvePromise(token.reason);
	  });
	}

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};

	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};

	var CancelToken_1 = CancelToken;

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	var spread = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};

	/**
	 * Determines whether the payload is an error thrown by Axios
	 *
	 * @param {*} payload The value to test
	 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
	 */
	var isAxiosError = function isAxiosError(payload) {
	  return (typeof payload === 'object') && (payload.isAxiosError === true);
	};

	var utils$1 = utils$e;
	var bind = bind$2;
	var Axios = Axios_1;
	var mergeConfig = mergeConfig$2;
	var defaults = defaults_1;

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils$1.extend(instance, Axios.prototype, context);

	  // Copy context to instance
	  utils$1.extend(instance, context);

	  return instance;
	}

	// Create the default instance to be exported
	var axios$1 = createInstance(defaults);

	// Expose Axios class to allow class inheritance
	axios$1.Axios = Axios;

	// Factory for creating new instances
	axios$1.create = function create(instanceConfig) {
	  return createInstance(mergeConfig(axios$1.defaults, instanceConfig));
	};

	// Expose Cancel & CancelToken
	axios$1.Cancel = Cancel_1;
	axios$1.CancelToken = CancelToken_1;
	axios$1.isCancel = isCancel$1;

	// Expose all/spread
	axios$1.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios$1.spread = spread;

	// Expose isAxiosError
	axios$1.isAxiosError = isAxiosError;

	axios$2.exports = axios$1;

	// Allow use of default import syntax in TypeScript
	axios$2.exports.default = axios$1;

	var axios = axios$2.exports;

	// Rollup cant handle this
	// import { gql } from "graphql.macro";
	// const GET_EVENTS = loader(
	//   "../../graphql/queries/getDrupalEventsByDateQuery.graphql"
	// );
	var GET_EVENTS$1 = "\n  query getEventsByDateQuery(\n    $startDate: String\n    $endDate: String\n    $limit: Int\n    $offset: Int\n  ) {\n    nodeQuery(\n      filter: {\n        conjunction: AND\n        conditions: [\n          { field: \"type\", value: \"event\", operator: EQUAL }\n          {\n            operator: GREATER_THAN_OR_EQUAL\n            field: \"field_event_date\"\n            value: [$startDate]\n          }\n          {\n            operator: SMALLER_THAN_OR_EQUAL\n            field: \"field_event_date\"\n            value: [$endDate]\n          }\n        ]\n      }\n      limit: $limit\n      offset: $offset\n    ) {\n      count\n      entities {\n        ... on NodeEvent {\n          title\n          entityId\n          nid\n          entityUrl{\n            path\n          }\n          fieldEventDate {\n            value\n          }\n          fieldEventDateEnd {\n            value\n          }\n          fieldEventLocation\n          fieldEventImage {\n            url\n          }\n          fieldDestinationUrl {\n            uri\n            url {\n              path\n              routed\n            }\n          }\n          fieldLocalistId\n          fieldShortDescription {\n            value\n            processed\n          }\n          fieldTags {\n            targetId\n            entity {\n              entityLabel\n            }\n          }\n        }\n      }\n    }\n  }\n";
	var drupalApiConnector = function (props) {
	    var entries = props.entries, daysahead = props.daysahead, calendarurl = props.calendarurl, page = props.page, start = props.start, end = props.end;
	    var start_param = start;
	    var end_param = end;
	    // Archive support
	    if (daysahead === null || daysahead === void 0 ? void 0 : daysahead.startsWith("-")) {
	        start_param = moment()
	            .add(parseInt(daysahead), "days")
	            .format("YYYY-MM-DD");
	        end_param = moment().format("YYYY-MM-DD");
	    }
	    else if (start && end) {
	        start_param = start;
	        end_param = end;
	    }
	    else {
	        end_param = moment()
	            .add(parseInt(daysahead || "365"), "days")
	            .format("YYYY-MM-DD");
	    }
	    // const query = GET_EVENTS.loc?.source.body;
	    var query = GET_EVENTS$1;
	    var variables = {
	        startDate: start_param,
	        endDate: end_param,
	        limit: parseInt(entries || "1000", 10),
	        offset: page,
	    };
	    return axios.post(calendarurl, { query: query, variables: variables });
	};
	var drupalEventsTransformer = function (drupalEvents, calendarurl) {
	    var baseUrl = calendarurl.replace("/graphql", "");
	    var drupalTransformedEvents = drupalEvents === null || drupalEvents === void 0 ? void 0 : drupalEvents.map(function (event) {
	        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
	        console.log(event);
	        var drupalTransformedEvent = {
	            event: {
	                id: parseInt(event.entityId, 10),
	                title: event.title,
	                url: null,
	                updated_at: moment((_a = event.fieldEventDate) === null || _a === void 0 ? void 0 : _a.value).toDate(),
	                created_at: moment((_b = event.fieldEventDateEnd) === null || _b === void 0 ? void 0 : _b.value).toDate(),
	                facebook_id: null,
	                first_date: moment((_c = event.fieldEventDate) === null || _c === void 0 ? void 0 : _c.value).toDate(),
	                last_date: moment((_d = event.fieldEventDateEnd) === null || _d === void 0 ? void 0 : _d.value).toDate(),
	                hashtag: null,
	                urlname: "",
	                user_id: 0,
	                directions: null,
	                allows_reviews: false,
	                allows_attendance: false,
	                location: event.fieldEventLocation || "",
	                room_number: null,
	                location_name: event.fieldEventLocation || "",
	                status: "",
	                experience: "",
	                stream_url: null,
	                stream_info: null,
	                stream_embed_code: null,
	                created_by: 0,
	                updated_by: 0,
	                city_id: null,
	                neighborhood_id: null,
	                school_id: 0,
	                campus_id: null,
	                recurring: false,
	                free: false,
	                private: false,
	                verified: false,
	                rejected: false,
	                sponsored: false,
	                venue_id: 0,
	                ticket_url: null,
	                ticket_cost: null,
	                keywords: [],
	                tags: ((_e = event === null || event === void 0 ? void 0 : event.fieldTags) === null || _e === void 0 ? void 0 : _e.map(function (tag) { var _a; return ((_a = tag === null || tag === void 0 ? void 0 : tag.entity) === null || _a === void 0 ? void 0 : _a.entityLabel) || ""; })) || [],
	                description_text: ((_f = event.fieldShortDescription) === null || _f === void 0 ? void 0 : _f.value) || "",
	                photo_id: 0,
	                detail_views: 0,
	                event_instances: [
	                    {
	                        event_instance: {
	                            id: parseInt(event.entityId || "0", 10),
	                            event_id: parseInt(event.entityId || "0", 10),
	                            start: moment((_g = event.fieldEventDate) === null || _g === void 0 ? void 0 : _g.value).toDate(),
	                            end: moment((_h = event.fieldEventDateEnd) === null || _h === void 0 ? void 0 : _h.value).toDate(),
	                            ranking: 0,
	                            all_day: false,
	                            num_attending: 0,
	                        },
	                    },
	                ],
	                address: event.fieldEventLocation || "",
	                description: ((_j = event.fieldShortDescription) === null || _j === void 0 ? void 0 : _j.processed) || "",
	                featured: false,
	                geo: {
	                    latitude: null,
	                    longitude: null,
	                    street: null,
	                    city: null,
	                    state: null,
	                    country: null,
	                    zip: null,
	                },
	                filters: {
	                    departments: [],
	                    event_types: ((_k = event === null || event === void 0 ? void 0 : event.fieldTags) === null || _k === void 0 ? void 0 : _k.map(function (tag) {
	                        var _a, _b;
	                        return {
	                            name: ((_a = tag === null || tag === void 0 ? void 0 : tag.entity) === null || _a === void 0 ? void 0 : _a.entityLabel) || "",
	                            id: parseInt(((_b = tag === null || tag === void 0 ? void 0 : tag.entity) === null || _b === void 0 ? void 0 : _b.entityId) || "0", 10),
	                        };
	                    })) || [],
	                },
	                custom_fields: {},
	                localist_url: baseUrl + ((_l = event.entityUrl) === null || _l === void 0 ? void 0 : _l.path),
	                localist_ics_url: "",
	                photo_url: ((_m = event.fieldEventImage) === null || _m === void 0 ? void 0 : _m.url) || "",
	                venue_url: null,
	                group_id: null,
	                group_name: null,
	            },
	        };
	        return drupalTransformedEvent;
	    });
	    return drupalTransformedEvents;
	};

	/**
	 * Sets params and returns axios Promise.
	 * options: https://developer.localist.com/doc/api#event-list
	 */
	var localistApiConnector = function (props) {
	    var depts = props.depts, entries = props.entries, group = props.group, keyword = props.keyword, daysahead = props.daysahead, apikey = props.apikey, calendarurl = props.calendarurl, page = props.page, start = props.start, end = props.end;
	    var params = {
	        apikey: apikey,
	        distinct: false,
	        pp: entries,
	        page: page,
	        direction: (daysahead === null || daysahead === void 0 ? void 0 : daysahead.startsWith("-")) ? "desc" : "asc",
	    };
	    // Supports multiple departments with CSV string.
	    if (depts && depts !== "0") {
	        params.type = [];
	        depts.split(",").forEach(function (item) {
	            var _a;
	            (_a = params === null || params === void 0 ? void 0 : params.type) === null || _a === void 0 ? void 0 : _a.push(item.trim());
	        });
	    }
	    if (group && group !== "0") {
	        params.group_id = group;
	    }
	    // @todo add support for multiple keywords
	    if (keyword && keyword !== "") {
	        params.keyword = keyword;
	    }
	    // Archive support
	    if (daysahead === null || daysahead === void 0 ? void 0 : daysahead.startsWith("-")) {
	        params.start = moment()
	            .add(parseInt(daysahead), "days")
	            .format("YYYY-MM-DD");
	        params.end = moment().format("YYYY-MM-DD");
	    }
	    else if (start && end) {
	        params.start = start;
	        params.end = end;
	    }
	    else {
	        params.days = daysahead;
	    }
	    return axios.get(calendarurl, { params: params });
	};

	// const GET_EVENTS = loader(
	//   "../../graphql/queries/getWordpressEventsByDateQuery.graphql"
	// );
	var GET_EVENTS = "query getWordpressEventsByDateQuery($startDate: String!, $endDate: String!) {\n    events(\n      first: 500\n      where: {\n        metaQuery: {\n          relation: AND\n          metaArray: [\n            {\n              key: \"date\"\n              type: DATE\n              value: $startDate\n              compare: GREATER_THAN_OR_EQUAL_TO\n            }\n            {\n              key: \"date\"\n              type: DATE\n              value: $endDate\n              compare: LESS_THAN_OR_EQUAL_TO\n            }\n          ]\n        }\n      }\n    ) {\n      nodes {\n        id\n        date\n        title\n        uri\n        featuredImage {\n          node {\n            sourceUrl\n          }\n        }\n        event {\n          eventId\n          description\n          location\n          isAllDay\n          localistUrl\n          startTime\n          photoUrl\n          email\n          endDate\n          endTime\n          eventUrl\n          zoomLink\n          date\n        }\n        eventTaxonomies {\n          nodes {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n";
	var wordpressApiConnector = function (props) {
	    var daysahead = props.daysahead, calendarurl = props.calendarurl, start = props.start, end = props.end;
	    var start_param = moment(start, "YYYY-MM-DD HH:mm");
	    var end_param = moment(end, "YYYY-MM-DD HH:mm");
	    // Archive support
	    if (daysahead === null || daysahead === void 0 ? void 0 : daysahead.startsWith("-")) {
	        start_param = moment().add(parseInt(daysahead), "days");
	        end_param = moment();
	    }
	    else if (start && end) {
	        start_param = moment(start);
	        end_param = moment(end);
	    }
	    else {
	        end_param = moment().add(parseInt(daysahead || "365"), "days");
	    }
	    // const query = GET_EVENTS.loc?.source.body;
	    var query = GET_EVENTS;
	    var variables = {
	        startDate: start_param.format("YYYY-MM-DD"),
	        endDate: end_param.format("YYYY-MM-DD"),
	    };
	    return axios.post(calendarurl, { query: query, variables: variables });
	};
	var wordpressTransformEvents = function (events) {
	    var wordpressTransformedEvents = events === null || events === void 0 ? void 0 : events.map(function (event) {
	        var _a, _b;
	        var endDateTime = event.event.endDate
	            ? new Date(event.event.endDate + " " + event.event.endTime)
	            : new Date(event.event.date + " " + event.event.endTime);
	        var startDateTime = new Date(event.event.date + " " + event.event.startTime);
	        var wordpressTransformedEvent = {
	            event: {
	                id: parseInt(event.event.eventId, 10),
	                title: event.title,
	                url: null,
	                facebook_id: null,
	                first_date: startDateTime,
	                last_date: endDateTime,
	                updated_at: moment().toDate(),
	                created_at: moment().toDate(),
	                hashtag: null,
	                urlname: "",
	                user_id: 0,
	                directions: null,
	                allows_reviews: false,
	                allows_attendance: false,
	                location: event.event.location || "",
	                room_number: null,
	                location_name: event.event.location || "",
	                status: "",
	                experience: "",
	                stream_url: event.event.zoomLink,
	                stream_info: null,
	                stream_embed_code: null,
	                created_by: 0,
	                updated_by: 0,
	                city_id: null,
	                neighborhood_id: null,
	                school_id: 0,
	                campus_id: null,
	                recurring: false,
	                free: false,
	                private: false,
	                verified: false,
	                rejected: false,
	                sponsored: false,
	                venue_id: 0,
	                ticket_url: null,
	                ticket_cost: null,
	                keywords: [],
	                tags: ((_a = event.eventTaxonomies.nodes) === null || _a === void 0 ? void 0 : _a.map(function (node) { return node.name; })) || [],
	                description_text: event.event.description || "",
	                photo_id: 0,
	                detail_views: 0,
	                event_instances: [
	                    {
	                        event_instance: {
	                            id: parseInt(event.event.eventId || "0", 10),
	                            event_id: parseInt(event.event.eventId || "0", 10),
	                            start: startDateTime,
	                            end: endDateTime,
	                            ranking: 0,
	                            all_day: event.event.isAllDay ? true : false,
	                            num_attending: 0,
	                        },
	                    },
	                ],
	                address: event.event.location || "",
	                description: event.event.description || "",
	                featured: false,
	                geo: {
	                    latitude: null,
	                    longitude: null,
	                    street: null,
	                    city: null,
	                    state: null,
	                    country: null,
	                    zip: null,
	                },
	                filters: {
	                    departments: [],
	                    event_types: ((_b = event.eventTaxonomies.nodes) === null || _b === void 0 ? void 0 : _b.map(function (node) {
	                        return { name: node.name, id: parseInt(node.id, 10) };
	                    })) || [],
	                },
	                custom_fields: {
	                    contact_email: event.event.email,
	                },
	                localist_url: event.event.localistUrl || "",
	                localist_ics_url: "",
	                photo_url: event.event.photoUrl || "",
	                venue_url: null,
	                group_id: null,
	                group_name: null,
	            },
	        };
	        return wordpressTransformedEvent;
	    });
	    return wordpressTransformedEvents;
	};

	function fetchEvents(props, currentPage, displayedDateRange) {
	    var _a, _b, _c;
	    if (currentPage === void 0) { currentPage = 0; }
	    return __awaiter(this, void 0, void 0, function () {
	        var start, end, data, response, response, response_data, limit, events, drupalTransformedEvents, response, response_data, limit, events, wordpressTransformedEvents;
	        return __generator(this, function (_d) {
	            switch (_d.label) {
	                case 0:
	                    if (props.format === "calendar") {
	                        start = displayedDateRange.start.format("YYYY-MM-DD hh:mm");
	                        end = displayedDateRange.end.format("YYYY-MM-DD hh:mm");
	                    }
	                    data = null;
	                    if (!(props.api === "localist")) return [3 /*break*/, 2];
	                    return [4 /*yield*/, localistApiConnector(__assign$2(__assign$2({}, props), { page: currentPage, start: start, end: end }))];
	                case 1:
	                    response = _d.sent();
	                    data = response.data;
	                    _d.label = 2;
	                case 2:
	                    if (!(props.api === "drupal")) return [3 /*break*/, 4];
	                    return [4 /*yield*/, drupalApiConnector(__assign$2(__assign$2({}, props), { page: currentPage, start: start, end: end }))];
	                case 3:
	                    response = _d.sent();
	                    response_data = response.data.data;
	                    limit = parseInt(props.entries || "0", 10);
	                    events = (_a = response_data.nodeQuery) === null || _a === void 0 ? void 0 : _a.entities;
	                    drupalTransformedEvents = drupalEventsTransformer(events, props.calendarurl);
	                    data = {
	                        events: drupalTransformedEvents,
	                        page: {
	                            current: currentPage,
	                            size: limit,
	                            total: (((_b = response_data.nodeQuery) === null || _b === void 0 ? void 0 : _b.count) || 0) / limit,
	                        },
	                        date: {
	                            first: moment(start).toDate(),
	                            last: moment(end).toDate(),
	                        },
	                    };
	                    _d.label = 4;
	                case 4:
	                    if (!(props.api === "wordpress")) return [3 /*break*/, 6];
	                    return [4 /*yield*/, wordpressApiConnector(__assign$2(__assign$2({}, props), { page: currentPage, start: start, end: end }))];
	                case 5:
	                    response = _d.sent();
	                    response_data = response.data;
	                    limit = parseInt(props.entries || "0", 10);
	                    events = response_data.data.events.nodes;
	                    if (events) {
	                        wordpressTransformedEvents = wordpressTransformEvents(events);
	                        data = {
	                            events: wordpressTransformedEvents,
	                            page: {
	                                current: currentPage,
	                                size: limit,
	                                total: (((_c = response_data.data.events.nodes) === null || _c === void 0 ? void 0 : _c.length) || 0) / limit,
	                            },
	                            date: {
	                                first: moment(start).toDate(),
	                                last: moment(end).toDate(),
	                            },
	                        };
	                    }
	                    _d.label = 6;
	                case 6: return [2 /*return*/, data];
	            }
	        });
	    });
	}

	const common = {
	  black: '#000',
	  white: '#fff'
	};
	var common$1 = common;

	const red = {
	  50: '#ffebee',
	  100: '#ffcdd2',
	  200: '#ef9a9a',
	  300: '#e57373',
	  400: '#ef5350',
	  500: '#f44336',
	  600: '#e53935',
	  700: '#d32f2f',
	  800: '#c62828',
	  900: '#b71c1c',
	  A100: '#ff8a80',
	  A200: '#ff5252',
	  A400: '#ff1744',
	  A700: '#d50000'
	};
	var red$1 = red;

	const purple = {
	  50: '#f3e5f5',
	  100: '#e1bee7',
	  200: '#ce93d8',
	  300: '#ba68c8',
	  400: '#ab47bc',
	  500: '#9c27b0',
	  600: '#8e24aa',
	  700: '#7b1fa2',
	  800: '#6a1b9a',
	  900: '#4a148c',
	  A100: '#ea80fc',
	  A200: '#e040fb',
	  A400: '#d500f9',
	  A700: '#aa00ff'
	};
	var purple$1 = purple;

	const blue = {
	  50: '#e3f2fd',
	  100: '#bbdefb',
	  200: '#90caf9',
	  300: '#64b5f6',
	  400: '#42a5f5',
	  500: '#2196f3',
	  600: '#1e88e5',
	  700: '#1976d2',
	  800: '#1565c0',
	  900: '#0d47a1',
	  A100: '#82b1ff',
	  A200: '#448aff',
	  A400: '#2979ff',
	  A700: '#2962ff'
	};
	var blue$1 = blue;

	const lightBlue = {
	  50: '#e1f5fe',
	  100: '#b3e5fc',
	  200: '#81d4fa',
	  300: '#4fc3f7',
	  400: '#29b6f6',
	  500: '#03a9f4',
	  600: '#039be5',
	  700: '#0288d1',
	  800: '#0277bd',
	  900: '#01579b',
	  A100: '#80d8ff',
	  A200: '#40c4ff',
	  A400: '#00b0ff',
	  A700: '#0091ea'
	};
	var lightBlue$1 = lightBlue;

	const green = {
	  50: '#e8f5e9',
	  100: '#c8e6c9',
	  200: '#a5d6a7',
	  300: '#81c784',
	  400: '#66bb6a',
	  500: '#4caf50',
	  600: '#43a047',
	  700: '#388e3c',
	  800: '#2e7d32',
	  900: '#1b5e20',
	  A100: '#b9f6ca',
	  A200: '#69f0ae',
	  A400: '#00e676',
	  A700: '#00c853'
	};
	var green$1 = green;

	const orange = {
	  50: '#fff3e0',
	  100: '#ffe0b2',
	  200: '#ffcc80',
	  300: '#ffb74d',
	  400: '#ffa726',
	  500: '#ff9800',
	  600: '#fb8c00',
	  700: '#f57c00',
	  800: '#ef6c00',
	  900: '#e65100',
	  A100: '#ffd180',
	  A200: '#ffab40',
	  A400: '#ff9100',
	  A700: '#ff6d00'
	};
	var orange$1 = orange;

	const grey = {
	  50: '#fafafa',
	  100: '#f5f5f5',
	  200: '#eeeeee',
	  300: '#e0e0e0',
	  400: '#bdbdbd',
	  500: '#9e9e9e',
	  600: '#757575',
	  700: '#616161',
	  800: '#424242',
	  900: '#212121',
	  A100: '#f5f5f5',
	  A200: '#eeeeee',
	  A400: '#bdbdbd',
	  A700: '#616161'
	};
	var grey$1 = grey;

	function _extends$3() {
	  _extends$3 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$3.apply(this, arguments);
	}

	function _objectWithoutPropertiesLoose$2(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	var _extends$2 = {exports: {}};

	(function (module) {
	function _extends() {
	  module.exports = _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  module.exports["default"] = module.exports, module.exports.__esModule = true;
	  return _extends.apply(this, arguments);
	}

	module.exports = _extends;
	module.exports["default"] = module.exports, module.exports.__esModule = true;
	}(_extends$2));

	function memoize$1(fn) {
	  var cache = Object.create(null);
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}

	var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

	var isPropValid = /* #__PURE__ */memoize$1(function (prop) {
	  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
	  /* o */
	  && prop.charCodeAt(1) === 110
	  /* n */
	  && prop.charCodeAt(2) < 91;
	}
	/* Z+1 */
	);

	/*

	Based off glamor's StyleSheet, thanks Sunil ❤️

	high performance StyleSheet for css-in-js systems

	- uses multiple style tags behind the scenes for millions of rules
	- uses `insertRule` for appending in production for *much* faster performance

	// usage

	import { StyleSheet } from '@emotion/sheet'

	let styleSheet = new StyleSheet({ key: '', container: document.head })

	styleSheet.insert('#box { border: 1px solid red; }')
	- appends a css rule into the stylesheet

	styleSheet.flush()
	- empties the stylesheet of all its contents

	*/
	// $FlowFixMe
	function sheetForTag(tag) {
	  if (tag.sheet) {
	    // $FlowFixMe
	    return tag.sheet;
	  } // this weirdness brought to you by firefox

	  /* istanbul ignore next */


	  for (var i = 0; i < document.styleSheets.length; i++) {
	    if (document.styleSheets[i].ownerNode === tag) {
	      // $FlowFixMe
	      return document.styleSheets[i];
	    }
	  }
	}

	function createStyleElement(options) {
	  var tag = document.createElement('style');
	  tag.setAttribute('data-emotion', options.key);

	  if (options.nonce !== undefined) {
	    tag.setAttribute('nonce', options.nonce);
	  }

	  tag.appendChild(document.createTextNode(''));
	  tag.setAttribute('data-s', '');
	  return tag;
	}

	var StyleSheet = /*#__PURE__*/function () {
	  function StyleSheet(options) {
	    var _this = this;

	    this._insertTag = function (tag) {
	      var before;

	      if (_this.tags.length === 0) {
	        before = _this.prepend ? _this.container.firstChild : _this.before;
	      } else {
	        before = _this.tags[_this.tags.length - 1].nextSibling;
	      }

	      _this.container.insertBefore(tag, before);

	      _this.tags.push(tag);
	    };

	    this.isSpeedy = options.speedy === undefined ? "production" === 'production' : options.speedy;
	    this.tags = [];
	    this.ctr = 0;
	    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

	    this.key = options.key;
	    this.container = options.container;
	    this.prepend = options.prepend;
	    this.before = null;
	  }

	  var _proto = StyleSheet.prototype;

	  _proto.hydrate = function hydrate(nodes) {
	    nodes.forEach(this._insertTag);
	  };

	  _proto.insert = function insert(rule) {
	    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
	    // it's 1 in dev because we insert source maps that map a single rule to a location
	    // and you can only have one source map per style tag
	    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
	      this._insertTag(createStyleElement(this));
	    }

	    var tag = this.tags[this.tags.length - 1];

	    if (this.isSpeedy) {
	      var sheet = sheetForTag(tag);

	      try {
	        // this is the ultrafast version, works across browsers
	        // the big drawback is that the css won't be editable in devtools
	        sheet.insertRule(rule, sheet.cssRules.length);
	      } catch (e) {
	      }
	    } else {
	      tag.appendChild(document.createTextNode(rule));
	    }

	    this.ctr++;
	  };

	  _proto.flush = function flush() {
	    // $FlowFixMe
	    this.tags.forEach(function (tag) {
	      return tag.parentNode.removeChild(tag);
	    });
	    this.tags = [];
	    this.ctr = 0;
	  };

	  return StyleSheet;
	}();

	var e$1="-ms-";var r$1="-moz-";var a="-webkit-";var c$1="comm";var n$1="rule";var t$1="decl";var i="@import";var p$1="@keyframes";var k$1=Math.abs;var d$1=String.fromCharCode;function m$1(e,r){return (((r<<2^z$1(e,0))<<2^z$1(e,1))<<2^z$1(e,2))<<2^z$1(e,3)}function g$1(e){return e.trim()}function x$1(e,r){return (e=r.exec(e))?e[0]:e}function y$1(e,r,a){return e.replace(r,a)}function j(e,r){return e.indexOf(r)}function z$1(e,r){return e.charCodeAt(r)|0}function C(e,r,a){return e.slice(r,a)}function A$1(e){return e.length}function M(e){return e.length}function O(e,r){return r.push(e),e}function S(e,r){return e.map(r).join("")}var q$1=1;var B=1;var D=0;var E=0;var F=0;var G$1="";function H(e,r,a,c,n,t,s){return {value:e,root:r,parent:a,type:c,props:n,children:t,line:q$1,column:B,length:s,return:""}}function I(e,r,a){return H(e,r.root,r.parent,a,r.props,r.children,0)}function J(){return F}function K(){F=E>0?z$1(G$1,--E):0;if(B--,F===10)B=1,q$1--;return F}function L(){F=E<D?z$1(G$1,E++):0;if(B++,F===10)B=1,q$1++;return F}function N(){return z$1(G$1,E)}function P(){return E}function Q(e,r){return C(G$1,e,r)}function R(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function T(e){return q$1=B=1,D=A$1(G$1=e),E=0,[]}function U(e){return G$1="",e}function V(e){return g$1(Q(E-1,_$2(e===91?e+2:e===40?e+1:e)))}function X(e){while(F=N())if(F<33)L();else break;return R(e)>2||R(F)>3?"":" "}function Z(e,r){while(--r&&L())if(F<48||F>102||F>57&&F<65||F>70&&F<97)break;return Q(e,P()+(r<6&&N()==32&&L()==32))}function _$2(e){while(L())switch(F){case e:return E;case 34:case 39:return _$2(e===34||e===39?e:F);case 40:if(e===41)_$2(e);break;case 92:L();break}return E}function ee(e,r){while(L())if(e+F===47+10)break;else if(e+F===42+42&&N()===47)break;return "/*"+Q(r,E-1)+"*"+d$1(e===47?e:L())}function re(e){while(!R(N()))L();return Q(e,E)}function ae(e){return U(ce("",null,null,null,[""],e=T(e),0,[0],e))}function ce(e,r,a,c,n,t,s,u,i){var f=0;var o=0;var l=s;var v=0;var h=0;var p=0;var b=1;var w=1;var $=1;var k=0;var m="";var g=n;var x=t;var j=c;var z=m;while(w)switch(p=k,k=L()){case 34:case 39:case 91:case 40:z+=V(k);break;case 9:case 10:case 13:case 32:z+=X(p);break;case 92:z+=Z(P()-1,7);continue;case 47:switch(N()){case 42:case 47:O(te(ee(L(),P()),r,a),i);break;default:z+="/";}break;case 123*b:u[f++]=A$1(z)*$;case 125*b:case 59:case 0:switch(k){case 0:case 125:w=0;case 59+o:if(h>0&&A$1(z)-l)O(h>32?se(z+";",c,a,l-1):se(y$1(z," ","")+";",c,a,l-2),i);break;case 59:z+=";";default:O(j=ne(z,r,a,f,o,n,u,m,g=[],x=[],l),t);if(k===123)if(o===0)ce(z,r,j,j,g,t,l,u,x);else switch(v){case 100:case 109:case 115:ce(e,j,j,c&&O(ne(e,j,j,0,0,n,u,m,n,g=[],l),x),n,x,l,u,c?g:x);break;default:ce(z,j,j,j,[""],x,l,u,x);}}f=o=h=0,b=$=1,m=z="",l=s;break;case 58:l=1+A$1(z),h=p;default:if(b<1)if(k==123)--b;else if(k==125&&b++==0&&K()==125)continue;switch(z+=d$1(k),k*b){case 38:$=o>0?1:(z+="\f",-1);break;case 44:u[f++]=(A$1(z)-1)*$,$=1;break;case 64:if(N()===45)z+=V(L());v=N(),o=A$1(m=z+=re(P())),k++;break;case 45:if(p===45&&A$1(z)==2)b=0;}}return t}function ne(e,r,a,c,t,s,u,i,f,o,l){var v=t-1;var h=t===0?s:[""];var p=M(h);for(var b=0,w=0,$=0;b<c;++b)for(var d=0,m=C(e,v+1,v=k$1(w=u[b])),x=e;d<p;++d)if(x=g$1(w>0?h[d]+" "+m:y$1(m,/&\f/g,h[d])))f[$++]=x;return H(e,r,a,t===0?n$1:i,f,o,l)}function te(e,r,a){return H(e,r,a,c$1,d$1(J()),C(e,2,-2),0)}function se(e,r,a,c){return H(e,r,a,t$1,C(e,0,c),C(e,c+1,-1),c)}function ue(c,n){switch(m$1(c,n)){case 5103:return a+"print-"+c+c;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return a+c+c;case 5349:case 4246:case 4810:case 6968:case 2756:return a+c+r$1+c+e$1+c+c;case 6828:case 4268:return a+c+e$1+c+c;case 6165:return a+c+e$1+"flex-"+c+c;case 5187:return a+c+y$1(c,/(\w+).+(:[^]+)/,a+"box-$1$2"+e$1+"flex-$1$2")+c;case 5443:return a+c+e$1+"flex-item-"+y$1(c,/flex-|-self/,"")+c;case 4675:return a+c+e$1+"flex-line-pack"+y$1(c,/align-content|flex-|-self/,"")+c;case 5548:return a+c+e$1+y$1(c,"shrink","negative")+c;case 5292:return a+c+e$1+y$1(c,"basis","preferred-size")+c;case 6060:return a+"box-"+y$1(c,"-grow","")+a+c+e$1+y$1(c,"grow","positive")+c;case 4554:return a+y$1(c,/([^-])(transform)/g,"$1"+a+"$2")+c;case 6187:return y$1(y$1(y$1(c,/(zoom-|grab)/,a+"$1"),/(image-set)/,a+"$1"),c,"")+c;case 5495:case 3959:return y$1(c,/(image-set\([^]*)/,a+"$1"+"$`$1");case 4968:return y$1(y$1(c,/(.+:)(flex-)?(.*)/,a+"box-pack:$3"+e$1+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+a+c+c;case 4095:case 3583:case 4068:case 2532:return y$1(c,/(.+)-inline(.+)/,a+"$1$2")+c;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(A$1(c)-1-n>6)switch(z$1(c,n+1)){case 109:if(z$1(c,n+4)!==45)break;case 102:return y$1(c,/(.+:)(.+)-([^]+)/,"$1"+a+"$2-$3"+"$1"+r$1+(z$1(c,n+3)==108?"$3":"$2-$3"))+c;case 115:return ~j(c,"stretch")?ue(y$1(c,"stretch","fill-available"),n)+c:c}break;case 4949:if(z$1(c,n+1)!==115)break;case 6444:switch(z$1(c,A$1(c)-3-(~j(c,"!important")&&10))){case 107:return y$1(c,":",":"+a)+c;case 101:return y$1(c,/(.+:)([^;!]+)(;|!.+)?/,"$1"+a+(z$1(c,14)===45?"inline-":"")+"box$3"+"$1"+a+"$2$3"+"$1"+e$1+"$2box$3")+c}break;case 5936:switch(z$1(c,n+11)){case 114:return a+c+e$1+y$1(c,/[svh]\w+-[tblr]{2}/,"tb")+c;case 108:return a+c+e$1+y$1(c,/[svh]\w+-[tblr]{2}/,"tb-rl")+c;case 45:return a+c+e$1+y$1(c,/[svh]\w+-[tblr]{2}/,"lr")+c}return a+c+e$1+c+c}return c}function ie(e,r){var a="";var c=M(e);for(var n=0;n<c;n++)a+=r(e[n],n,e,r)||"";return a}function fe(e,r,a,s){switch(e.type){case i:case t$1:return e.return=e.return||e.value;case c$1:return "";case n$1:e.value=e.props.join(",");}return A$1(a=ie(e.children,s))?e.return=e.value+"{"+a+"}":""}function oe(e){var r=M(e);return function(a,c,n,t){var s="";for(var u=0;u<r;u++)s+=e[u](a,c,n,t)||"";return s}}function le(e){return function(r){if(!r.root)if(r=r.return)e(r);}}function ve(c,s,u,i){if(!c.return)switch(c.type){case t$1:c.return=ue(c.value,c.length);break;case p$1:return ie([I(y$1(c.value,"@","@"+a),c,"")],i);case n$1:if(c.length)return S(c.props,(function(n){switch(x$1(n,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return ie([I(y$1(n,/:(read-\w+)/,":"+r$1+"$1"),c,"")],i);case"::placeholder":return ie([I(y$1(n,/:(plac\w+)/,":"+a+"input-$1"),c,""),I(y$1(n,/:(plac\w+)/,":"+r$1+"$1"),c,""),I(y$1(n,/:(plac\w+)/,e$1+"input-$1"),c,"")],i)}return ""}))}}

	var toRules = function toRules(parsed, points) {
	  // pretend we've started with a comma
	  var index = -1;
	  var character = 44;

	  do {
	    switch (R(character)) {
	      case 0:
	        // &\f
	        if (character === 38 && N() === 12) {
	          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
	          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
	          // and when it should just concatenate the outer and inner selectors
	          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
	          points[index] = 1;
	        }

	        parsed[index] += re(E - 1);
	        break;

	      case 2:
	        parsed[index] += V(character);
	        break;

	      case 4:
	        // comma
	        if (character === 44) {
	          // colon
	          parsed[++index] = N() === 58 ? '&\f' : '';
	          points[index] = parsed[index].length;
	          break;
	        }

	      // fallthrough

	      default:
	        parsed[index] += d$1(character);
	    }
	  } while (character = L());

	  return parsed;
	};

	var getRules = function getRules(value, points) {
	  return U(toRules(T(value), points));
	}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


	var fixedElements = /* #__PURE__ */new WeakMap();
	var compat = function compat(element) {
	  if (element.type !== 'rule' || !element.parent || // .length indicates if this rule contains pseudo or not
	  !element.length) {
	    return;
	  }

	  var value = element.value,
	      parent = element.parent;
	  var isImplicitRule = element.column === parent.column && element.line === parent.line;

	  while (parent.type !== 'rule') {
	    parent = parent.parent;
	    if (!parent) return;
	  } // short-circuit for the simplest case


	  if (element.props.length === 1 && value.charCodeAt(0) !== 58
	  /* colon */
	  && !fixedElements.get(parent)) {
	    return;
	  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
	  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


	  if (isImplicitRule) {
	    return;
	  }

	  fixedElements.set(element, true);
	  var points = [];
	  var rules = getRules(value, points);
	  var parentRules = parent.props;

	  for (var i = 0, k = 0; i < rules.length; i++) {
	    for (var j = 0; j < parentRules.length; j++, k++) {
	      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
	    }
	  }
	};
	var removeLabel = function removeLabel(element) {
	  if (element.type === 'decl') {
	    var value = element.value;

	    if ( // charcode for l
	    value.charCodeAt(0) === 108 && // charcode for b
	    value.charCodeAt(2) === 98) {
	      // this ignores label
	      element["return"] = '';
	      element.value = '';
	    }
	  }
	};

	var defaultStylisPlugins = [ve];

	var createCache = function createCache(options) {
	  var key = options.key;

	  if ( key === 'css') {
	    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
	    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
	    // note this very very intentionally targets all style elements regardless of the key to ensure
	    // that creating a cache works inside of render of a React component

	    Array.prototype.forEach.call(ssrStyles, function (node) {
	      // we want to only move elements which have a space in the data-emotion attribute value
	      // because that indicates that it is an Emotion 11 server-side rendered style elements
	      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
	      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
	      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
	      // will not result in the Emotion 10 styles being destroyed
	      var dataEmotionAttribute = node.getAttribute('data-emotion');

	      if (dataEmotionAttribute.indexOf(' ') === -1) {
	        return;
	      }
	      document.head.appendChild(node);
	      node.setAttribute('data-s', '');
	    });
	  }

	  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

	  var inserted = {}; // $FlowFixMe

	  var container;
	  var nodesToHydrate = [];

	  {
	    container = options.container || document.head;
	    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
	    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
	    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
	      var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe

	      for (var i = 1; i < attrib.length; i++) {
	        inserted[attrib[i]] = true;
	      }

	      nodesToHydrate.push(node);
	    });
	  }

	  var _insert;

	  var omnipresentPlugins = [compat, removeLabel];

	  {
	    var currentSheet;
	    var finalizingPlugins = [fe, le(function (rule) {
	      currentSheet.insert(rule);
	    })];
	    var serializer = oe(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

	    var stylis = function stylis(styles) {
	      return ie(ae(styles), serializer);
	    };

	    _insert = function insert(selector, serialized, sheet, shouldCache) {
	      currentSheet = sheet;

	      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

	      if (shouldCache) {
	        cache.inserted[serialized.name] = true;
	      }
	    };
	  }

	  var cache = {
	    key: key,
	    sheet: new StyleSheet({
	      key: key,
	      container: container,
	      nonce: options.nonce,
	      speedy: options.speedy,
	      prepend: options.prepend
	    }),
	    nonce: options.nonce,
	    inserted: inserted,
	    registered: {},
	    insert: _insert
	  };
	  cache.sheet.hydrate(nodesToHydrate);
	  return cache;
	};

	var createCache$1 = createCache;

	var reactIs$1 = {exports: {}};

	var reactIs_production_min = {};

	/** @license React v16.13.1
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
	Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
	function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
	reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
	reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
	reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;

	{
	  reactIs$1.exports = reactIs_production_min;
	}

	var reactIs = reactIs$1.exports;
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	var isBrowser = "object" !== 'undefined';
	function getRegisteredStyles(registered, registeredStyles, classNames) {
	  var rawClassName = '';
	  classNames.split(' ').forEach(function (className) {
	    if (registered[className] !== undefined) {
	      registeredStyles.push(registered[className] + ";");
	    } else {
	      rawClassName += className + " ";
	    }
	  });
	  return rawClassName;
	}
	var insertStyles = function insertStyles(cache, serialized, isStringTag) {
	  var className = cache.key + "-" + serialized.name;

	  if ( // we only need to add the styles to the registered cache if the
	  // class name could be used further down
	  // the tree but if it's a string tag, we know it won't
	  // so we don't have to add it to registered cache.
	  // this improves memory usage since we can avoid storing the whole style string
	  (isStringTag === false || // we need to always store it if we're in compat mode and
	  // in node since emotion-server relies on whether a style is in
	  // the registered cache to know whether a style is global or not
	  // also, note that this check will be dead code eliminated in the browser
	  isBrowser === false ) && cache.registered[className] === undefined) {
	    cache.registered[className] = serialized.styles;
	  }

	  if (cache.inserted[serialized.name] === undefined) {
	    var current = serialized;

	    do {
	      cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

	      current = current.next;
	    } while (current !== undefined);
	  }
	};

	/* eslint-disable */
	// Inspired by https://github.com/garycourt/murmurhash-js
	// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
	function murmur2(str) {
	  // 'm' and 'r' are mixing constants generated offline.
	  // They're not really 'magic', they just happen to work well.
	  // const m = 0x5bd1e995;
	  // const r = 24;
	  // Initialize the hash
	  var h = 0; // Mix 4 bytes at a time into the hash

	  var k,
	      i = 0,
	      len = str.length;

	  for (; len >= 4; ++i, len -= 4) {
	    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
	    k =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
	    k ^=
	    /* k >>> r: */
	    k >>> 24;
	    h =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
	    /* Math.imul(h, m): */
	    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Handle the last few bytes of the input array


	  switch (len) {
	    case 3:
	      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

	    case 2:
	      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

	    case 1:
	      h ^= str.charCodeAt(i) & 0xff;
	      h =
	      /* Math.imul(h, m): */
	      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Do a few final mixes of the hash to ensure the last few
	  // bytes are well-incorporated.


	  h ^= h >>> 13;
	  h =
	  /* Math.imul(h, m): */
	  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  return ((h ^ h >>> 15) >>> 0).toString(36);
	}

	var unitlessKeys = {
	  animationIterationCount: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  msGridRow: 1,
	  msGridRowSpan: 1,
	  msGridColumn: 1,
	  msGridColumnSpan: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};

	var hyphenateRegex = /[A-Z]|^ms/g;
	var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

	var isCustomProperty = function isCustomProperty(property) {
	  return property.charCodeAt(1) === 45;
	};

	var isProcessableValue = function isProcessableValue(value) {
	  return value != null && typeof value !== 'boolean';
	};

	var processStyleName = /* #__PURE__ */memoize$1(function (styleName) {
	  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
	});

	var processStyleValue = function processStyleValue(key, value) {
	  switch (key) {
	    case 'animation':
	    case 'animationName':
	      {
	        if (typeof value === 'string') {
	          return value.replace(animationRegex, function (match, p1, p2) {
	            cursor = {
	              name: p1,
	              styles: p2,
	              next: cursor
	            };
	            return p1;
	          });
	        }
	      }
	  }

	  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
	    return value + 'px';
	  }

	  return value;
	};

	function handleInterpolation(mergedProps, registered, interpolation) {
	  if (interpolation == null) {
	    return '';
	  }

	  if (interpolation.__emotion_styles !== undefined) {

	    return interpolation;
	  }

	  switch (typeof interpolation) {
	    case 'boolean':
	      {
	        return '';
	      }

	    case 'object':
	      {
	        if (interpolation.anim === 1) {
	          cursor = {
	            name: interpolation.name,
	            styles: interpolation.styles,
	            next: cursor
	          };
	          return interpolation.name;
	        }

	        if (interpolation.styles !== undefined) {
	          var next = interpolation.next;

	          if (next !== undefined) {
	            // not the most efficient thing ever but this is a pretty rare case
	            // and there will be very few iterations of this generally
	            while (next !== undefined) {
	              cursor = {
	                name: next.name,
	                styles: next.styles,
	                next: cursor
	              };
	              next = next.next;
	            }
	          }

	          var styles = interpolation.styles + ";";

	          return styles;
	        }

	        return createStringFromObject(mergedProps, registered, interpolation);
	      }

	    case 'function':
	      {
	        if (mergedProps !== undefined) {
	          var previousCursor = cursor;
	          var result = interpolation(mergedProps);
	          cursor = previousCursor;
	          return handleInterpolation(mergedProps, registered, result);
	        }

	        break;
	      }
	  } // finalize string values (regular strings and functions interpolated into css calls)


	  if (registered == null) {
	    return interpolation;
	  }

	  var cached = registered[interpolation];
	  return cached !== undefined ? cached : interpolation;
	}

	function createStringFromObject(mergedProps, registered, obj) {
	  var string = '';

	  if (Array.isArray(obj)) {
	    for (var i = 0; i < obj.length; i++) {
	      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
	    }
	  } else {
	    for (var _key in obj) {
	      var value = obj[_key];

	      if (typeof value !== 'object') {
	        if (registered != null && registered[value] !== undefined) {
	          string += _key + "{" + registered[value] + "}";
	        } else if (isProcessableValue(value)) {
	          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
	        }
	      } else {
	        if (_key === 'NO_COMPONENT_SELECTOR' && "production" !== 'production') {
	          throw new Error('Component selectors can only be used in conjunction with @emotion/babel-plugin.');
	        }

	        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
	          for (var _i = 0; _i < value.length; _i++) {
	            if (isProcessableValue(value[_i])) {
	              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
	            }
	          }
	        } else {
	          var interpolated = handleInterpolation(mergedProps, registered, value);

	          switch (_key) {
	            case 'animation':
	            case 'animationName':
	              {
	                string += processStyleName(_key) + ":" + interpolated + ";";
	                break;
	              }

	            default:
	              {

	                string += _key + "{" + interpolated + "}";
	              }
	          }
	        }
	      }
	    }
	  }

	  return string;
	}

	var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
	// keyframes are stored on the SerializedStyles object as a linked list


	var cursor;
	var serializeStyles = function serializeStyles(args, registered, mergedProps) {
	  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
	    return args[0];
	  }

	  var stringMode = true;
	  var styles = '';
	  cursor = undefined;
	  var strings = args[0];

	  if (strings == null || strings.raw === undefined) {
	    stringMode = false;
	    styles += handleInterpolation(mergedProps, registered, strings);
	  } else {

	    styles += strings[0];
	  } // we start at 1 since we've already handled the first arg


	  for (var i = 1; i < args.length; i++) {
	    styles += handleInterpolation(mergedProps, registered, args[i]);

	    if (stringMode) {

	      styles += strings[i];
	    }
	  }


	  labelPattern.lastIndex = 0;
	  var identifierName = '';
	  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

	  while ((match = labelPattern.exec(styles)) !== null) {
	    identifierName += '-' + // $FlowFixMe we know it's not null
	    match[1];
	  }

	  var name = murmur2(styles) + identifierName;

	  return {
	    name: name,
	    styles: styles,
	    next: cursor
	  };
	};

	var EmotionCacheContext = /* #__PURE__ */react.exports.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
	// because this module is primarily intended for the browser and node
	// but it's also required in react native and similar environments sometimes
	// and we could have a special build just for that
	// but this is much easier and the native packages
	// might use a different theme context in the future anyway
	typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache$1({
	  key: 'css'
	}) : null);

	var CacheProvider = EmotionCacheContext.Provider;

	var withEmotionCache = function withEmotionCache(func) {
	  // $FlowFixMe
	  return /*#__PURE__*/react.exports.forwardRef(function (props, ref) {
	    // the cache will never be null in the browser
	    var cache = react.exports.useContext(EmotionCacheContext);
	    return func(props, cache, ref);
	  });
	};

	var ThemeContext$2 = /* #__PURE__ */react.exports.createContext({});

	// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
	// initial client-side render from SSR, use place of hydrating tag

	var Global = /* #__PURE__ */withEmotionCache(function (props, cache) {

	  var styles = props.styles;
	  var serialized = serializeStyles([styles], undefined, react.exports.useContext(ThemeContext$2));
	  // but it is based on a constant that will never change at runtime
	  // it's effectively like having two implementations and switching them out
	  // so it's not actually breaking anything


	  var sheetRef = react.exports.useRef();
	  react.exports.useLayoutEffect(function () {
	    var key = cache.key + "-global";
	    var sheet = new StyleSheet({
	      key: key,
	      nonce: cache.sheet.nonce,
	      container: cache.sheet.container,
	      speedy: cache.sheet.isSpeedy
	    });
	    var rehydrating = false; // $FlowFixMe

	    var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

	    if (cache.sheet.tags.length) {
	      sheet.before = cache.sheet.tags[0];
	    }

	    if (node !== null) {
	      rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

	      node.setAttribute('data-emotion', key);
	      sheet.hydrate([node]);
	    }

	    sheetRef.current = [sheet, rehydrating];
	    return function () {
	      sheet.flush();
	    };
	  }, [cache]);
	  react.exports.useLayoutEffect(function () {
	    var sheetRefCurrent = sheetRef.current;
	    var sheet = sheetRefCurrent[0],
	        rehydrating = sheetRefCurrent[1];

	    if (rehydrating) {
	      sheetRefCurrent[1] = false;
	      return;
	    }

	    if (serialized.next !== undefined) {
	      // insert keyframes
	      insertStyles(cache, serialized.next, true);
	    }

	    if (sheet.tags.length) {
	      // if this doesn't exist then it will be null so the style element will be appended
	      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
	      sheet.before = element;
	      sheet.flush();
	    }

	    cache.insert("", serialized, sheet, false);
	  }, [cache, serialized.name]);
	  return null;
	});

	function css() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return serializeStyles(args);
	}

	var keyframes = function keyframes() {
	  var insertable = css.apply(void 0, arguments);
	  var name = "animation-" + insertable.name; // $FlowFixMe

	  return {
	    name: name,
	    styles: "@keyframes " + name + "{" + insertable.styles + "}",
	    anim: 1,
	    toString: function toString() {
	      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
	    }
	  };
	};

	var testOmitPropsOnStringTag = isPropValid;

	var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
	  return key !== 'theme';
	};

	var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
	  return typeof tag === 'string' && // 96 is one less than the char code
	  // for "a" so this is checking that
	  // it's a lowercase character
	  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
	};
	var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
	  var shouldForwardProp;

	  if (options) {
	    var optionsShouldForwardProp = options.shouldForwardProp;
	    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
	      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
	    } : optionsShouldForwardProp;
	  }

	  if (typeof shouldForwardProp !== 'function' && isReal) {
	    shouldForwardProp = tag.__emotion_forwardProp;
	  }

	  return shouldForwardProp;
	};

	var createStyled$1 = function createStyled(tag, options) {

	  var isReal = tag.__emotion_real === tag;
	  var baseTag = isReal && tag.__emotion_base || tag;
	  var identifierName;
	  var targetClassName;

	  if (options !== undefined) {
	    identifierName = options.label;
	    targetClassName = options.target;
	  }

	  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
	  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
	  var shouldUseAs = !defaultShouldForwardProp('as');
	  return function () {
	    var args = arguments;
	    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

	    if (identifierName !== undefined) {
	      styles.push("label:" + identifierName + ";");
	    }

	    if (args[0] == null || args[0].raw === undefined) {
	      styles.push.apply(styles, args);
	    } else {

	      styles.push(args[0][0]);
	      var len = args.length;
	      var i = 1;

	      for (; i < len; i++) {

	        styles.push(args[i], args[0][i]);
	      }
	    } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class


	    var Styled = withEmotionCache(function (props, cache, ref) {
	      var finalTag = shouldUseAs && props.as || baseTag;
	      var className = '';
	      var classInterpolations = [];
	      var mergedProps = props;

	      if (props.theme == null) {
	        mergedProps = {};

	        for (var key in props) {
	          mergedProps[key] = props[key];
	        }

	        mergedProps.theme = react.exports.useContext(ThemeContext$2);
	      }

	      if (typeof props.className === 'string') {
	        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
	      } else if (props.className != null) {
	        className = props.className + " ";
	      }

	      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
	      insertStyles(cache, serialized, typeof finalTag === 'string');
	      className += cache.key + "-" + serialized.name;

	      if (targetClassName !== undefined) {
	        className += " " + targetClassName;
	      }

	      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(finalTag) : defaultShouldForwardProp;
	      var newProps = {};

	      for (var _key in props) {
	        if (shouldUseAs && _key === 'as') continue;

	        if ( // $FlowFixMe
	        finalShouldForwardProp(_key)) {
	          newProps[_key] = props[_key];
	        }
	      }

	      newProps.className = className;
	      newProps.ref = ref;
	      var ele = /*#__PURE__*/react.exports.createElement(finalTag, newProps);

	      return ele;
	    });
	    Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
	    Styled.defaultProps = tag.defaultProps;
	    Styled.__emotion_real = Styled;
	    Styled.__emotion_base = baseTag;
	    Styled.__emotion_styles = styles;
	    Styled.__emotion_forwardProp = shouldForwardProp;
	    Object.defineProperty(Styled, 'toString', {
	      value: function value() {
	        if (targetClassName === undefined && "production" !== 'production') {
	          return 'NO_COMPONENT_SELECTOR';
	        } // $FlowFixMe: coerce undefined to string


	        return "." + targetClassName;
	      }
	    });

	    Styled.withComponent = function (nextTag, nextOptions) {
	      return createStyled(nextTag, _extends$3({}, options, nextOptions, {
	        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
	      })).apply(void 0, styles);
	    };

	    return Styled;
	  };
	};

	var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
	'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

	var newStyled = createStyled$1.bind();
	tags.forEach(function (tagName) {
	  // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
	  newStyled[tagName] = newStyled(tagName);
	});

	var emStyled = newStyled;

	const cache = createCache$1({
	  key: 'css',
	  prepend: true
	});
	function StyledEngineProvider(props) {
	  const {
	    injectFirst,
	    children
	  } = props;
	  return injectFirst ? /*#__PURE__*/jsxRuntime.exports.jsx(CacheProvider, {
	    value: cache,
	    children: children
	  }) : children;
	}

	function isEmpty$2(obj) {
	  return obj === undefined || obj === null || Object.keys(obj).length === 0;
	}

	function GlobalStyles$1(props) {
	  const {
	    styles,
	    defaultTheme = {}
	  } = props;
	  const globalStyles = typeof styles === 'function' ? themeInput => styles(isEmpty$2(themeInput) ? defaultTheme : themeInput) : styles;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Global, {
	    styles: globalStyles
	  });
	}

	/** @license Material-UI v5.0.0-rc.1
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	function styled$2(tag, options) {
	  const stylesFactory = emStyled(tag, options);

	  return stylesFactory;
	}

	function isPlainObject$1(item) {
	  return item !== null && typeof item === 'object' && // TS thinks `item is possibly null` even though this was our first guard.
	  // @ts-expect-error
	  item.constructor === Object;
	}
	function deepmerge(target, source, options = {
	  clone: true
	}) {
	  const output = options.clone ? _extends$3({}, target) : target;

	  if (isPlainObject$1(target) && isPlainObject$1(source)) {
	    Object.keys(source).forEach(key => {
	      // Avoid prototype pollution
	      if (key === '__proto__') {
	        return;
	      }

	      if (isPlainObject$1(source[key]) && key in target && isPlainObject$1(target[key])) {
	        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
	        output[key] = deepmerge(target[key], source[key], options);
	      } else {
	        output[key] = source[key];
	      }
	    });
	  }

	  return output;
	}

	/**
	 * WARNING: Don't import this directly.
	 * Use `MuiError` from `@mui/utils/macros/MuiError.macro` instead.
	 * @param {number} code
	 */
	function formatMuiErrorMessage(code) {
	  // Apply babel-plugin-transform-template-literals in loose mode
	  // loose mode is safe iff we're concatenating primitives
	  // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose

	  /* eslint-disable prefer-template */
	  let url = 'https://material-ui.com/production-error/?code=' + code;

	  for (let i = 1; i < arguments.length; i += 1) {
	    // rest params over-transpile for this case
	    // eslint-disable-next-line prefer-rest-params
	    url += '&args[]=' + encodeURIComponent(arguments[i]);
	  }

	  return 'Minified Material-UI error #' + code + '; visit ' + url + ' for the full message.';
	  /* eslint-enable prefer-template */
	}

	// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
	//
	// A strict capitalization should uppercase the first letter of each word in the sentence.
	// We only handle the first word.
	function capitalize(string) {
	  if (typeof string !== 'string') {
	    throw new Error(formatMuiErrorMessage(7));
	  }

	  return string.charAt(0).toUpperCase() + string.slice(1);
	}

	/**
	 * Safe chained function.
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 */
	function createChainedFunction(...funcs) {
	  return funcs.reduce((acc, func) => {
	    if (func == null) {
	      return acc;
	    }

	    return function chainedFunction(...args) {
	      acc.apply(this, args);
	      func.apply(this, args);
	    };
	  }, () => {});
	}

	// Corresponds to 10 frames at 60 Hz.
	// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
	function debounce(func, wait = 166) {
	  let timeout;

	  function debounced(...args) {
	    const later = () => {
	      func.apply(this, args);
	    };

	    clearTimeout(timeout);
	    timeout = setTimeout(later, wait);
	  }

	  debounced.clear = () => {
	    clearTimeout(timeout);
	  };

	  return debounced;
	}

	function deprecatedPropType(validator, reason) {
	  {
	    return () => null;
	  }
	}

	function isMuiElement(element, muiNames) {
	  return /*#__PURE__*/react.exports.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
	}

	function ownerDocument(node) {
	  return node && node.ownerDocument || document;
	}

	function ownerWindow(node) {
	  const doc = ownerDocument(node);
	  return doc.defaultView || window;
	}

	function requirePropFactory(componentNameInError, Component) {
	  {
	    return () => null;
	  } // eslint-disable-next-line react/forbid-foreign-prop-types
	}

	/**
	 * TODO v5: consider making it private
	 *
	 * passes {value} to {ref}
	 *
	 * WARNING: Be sure to only call this inside a callback that is passed as a ref.
	 * Otherwise, make sure to cleanup the previous {ref} if it changes. See
	 * https://github.com/mui-org/material-ui/issues/13539
	 *
	 * Useful if you want to expose the ref of an inner component to the public API
	 * while still using it inside the component.
	 * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
	 */
	function setRef(ref, value) {
	  if (typeof ref === 'function') {
	    ref(value);
	  } else if (ref) {
	    ref.current = value;
	  }
	}

	const useEnhancedEffect = typeof window !== 'undefined' ? react.exports.useLayoutEffect : react.exports.useEffect;
	var useEnhancedEffect$1 = useEnhancedEffect;

	function useId(idOverride) {
	  const [defaultId, setDefaultId] = react.exports.useState(idOverride);
	  const id = idOverride || defaultId;
	  react.exports.useEffect(() => {
	    if (defaultId == null) {
	      // Fallback to this default id when possible.
	      // Use the random value for client-side rendering only.
	      // We can't use it server-side.
	      setDefaultId(`mui-${Math.round(Math.random() * 1e9)}`);
	    }
	  }, [defaultId]);
	  return id;
	}

	function unsupportedProp(props, propName, componentName, location, propFullName) {
	  {
	    return null;
	  }
	}

	/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */
	function useControlled({
	  controlled,
	  default: defaultProp,
	  name,
	  state = 'value'
	}) {
	  // isControlled is ignored in the hook dependency lists as it should never change.
	  const {
	    current: isControlled
	  } = react.exports.useRef(controlled !== undefined);
	  const [valueState, setValue] = react.exports.useState(defaultProp);
	  const value = isControlled ? controlled : valueState;

	  const setValueIfUncontrolled = react.exports.useCallback(newValue => {
	    if (!isControlled) {
	      setValue(newValue);
	    }
	  }, []);
	  return [value, setValueIfUncontrolled];
	}

	/**
	 * https://github.com/facebook/react/issues/14099#issuecomment-440013892
	 */

	function useEventCallback(fn) {
	  const ref = react.exports.useRef(fn);
	  useEnhancedEffect$1(() => {
	    ref.current = fn;
	  });
	  return react.exports.useCallback((...args) => // @ts-expect-error hide `this`
	  // tslint:disable-next-line:ban-comma-operator
	  (0, ref.current)(...args), []);
	}

	function useForkRef(refA, refB) {
	  /**
	   * This will create a new function if the ref props change and are defined.
	   * This means react will call the old forkRef with `null` and the new forkRef
	   * with the ref. Cleanup naturally emerges from this behavior.
	   */
	  return react.exports.useMemo(() => {
	    if (refA == null && refB == null) {
	      return null;
	    }

	    return refValue => {
	      setRef(refA, refValue);
	      setRef(refB, refValue);
	    };
	  }, [refA, refB]);
	}

	// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js
	let hadKeyboardEvent = true;
	let hadFocusVisibleRecently = false;
	let hadFocusVisibleRecentlyTimeout = null;
	const inputTypesWhitelist = {
	  text: true,
	  search: true,
	  url: true,
	  tel: true,
	  email: true,
	  password: true,
	  number: true,
	  date: true,
	  month: true,
	  week: true,
	  time: true,
	  datetime: true,
	  'datetime-local': true
	};
	/**
	 * Computes whether the given element should automatically trigger the
	 * `focus-visible` class being added, i.e. whether it should always match
	 * `:focus-visible` when focused.
	 * @param {Element} node
	 * @returns {boolean}
	 */

	function focusTriggersKeyboardModality(node) {
	  const {
	    type,
	    tagName
	  } = node;

	  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
	    return true;
	  }

	  if (tagName === 'TEXTAREA' && !node.readOnly) {
	    return true;
	  }

	  if (node.isContentEditable) {
	    return true;
	  }

	  return false;
	}
	/**
	 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
	 * If the most recent user interaction was via the keyboard;
	 * and the key press did not include a meta, alt/option, or control key;
	 * then the modality is keyboard. Otherwise, the modality is not keyboard.
	 * @param {KeyboardEvent} event
	 */


	function handleKeyDown(event) {
	  if (event.metaKey || event.altKey || event.ctrlKey) {
	    return;
	  }

	  hadKeyboardEvent = true;
	}
	/**
	 * If at any point a user clicks with a pointing device, ensure that we change
	 * the modality away from keyboard.
	 * This avoids the situation where a user presses a key on an already focused
	 * element, and then clicks on a different element, focusing it with a
	 * pointing device, while we still think we're in keyboard modality.
	 */


	function handlePointerDown() {
	  hadKeyboardEvent = false;
	}

	function handleVisibilityChange() {
	  if (this.visibilityState === 'hidden') {
	    // If the tab becomes active again, the browser will handle calling focus
	    // on the element (Safari actually calls it twice).
	    // If this tab change caused a blur on an element with focus-visible,
	    // re-apply the class when the user switches back to the tab.
	    if (hadFocusVisibleRecently) {
	      hadKeyboardEvent = true;
	    }
	  }
	}

	function prepare(doc) {
	  doc.addEventListener('keydown', handleKeyDown, true);
	  doc.addEventListener('mousedown', handlePointerDown, true);
	  doc.addEventListener('pointerdown', handlePointerDown, true);
	  doc.addEventListener('touchstart', handlePointerDown, true);
	  doc.addEventListener('visibilitychange', handleVisibilityChange, true);
	}

	function isFocusVisible(event) {
	  const {
	    target
	  } = event;

	  try {
	    return target.matches(':focus-visible');
	  } catch (error) {// Browsers not implementing :focus-visible will throw a SyntaxError.
	    // We use our own heuristic for those browsers.
	    // Rethrow might be better if it's not the expected error but do we really
	    // want to crash if focus-visible malfunctioned?
	  } // No need for validFocusTarget check. The user does that by attaching it to
	  // focusable events only.


	  return hadKeyboardEvent || focusTriggersKeyboardModality(target);
	}

	function useIsFocusVisible() {
	  const ref = react.exports.useCallback(node => {
	    if (node != null) {
	      prepare(node.ownerDocument);
	    }
	  }, []);
	  const isFocusVisibleRef = react.exports.useRef(false);
	  /**
	   * Should be called if a blur event is fired
	   */

	  function handleBlurVisible() {
	    // checking against potential state variable does not suffice if we focus and blur synchronously.
	    // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
	    // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
	    // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
	    // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
	    if (isFocusVisibleRef.current) {
	      // To detect a tab/window switch, we look for a blur event followed
	      // rapidly by a visibility change.
	      // If we don't see a visibility change within 100ms, it's probably a
	      // regular focus change.
	      hadFocusVisibleRecently = true;
	      window.clearTimeout(hadFocusVisibleRecentlyTimeout);
	      hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
	        hadFocusVisibleRecently = false;
	      }, 100);
	      isFocusVisibleRef.current = false;
	      return true;
	    }

	    return false;
	  }
	  /**
	   * Should be called if a blur event is fired
	   */


	  function handleFocusVisible(event) {
	    if (isFocusVisible(event)) {
	      isFocusVisibleRef.current = true;
	      return true;
	    }

	    return false;
	  }

	  return {
	    isFocusVisibleRef,
	    onFocus: handleFocusVisible,
	    onBlur: handleBlurVisible,
	    ref
	  };
	}

	function merge$1(acc, item) {
	  if (!item) {
	    return acc;
	  }

	  return deepmerge(acc, item, {
	    clone: false // No need to clone deep, it's way faster.

	  });
	}

	// For instance with the first breakpoint xs: [xs, sm[.

	const values$1 = {
	  xs: 0,
	  // phone
	  sm: 600,
	  // tablets
	  md: 900,
	  // small laptop
	  lg: 1200,
	  // desktop
	  xl: 1536 // large screens

	};
	const defaultBreakpoints = {
	  // Sorted ASC by size. That's important.
	  // It can't be configured as it's used statically for propTypes.
	  keys: ['xs', 'sm', 'md', 'lg', 'xl'],
	  up: key => `@media (min-width:${values$1[key]}px)`
	};
	function handleBreakpoints(props, propValue, styleFromPropValue) {
	  const theme = props.theme || {};

	  if (Array.isArray(propValue)) {
	    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
	    return propValue.reduce((acc, item, index) => {
	      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
	      return acc;
	    }, {});
	  }

	  if (typeof propValue === 'object') {
	    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
	    return Object.keys(propValue).reduce((acc, breakpoint) => {
	      // key is breakpoint
	      if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
	        const mediaKey = themeBreakpoints.up(breakpoint);
	        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
	      } else {
	        const cssKey = breakpoint;
	        acc[cssKey] = propValue[cssKey];
	      }

	      return acc;
	    }, {});
	  }

	  const output = styleFromPropValue(propValue);
	  return output;
	}

	function createEmptyBreakpointObject(breakpointsInput = {}) {
	  var _breakpointsInput$key;

	  const breakpointsInOrder = breakpointsInput == null ? void 0 : (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
	    const breakpointStyleKey = breakpointsInput.up(key);
	    acc[breakpointStyleKey] = {};
	    return acc;
	  }, {});
	  return breakpointsInOrder || {};
	}
	function removeUnusedBreakpoints(breakpointKeys, style) {
	  return breakpointKeys.reduce((acc, key) => {
	    const breakpointOutput = acc[key];
	    const isBreakpointUnused = Object.keys(breakpointOutput).length === 0;

	    if (isBreakpointUnused) {
	      delete acc[key];
	    }

	    return acc;
	  }, style);
	}
	function resolveBreakpointValues({
	  values: breakpointValues,
	  base
	}) {
	  const keys = Object.keys(base);

	  if (keys.length === 0) {
	    return breakpointValues;
	  }

	  let previous;
	  return keys.reduce((acc, breakpoint) => {
	    if (typeof breakpointValues === 'object') {
	      acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
	    } else {
	      acc[breakpoint] = breakpointValues;
	    }

	    previous = breakpoint;
	    return acc;
	  }, {});
	}

	function getPath(obj, path) {
	  if (!path || typeof path !== 'string') {
	    return null;
	  }

	  return path.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
	}

	function getValue$1(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
	  let value;

	  if (typeof themeMapping === 'function') {
	    value = themeMapping(propValueFinal);
	  } else if (Array.isArray(themeMapping)) {
	    value = themeMapping[propValueFinal] || userValue;
	  } else {
	    value = getPath(themeMapping, propValueFinal) || userValue;
	  }

	  if (transform) {
	    value = transform(value);
	  }

	  return value;
	}

	function style$1(options) {
	  const {
	    prop,
	    cssProperty = options.prop,
	    themeKey,
	    transform
	  } = options;

	  const fn = props => {
	    if (props[prop] == null) {
	      return null;
	    }

	    const propValue = props[prop];
	    const theme = props.theme;
	    const themeMapping = getPath(theme, themeKey) || {};

	    const styleFromPropValue = propValueFinal => {
	      let value = getValue$1(themeMapping, transform, propValueFinal);

	      if (propValueFinal === value && typeof propValueFinal === 'string') {
	        // Haven't found value
	        value = getValue$1(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);
	      }

	      if (cssProperty === false) {
	        return value;
	      }

	      return {
	        [cssProperty]: value
	      };
	    };

	    return handleBreakpoints(props, propValue, styleFromPropValue);
	  };

	  fn.propTypes = {};
	  fn.filterProps = [prop];
	  return fn;
	}

	function compose(...styles) {
	  const handlers = styles.reduce((acc, style) => {
	    style.filterProps.forEach(prop => {
	      acc[prop] = style;
	    });
	    return acc;
	  }, {});

	  const fn = props => {
	    return Object.keys(props).reduce((acc, prop) => {
	      if (handlers[prop]) {
	        return merge$1(acc, handlers[prop](props));
	      }

	      return acc;
	    }, {});
	  };

	  fn.propTypes = {};
	  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
	  return fn;
	}

	function memoize(fn) {
	  const cache = {};
	  return arg => {
	    if (cache[arg] === undefined) {
	      cache[arg] = fn(arg);
	    }

	    return cache[arg];
	  };
	}

	const properties = {
	  m: 'margin',
	  p: 'padding'
	};
	const directions = {
	  t: 'Top',
	  r: 'Right',
	  b: 'Bottom',
	  l: 'Left',
	  x: ['Left', 'Right'],
	  y: ['Top', 'Bottom']
	};
	const aliases = {
	  marginX: 'mx',
	  marginY: 'my',
	  paddingX: 'px',
	  paddingY: 'py'
	}; // memoize() impact:
	// From 300,000 ops/sec
	// To 350,000 ops/sec

	const getCssProperties = memoize(prop => {
	  // It's not a shorthand notation.
	  if (prop.length > 2) {
	    if (aliases[prop]) {
	      prop = aliases[prop];
	    } else {
	      return [prop];
	    }
	  }

	  const [a, b] = prop.split('');
	  const property = properties[a];
	  const direction = directions[b] || '';
	  return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];
	});
	const marginKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY'];
	const paddingKeys = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY'];
	const spacingKeys = [...marginKeys, ...paddingKeys];
	function createUnaryUnit(theme, themeKey, defaultValue, propName) {
	  const themeSpacing = getPath(theme, themeKey) || defaultValue;

	  if (typeof themeSpacing === 'number') {
	    return abs => {
	      if (typeof abs === 'string') {
	        return abs;
	      }

	      return themeSpacing * abs;
	    };
	  }

	  if (Array.isArray(themeSpacing)) {
	    return abs => {
	      if (typeof abs === 'string') {
	        return abs;
	      }

	      return themeSpacing[abs];
	    };
	  }

	  if (typeof themeSpacing === 'function') {
	    return themeSpacing;
	  }

	  return () => undefined;
	}
	function createUnarySpacing(theme) {
	  return createUnaryUnit(theme, 'spacing', 8);
	}
	function getValue(transformer, propValue) {
	  if (typeof propValue === 'string' || propValue == null) {
	    return propValue;
	  }

	  const abs = Math.abs(propValue);
	  const transformed = transformer(abs);

	  if (propValue >= 0) {
	    return transformed;
	  }

	  if (typeof transformed === 'number') {
	    return -transformed;
	  }

	  return `-${transformed}`;
	}
	function getStyleFromPropValue(cssProperties, transformer) {
	  return propValue => cssProperties.reduce((acc, cssProperty) => {
	    acc[cssProperty] = getValue(transformer, propValue);
	    return acc;
	  }, {});
	}

	function resolveCssProperty(props, keys, prop, transformer) {
	  // Using a hash computation over an array iteration could be faster, but with only 28 items,
	  // it's doesn't worth the bundle size.
	  if (keys.indexOf(prop) === -1) {
	    return null;
	  }

	  const cssProperties = getCssProperties(prop);
	  const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
	  const propValue = props[prop];
	  return handleBreakpoints(props, propValue, styleFromPropValue);
	}

	function style(props, keys) {
	  const transformer = createUnarySpacing(props.theme);
	  return Object.keys(props).map(prop => resolveCssProperty(props, keys, prop, transformer)).reduce(merge$1, {});
	}

	function spacing(props) {
	  return style(props, spacingKeys);
	}

	spacing.propTypes = {};
	spacing.filterProps = spacingKeys;

	function getBorder(value) {
	  if (typeof value !== 'number') {
	    return value;
	  }

	  return `${value}px solid`;
	}

	const border = style$1({
	  prop: 'border',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderTop = style$1({
	  prop: 'borderTop',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderRight = style$1({
	  prop: 'borderRight',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderBottom = style$1({
	  prop: 'borderBottom',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderLeft = style$1({
	  prop: 'borderLeft',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderColor = style$1({
	  prop: 'borderColor',
	  themeKey: 'palette'
	});
	const borderTopColor = style$1({
	  prop: 'borderTopColor',
	  themeKey: 'palette'
	});
	const borderRightColor = style$1({
	  prop: 'borderRightColor',
	  themeKey: 'palette'
	});
	const borderBottomColor = style$1({
	  prop: 'borderBottomColor',
	  themeKey: 'palette'
	});
	const borderLeftColor = style$1({
	  prop: 'borderLeftColor',
	  themeKey: 'palette'
	});
	const borderRadius = props => {
	  if (props.borderRadius !== undefined && props.borderRadius !== null) {
	    const transformer = createUnaryUnit(props.theme, 'shape.borderRadius', 4);

	    const styleFromPropValue = propValue => ({
	      borderRadius: getValue(transformer, propValue)
	    });

	    return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
	  }

	  return null;
	};
	borderRadius.propTypes = {};
	borderRadius.filterProps = ['borderRadius'];
	const borders = compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
	var borders$1 = borders;

	const displayPrint = style$1({
	  prop: 'displayPrint',
	  cssProperty: false,
	  transform: value => ({
	    '@media print': {
	      display: value
	    }
	  })
	});
	const displayRaw = style$1({
	  prop: 'display'
	});
	const overflow = style$1({
	  prop: 'overflow'
	});
	const textOverflow = style$1({
	  prop: 'textOverflow'
	});
	const visibility = style$1({
	  prop: 'visibility'
	});
	const whiteSpace = style$1({
	  prop: 'whiteSpace'
	});
	var display = compose(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

	const flexBasis = style$1({
	  prop: 'flexBasis'
	});
	const flexDirection = style$1({
	  prop: 'flexDirection'
	});
	const flexWrap = style$1({
	  prop: 'flexWrap'
	});
	const justifyContent = style$1({
	  prop: 'justifyContent'
	});
	const alignItems = style$1({
	  prop: 'alignItems'
	});
	const alignContent = style$1({
	  prop: 'alignContent'
	});
	const order = style$1({
	  prop: 'order'
	});
	const flex = style$1({
	  prop: 'flex'
	});
	const flexGrow = style$1({
	  prop: 'flexGrow'
	});
	const flexShrink = style$1({
	  prop: 'flexShrink'
	});
	const alignSelf = style$1({
	  prop: 'alignSelf'
	});
	const justifyItems = style$1({
	  prop: 'justifyItems'
	});
	const justifySelf = style$1({
	  prop: 'justifySelf'
	});
	const flexbox = compose(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
	var flexbox$1 = flexbox;

	const gap = props => {
	  if (props.gap !== undefined && props.gap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8);

	    const styleFromPropValue = propValue => ({
	      gap: getValue(transformer, propValue)
	    });

	    return handleBreakpoints(props, props.gap, styleFromPropValue);
	  }

	  return null;
	};
	gap.propTypes = {};
	gap.filterProps = ['gap'];
	const columnGap = props => {
	  if (props.columnGap !== undefined && props.columnGap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8);

	    const styleFromPropValue = propValue => ({
	      columnGap: getValue(transformer, propValue)
	    });

	    return handleBreakpoints(props, props.columnGap, styleFromPropValue);
	  }

	  return null;
	};
	columnGap.propTypes = {};
	columnGap.filterProps = ['columnGap'];
	const rowGap = props => {
	  if (props.rowGap !== undefined && props.rowGap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8);

	    const styleFromPropValue = propValue => ({
	      rowGap: getValue(transformer, propValue)
	    });

	    return handleBreakpoints(props, props.rowGap, styleFromPropValue);
	  }

	  return null;
	};
	rowGap.propTypes = {};
	rowGap.filterProps = ['rowGap'];
	const gridColumn = style$1({
	  prop: 'gridColumn'
	});
	const gridRow = style$1({
	  prop: 'gridRow'
	});
	const gridAutoFlow = style$1({
	  prop: 'gridAutoFlow'
	});
	const gridAutoColumns = style$1({
	  prop: 'gridAutoColumns'
	});
	const gridAutoRows = style$1({
	  prop: 'gridAutoRows'
	});
	const gridTemplateColumns = style$1({
	  prop: 'gridTemplateColumns'
	});
	const gridTemplateRows = style$1({
	  prop: 'gridTemplateRows'
	});
	const gridTemplateAreas = style$1({
	  prop: 'gridTemplateAreas'
	});
	const gridArea = style$1({
	  prop: 'gridArea'
	});
	const grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
	var grid$1 = grid;

	const color = style$1({
	  prop: 'color',
	  themeKey: 'palette'
	});
	const bgcolor = style$1({
	  prop: 'bgcolor',
	  cssProperty: 'backgroundColor',
	  themeKey: 'palette'
	});
	const backgroundColor = style$1({
	  prop: 'backgroundColor',
	  themeKey: 'palette'
	});
	const palette = compose(color, bgcolor, backgroundColor);
	var palette$1 = palette;

	const position = style$1({
	  prop: 'position'
	});
	const zIndex$2 = style$1({
	  prop: 'zIndex',
	  themeKey: 'zIndex'
	});
	const top = style$1({
	  prop: 'top'
	});
	const right = style$1({
	  prop: 'right'
	});
	const bottom = style$1({
	  prop: 'bottom'
	});
	const left = style$1({
	  prop: 'left'
	});
	var positions = compose(position, zIndex$2, top, right, bottom, left);

	const boxShadow = style$1({
	  prop: 'boxShadow',
	  themeKey: 'shadows'
	});
	var shadows$2 = boxShadow;

	function transform(value) {
	  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
	}

	const width = style$1({
	  prop: 'width',
	  transform
	});
	const maxWidth = props => {
	  if (props.maxWidth !== undefined && props.maxWidth !== null) {
	    const styleFromPropValue = propValue => {
	      var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;

	      const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || values$1[propValue];
	      return {
	        maxWidth: breakpoint || transform(propValue)
	      };
	    };

	    return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
	  }

	  return null;
	};
	maxWidth.filterProps = ['maxWidth'];
	const minWidth = style$1({
	  prop: 'minWidth',
	  transform
	});
	const height = style$1({
	  prop: 'height',
	  transform
	});
	const maxHeight = style$1({
	  prop: 'maxHeight',
	  transform
	});
	const minHeight = style$1({
	  prop: 'minHeight',
	  transform
	});
	style$1({
	  prop: 'size',
	  cssProperty: 'width',
	  transform
	});
	style$1({
	  prop: 'size',
	  cssProperty: 'height',
	  transform
	});
	const boxSizing = style$1({
	  prop: 'boxSizing'
	});
	const sizing = compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
	var sizing$1 = sizing;

	const fontFamily = style$1({
	  prop: 'fontFamily',
	  themeKey: 'typography'
	});
	const fontSize = style$1({
	  prop: 'fontSize',
	  themeKey: 'typography'
	});
	const fontStyle = style$1({
	  prop: 'fontStyle',
	  themeKey: 'typography'
	});
	const fontWeight = style$1({
	  prop: 'fontWeight',
	  themeKey: 'typography'
	});
	const letterSpacing = style$1({
	  prop: 'letterSpacing'
	});
	const lineHeight = style$1({
	  prop: 'lineHeight'
	});
	const textAlign = style$1({
	  prop: 'textAlign'
	});
	const typographyVariant = style$1({
	  prop: 'typography',
	  cssProperty: false,
	  themeKey: 'typography'
	});
	const typography = compose(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign);
	var typography$1 = typography;

	const filterPropsMapping = {
	  borders: borders$1.filterProps,
	  display: display.filterProps,
	  flexbox: flexbox$1.filterProps,
	  grid: grid$1.filterProps,
	  positions: positions.filterProps,
	  palette: palette$1.filterProps,
	  shadows: shadows$2.filterProps,
	  sizing: sizing$1.filterProps,
	  spacing: spacing.filterProps,
	  typography: typography$1.filterProps
	};
	const styleFunctionMapping = {
	  borders: borders$1,
	  display,
	  flexbox: flexbox$1,
	  grid: grid$1,
	  positions,
	  palette: palette$1,
	  shadows: shadows$2,
	  sizing: sizing$1,
	  spacing,
	  typography: typography$1
	};
	const propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
	  filterPropsMapping[styleFnName].forEach(propName => {
	    acc[propName] = styleFunctionMapping[styleFnName];
	  });
	  return acc;
	}, {});

	function getThemeValue(prop, value, theme) {
	  const inputProps = {
	    [prop]: value,
	    theme
	  };
	  const styleFunction = propToStyleFunction[prop];
	  return styleFunction ? styleFunction(inputProps) : {
	    [prop]: value
	  };
	}

	function objectsHaveSameKeys(...objects) {
	  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
	  const union = new Set(allKeys);
	  return objects.every(object => union.size === Object.keys(object).length);
	}

	function callIfFn(maybeFn, arg) {
	  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
	}

	function styleFunctionSx(props) {
	  const {
	    sx: styles,
	    theme = {}
	  } = props || {};

	  if (!styles) {
	    return null;
	  }

	  if (typeof styles === 'function') {
	    return styles(theme);
	  }

	  if (typeof styles !== 'object') {
	    // value
	    return styles;
	  }

	  const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
	  const breakpointsKeys = Object.keys(emptyBreakpoints);
	  let css = emptyBreakpoints;
	  Object.keys(styles).forEach(styleKey => {
	    const value = callIfFn(styles[styleKey], theme);

	    if (typeof value === 'object') {
	      if (propToStyleFunction[styleKey]) {
	        css = merge$1(css, getThemeValue(styleKey, value, theme));
	      } else {
	        const breakpointsValues = handleBreakpoints({
	          theme
	        }, value, x => ({
	          [styleKey]: x
	        }));

	        if (objectsHaveSameKeys(breakpointsValues, value)) {
	          css[styleKey] = styleFunctionSx({
	            sx: value,
	            theme
	          });
	        } else {
	          css = merge$1(css, breakpointsValues);
	        }
	      }
	    } else {
	      css = merge$1(css, getThemeValue(styleKey, value, theme));
	    }
	  });
	  return removeUnusedBreakpoints(breakpointsKeys, css);
	}

	styleFunctionSx.filterProps = ['sx'];

	const _excluded$k = ["sx"];

	const splitProps = props => {
	  const result = {
	    systemProps: {},
	    otherProps: {}
	  };
	  Object.keys(props).forEach(prop => {
	    if (propToStyleFunction[prop]) {
	      result.systemProps[prop] = props[prop];
	    } else {
	      result.otherProps[prop] = props[prop];
	    }
	  });
	  return result;
	};

	function extendSxProp(props) {
	  const {
	    sx: inSx
	  } = props,
	        other = _objectWithoutPropertiesLoose$2(props, _excluded$k);

	  const {
	    systemProps,
	    otherProps
	  } = splitProps(other);
	  return _extends$3({}, otherProps, {
	    sx: _extends$3({}, systemProps, inSx)
	  });
	}

	function toVal(mix) {
		var k, y, str='';

		if (typeof mix === 'string' || typeof mix === 'number') {
			str += mix;
		} else if (typeof mix === 'object') {
			if (Array.isArray(mix)) {
				for (k=0; k < mix.length; k++) {
					if (mix[k]) {
						if (y = toVal(mix[k])) {
							str && (str += ' ');
							str += y;
						}
					}
				}
			} else {
				for (k in mix) {
					if (mix[k]) {
						str && (str += ' ');
						str += k;
					}
				}
			}
		}

		return str;
	}

	function clsx () {
		var i=0, tmp, x, str='';
		while (i < arguments.length) {
			if (tmp = arguments[i++]) {
				if (x = toVal(tmp)) {
					str && (str += ' ');
					str += x;
				}
			}
		}
		return str;
	}

	const _excluded$j = ["values", "unit", "step"];

	function createBreakpoints(breakpoints) {
	  const {
	    // The breakpoint **start** at this value.
	    // For instance with the first breakpoint xs: [xs, sm).
	    values = {
	      xs: 0,
	      // phone
	      sm: 600,
	      // tablets
	      md: 900,
	      // small laptop
	      lg: 1200,
	      // desktop
	      xl: 1536 // large screens

	    },
	    unit = 'px',
	    step = 5
	  } = breakpoints,
	        other = _objectWithoutPropertiesLoose$2(breakpoints, _excluded$j);

	  const keys = Object.keys(values);

	  function up(key) {
	    const value = typeof values[key] === 'number' ? values[key] : key;
	    return `@media (min-width:${value}${unit})`;
	  }

	  function down(key) {
	    const value = typeof values[key] === 'number' ? values[key] : key;
	    return `@media (max-width:${value - step / 100}${unit})`;
	  }

	  function between(start, end) {
	    const endIndex = keys.indexOf(end);
	    return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
	  }

	  function only(key) {
	    if (keys.indexOf(key) + 1 < keys.length) {
	      return between(key, keys[keys.indexOf(key) + 1]);
	    }

	    return up(key);
	  }

	  return _extends$3({
	    keys,
	    values,
	    up,
	    down,
	    between,
	    only,
	    unit
	  }, other);
	}

	const shape = {
	  borderRadius: 4
	};
	var shape$1 = shape;

	/* tslint:enable:unified-signatures */
	function createSpacing(spacingInput = 8) {
	  // Already transformed.
	  if (spacingInput.mui) {
	    return spacingInput;
	  } // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
	  // Smaller components, such as icons, can align to a 4dp grid.
	  // https://material.io/design/layout/understanding-layout.html#usage


	  const transform = createUnarySpacing({
	    spacing: spacingInput
	  });

	  const spacing = (...argsInput) => {

	    const args = argsInput.length === 0 ? [1] : argsInput;
	    return args.map(argument => {
	      const output = transform(argument);
	      return typeof output === 'number' ? `${output}px` : output;
	    }).join(' ');
	  };

	  spacing.mui = true;
	  return spacing;
	}

	const _excluded$i = ["breakpoints", "palette", "spacing", "shape"];

	function createTheme$1(options = {}, ...args) {
	  const {
	    breakpoints: breakpointsInput = {},
	    palette: paletteInput = {},
	    spacing: spacingInput,
	    shape: shapeInput = {}
	  } = options,
	        other = _objectWithoutPropertiesLoose$2(options, _excluded$i);

	  const breakpoints = createBreakpoints(breakpointsInput);
	  const spacing = createSpacing(spacingInput);
	  let muiTheme = deepmerge({
	    breakpoints,
	    direction: 'ltr',
	    components: {},
	    // Inject component definitions.
	    palette: _extends$3({
	      mode: 'light'
	    }, paletteInput),
	    spacing,
	    shape: _extends$3({}, shape$1, shapeInput)
	  }, other);
	  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
	  return muiTheme;
	}

	const ThemeContext = /*#__PURE__*/react.exports.createContext(null);

	var ThemeContext$1 = ThemeContext;

	function useTheme$2() {
	  const theme = react.exports.useContext(ThemeContext$1);

	  return theme;
	}

	const hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var nested = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

	function mergeOuterLocalTheme(outerTheme, localTheme) {
	  if (typeof localTheme === 'function') {
	    const mergedTheme = localTheme(outerTheme);

	    return mergedTheme;
	  }

	  return _extends$3({}, outerTheme, localTheme);
	}
	/**
	 * This component takes a `theme` prop.
	 * It makes the `theme` available down the React tree thanks to React context.
	 * This component should preferably be used at **the root of your component tree**.
	 */


	function ThemeProvider$1(props) {
	  const {
	    children,
	    theme: localTheme
	  } = props;
	  const outerTheme = useTheme$2();

	  const theme = react.exports.useMemo(() => {
	    const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);

	    if (output != null) {
	      output[nested] = outerTheme !== null;
	    }

	    return output;
	  }, [localTheme, outerTheme]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ThemeContext$1.Provider, {
	    value: theme,
	    children: children
	  });
	}

	function isObjectEmpty(obj) {
	  return Object.keys(obj).length === 0;
	}

	function useTheme$1(defaultTheme = null) {
	  const contextTheme = useTheme$2();
	  return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
	}

	const systemDefaultTheme$1 = createTheme$1();

	function useTheme(defaultTheme = systemDefaultTheme$1) {
	  return useTheme$1(defaultTheme);
	}

	const _excluded$h = ["className", "component"];
	function createBox(options = {}) {
	  const {
	    defaultTheme
	  } = options;
	  const BoxRoot = styled$2('div')(styleFunctionSx);
	  const Box = /*#__PURE__*/react.exports.forwardRef(function Box(inProps, ref) {
	    const theme = useTheme(defaultTheme);

	    const _extendSxProp = extendSxProp(inProps),
	          {
	      className,
	      component = 'div'
	    } = _extendSxProp,
	          other = _objectWithoutPropertiesLoose$2(_extendSxProp, _excluded$h);

	    return /*#__PURE__*/jsxRuntime.exports.jsx(BoxRoot, _extends$3({
	      as: component,
	      ref: ref,
	      className: clsx(className, 'MuiBox-root'),
	      theme: theme
	    }, other));
	  });
	  return Box;
	}

	const Box = createBox();
	var Box$1 = Box;

	const _excluded$g = ["variant"];

	function isEmpty$1(string) {
	  return string.length === 0;
	}
	/**
	 * Generates string classKey based on the properties provided. It starts with the
	 * variant if defined, and then it appends all other properties in alphabetical order.
	 * @param {object} props - the properties for which the classKey should be created.
	 */


	function propsToClassKey(props) {
	  const {
	    variant
	  } = props,
	        other = _objectWithoutPropertiesLoose$2(props, _excluded$g);

	  let classKey = variant || '';
	  Object.keys(other).sort().forEach(key => {
	    if (key === 'color') {
	      classKey += isEmpty$1(classKey) ? props[key] : capitalize(props[key]);
	    } else {
	      classKey += `${isEmpty$1(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
	    }
	  });
	  return classKey;
	}

	const _excluded$f = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"],
	      _excluded2 = ["theme"],
	      _excluded3 = ["theme"];

	function isEmpty(obj) {
	  return Object.keys(obj).length === 0;
	}

	const getStyleOverrides = (name, theme) => {
	  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
	    return theme.components[name].styleOverrides;
	  }

	  return null;
	};

	const getVariantStyles = (name, theme) => {
	  let variants = [];

	  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
	    variants = theme.components[name].variants;
	  }

	  const variantsStyles = {};
	  variants.forEach(definition => {
	    const key = propsToClassKey(definition.props);
	    variantsStyles[key] = definition.style;
	  });
	  return variantsStyles;
	};

	const variantsResolver = (props, styles, theme, name) => {
	  var _theme$components, _theme$components$nam;

	  const {
	    ownerState = {}
	  } = props;
	  const variantsStyles = [];
	  const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;

	  if (themeVariants) {
	    themeVariants.forEach(themeVariant => {
	      let isMatch = true;
	      Object.keys(themeVariant.props).forEach(key => {
	        if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
	          isMatch = false;
	        }
	      });

	      if (isMatch) {
	        variantsStyles.push(styles[propsToClassKey(themeVariant.props)]);
	      }
	    });
	  }

	  return variantsStyles;
	};

	function shouldForwardProp(prop) {
	  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
	}
	const systemDefaultTheme = createTheme$1();

	function createStyled(input = {}) {
	  const {
	    defaultTheme = systemDefaultTheme,
	    rootShouldForwardProp = shouldForwardProp,
	    slotShouldForwardProp = shouldForwardProp
	  } = input;
	  return (tag, inputOptions = {}) => {
	    const {
	      name: componentName,
	      slot: componentSlot,
	      skipVariantsResolver: inputSkipVariantsResolver,
	      skipSx: inputSkipSx,
	      overridesResolver
	    } = inputOptions,
	          options = _objectWithoutPropertiesLoose$2(inputOptions, _excluded$f); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.


	    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;
	    const skipSx = inputSkipSx || false;
	    let label;

	    let shouldForwardPropOption = shouldForwardProp;

	    if (componentSlot === 'Root') {
	      shouldForwardPropOption = rootShouldForwardProp;
	    } else if (componentSlot) {
	      // any other slot specified
	      shouldForwardPropOption = slotShouldForwardProp;
	    }

	    const defaultStyledResolver = styled$2(tag, _extends$3({
	      shouldForwardProp: shouldForwardPropOption,
	      label
	    }, options));

	    const muiStyledResolver = (styleArg, ...expressions) => {
	      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
	        return typeof stylesArg === 'function' ? _ref => {
	          let {
	            theme: themeInput
	          } = _ref,
	              other = _objectWithoutPropertiesLoose$2(_ref, _excluded2);

	          return stylesArg(_extends$3({
	            theme: isEmpty(themeInput) ? defaultTheme : themeInput
	          }, other));
	        } : stylesArg;
	      }) : [];
	      let transformedStyleArg = styleArg;

	      if (componentName && overridesResolver) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
	          const styleOverrides = getStyleOverrides(componentName, theme);

	          if (styleOverrides) {
	            return overridesResolver(props, styleOverrides);
	          }

	          return null;
	        });
	      }

	      if (componentName && !skipVariantsResolver) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
	          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
	        });
	      }

	      if (!skipSx) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
	          return styleFunctionSx(_extends$3({}, props, {
	            theme
	          }));
	        });
	      }

	      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;

	      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
	        const placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.

	        transformedStyleArg = [...styleArg, ...placeholders];
	        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
	      } else if (typeof styleArg === 'function') {
	        // If the type is function, we need to define the default theme.
	        transformedStyleArg = _ref2 => {
	          let {
	            theme: themeInput
	          } = _ref2,
	              other = _objectWithoutPropertiesLoose$2(_ref2, _excluded3);

	          return styleArg(_extends$3({
	            theme: isEmpty(themeInput) ? defaultTheme : themeInput
	          }, other));
	        };
	      }

	      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);

	      return Component;
	    };

	    return muiStyledResolver;
	  };
	}

	/* eslint-disable no-restricted-syntax */
	function getThemeProps(params) {
	  const {
	    theme,
	    name,
	    props
	  } = params;

	  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
	    return props;
	  }

	  const output = _extends$3({}, props); // Resolve default props, code borrow from React source.
	  // https://github.com/facebook/react/blob/15a8f031838a553e41c0b66eb1bcf1da8448104d/packages/react/src/ReactElement.js#L221


	  const defaultProps = theme.components[name].defaultProps;
	  let propName;

	  for (propName in defaultProps) {
	    if (output[propName] === undefined) {
	      output[propName] = defaultProps[propName];
	    }
	  }

	  return output;
	}

	function useThemeProps$1({
	  props,
	  name,
	  defaultTheme
	}) {
	  const theme = useTheme(defaultTheme);
	  const mergedProps = getThemeProps({
	    theme,
	    name,
	    props
	  });
	  return mergedProps;
	}

	/**
	 * Returns a number whose value is limited to the given range.
	 * @param {number} value The value to be clamped
	 * @param {number} min The lower boundary of the output range
	 * @param {number} max The upper boundary of the output range
	 * @returns {number} A number in the range [min, max]
	 */
	function clamp(value, min = 0, max = 1) {

	  return Math.min(Math.max(min, value), max);
	}
	/**
	 * Converts a color from CSS hex format to CSS rgb format.
	 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
	 * @returns {string} A CSS rgb color string
	 */


	function hexToRgb(color) {
	  color = color.substr(1);
	  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
	  let colors = color.match(re);

	  if (colors && colors[0].length === 1) {
	    colors = colors.map(n => n + n);
	  }

	  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', ')})` : '';
	}
	/**
	 * Returns an object with the type and values of a color.
	 *
	 * Note: Does not support rgb % values.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {object} - A MUI color object: {type: string, values: number[]}
	 */


	function decomposeColor(color) {
	  // Idempotent
	  if (color.type) {
	    return color;
	  }

	  if (color.charAt(0) === '#') {
	    return decomposeColor(hexToRgb(color));
	  }

	  const marker = color.indexOf('(');
	  const type = color.substring(0, marker);

	  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
	    throw new Error(formatMuiErrorMessage(9, color));
	  }

	  let values = color.substring(marker + 1, color.length - 1);
	  let colorSpace;

	  if (type === 'color') {
	    values = values.split(' ');
	    colorSpace = values.shift();

	    if (values.length === 4 && values[3].charAt(0) === '/') {
	      values[3] = values[3].substr(1);
	    }

	    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
	      throw new Error(formatMuiErrorMessage(10, colorSpace));
	    }
	  } else {
	    values = values.split(',');
	  }

	  values = values.map(value => parseFloat(value));
	  return {
	    type,
	    values,
	    colorSpace
	  };
	}
	/**
	 * Converts a color object with type and values to a string.
	 * @param {object} color - Decomposed color
	 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
	 * @param {array} color.values - [n,n,n] or [n,n,n,n]
	 * @returns {string} A CSS color string
	 */

	function recomposeColor(color) {
	  const {
	    type,
	    colorSpace
	  } = color;
	  let {
	    values
	  } = color;

	  if (type.indexOf('rgb') !== -1) {
	    // Only convert the first 3 values to int (i.e. not alpha)
	    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
	  } else if (type.indexOf('hsl') !== -1) {
	    values[1] = `${values[1]}%`;
	    values[2] = `${values[2]}%`;
	  }

	  if (type.indexOf('color') !== -1) {
	    values = `${colorSpace} ${values.join(' ')}`;
	  } else {
	    values = `${values.join(', ')}`;
	  }

	  return `${type}(${values})`;
	}
	/**
	 * Converts a color from hsl format to rgb format.
	 * @param {string} color - HSL color values
	 * @returns {string} rgb color values
	 */

	function hslToRgb$1(color) {
	  color = decomposeColor(color);
	  const {
	    values
	  } = color;
	  const h = values[0];
	  const s = values[1] / 100;
	  const l = values[2] / 100;
	  const a = s * Math.min(l, 1 - l);

	  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);

	  let type = 'rgb';
	  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];

	  if (color.type === 'hsla') {
	    type += 'a';
	    rgb.push(values[3]);
	  }

	  return recomposeColor({
	    type,
	    values: rgb
	  });
	}
	/**
	 * The relative brightness of any point in a color space,
	 * normalized to 0 for darkest black and 1 for lightest white.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @returns {number} The relative brightness of the color in the range 0 - 1
	 */

	function getLuminance(color) {
	  color = decomposeColor(color);
	  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb$1(color)).values : color.values;
	  rgb = rgb.map(val => {
	    if (color.type !== 'color') {
	      val /= 255; // normalized
	    }

	    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
	  }); // Truncate at 3 digits

	  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
	}
	/**
	 * Calculates the contrast ratio between two colors.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} A contrast ratio value in the range 0 - 21.
	 */

	function getContrastRatio(foreground, background) {
	  const lumA = getLuminance(foreground);
	  const lumB = getLuminance(background);
	  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
	}
	/**
	 * Sets the absolute transparency of a color.
	 * Any existing alpha values are overwritten.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} value - value to set the alpha channel to in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */

	function alpha(color, value) {
	  color = decomposeColor(color);
	  value = clamp(value);

	  if (color.type === 'rgb' || color.type === 'hsl') {
	    color.type += 'a';
	  }

	  if (color.type === 'color') {
	    color.values[3] = `/${value}`;
	  } else {
	    color.values[3] = value;
	  }

	  return recomposeColor(color);
	}
	/**
	 * Darkens a color.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */

	function darken(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp(coefficient);

	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] *= 1 - coefficient;
	  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] *= 1 - coefficient;
	    }
	  }

	  return recomposeColor(color);
	}
	/**
	 * Lightens a color.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */

	function lighten(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp(coefficient);

	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] += (100 - color.values[2]) * coefficient;
	  } else if (color.type.indexOf('rgb') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] += (255 - color.values[i]) * coefficient;
	    }
	  } else if (color.type.indexOf('color') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] += (1 - color.values[i]) * coefficient;
	    }
	  }

	  return recomposeColor(color);
	}

	function InnerThemeProvider(props) {
	  const theme = useTheme();
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ThemeContext$2.Provider, {
	    value: typeof theme === 'object' ? theme : {},
	    children: props.children
	  });
	}
	/**
	 * This component makes the `theme` available down the React tree.
	 * It should preferably be used at **the root of your component tree**.
	 */

	function ThemeProvider(props) {
	  const {
	    children,
	    theme: localTheme
	  } = props;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ThemeProvider$1, {
	    theme: localTheme,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(InnerThemeProvider, {
	      children: children
	    })
	  });
	}

	function composeClasses(slots, getUtilityClass, classes) {
	  const output = {};
	  Object.keys(slots).forEach( // `Objet.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
	  // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
	  slot => {
	    output[slot] = slots[slot].reduce((acc, key) => {
	      if (key) {
	        if (classes && classes[key]) {
	          acc.push(classes[key]);
	        }

	        acc.push(getUtilityClass(key));
	      }

	      return acc;
	    }, []).join(' ');
	  });
	  return output;
	}

	const globalStateClassesMapping = {
	  active: 'Mui-active',
	  checked: 'Mui-checked',
	  completed: 'Mui-completed',
	  disabled: 'Mui-disabled',
	  error: 'Mui-error',
	  expanded: 'Mui-expanded',
	  focused: 'Mui-focused',
	  focusVisible: 'Mui-focusVisible',
	  required: 'Mui-required',
	  selected: 'Mui-selected'
	};
	function generateUtilityClass(componentName, slot) {
	  const globalStateClass = globalStateClassesMapping[slot];
	  return globalStateClass || `${componentName}-${slot}`;
	}

	function generateUtilityClasses(componentName, slots) {
	  const result = {};
	  slots.forEach(slot => {
	    result[slot] = generateUtilityClass(componentName, slot);
	  });
	  return result;
	}

	/**
	 * Extracts event handlers from a given object.
	 * A prop is considered an event handler if it is a function and its name starts with `on`.
	 *
	 * @param object An object to extract event handlers from.
	 */
	function extractEventHandlers(object) {
	  if (object === undefined) {
	    return {};
	  }

	  const result = {};
	  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function').forEach(prop => {
	    result[prop] = object[prop];
	  });
	  return result;
	}

	function useButton(props) {
	  var _ref;

	  const {
	    component,
	    components = {},
	    disabled = false,
	    href,
	    ref,
	    tabIndex = 0,
	    to,
	    type
	  } = props;
	  const buttonRef = react.exports.useRef();
	  const [active, setActive] = react.exports.useState(false);
	  const {
	    isFocusVisibleRef,
	    onFocus: handleFocusVisible,
	    onBlur: handleBlurVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible();
	  const [focusVisible, setFocusVisible] = react.exports.useState(false);

	  if (disabled && focusVisible) {
	    setFocusVisible(false);
	  }

	  react.exports.useEffect(() => {
	    isFocusVisibleRef.current = focusVisible;
	  }, [focusVisible, isFocusVisibleRef]);

	  const handleMouseLeave = otherHandlers => event => {
	    var _otherHandlers$onMous;

	    if (focusVisible) {
	      event.preventDefault();
	    }

	    (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
	  };

	  const handleBlur = otherHandlers => event => {
	    var _otherHandlers$onBlur;

	    handleBlurVisible(event);

	    if (isFocusVisibleRef.current === false) {
	      setFocusVisible(false);
	    }

	    (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
	  };

	  const handleFocus = useEventCallback(otherHandlers => event => {
	    var _otherHandlers$onFocu2;

	    // Fix for https://github.com/facebook/react/issues/7769
	    if (!buttonRef.current) {
	      buttonRef.current = event.currentTarget;
	    }

	    handleFocusVisible(event);

	    if (isFocusVisibleRef.current === true) {
	      var _otherHandlers$onFocu;

	      setFocusVisible(true);
	      (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
	    }

	    (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu2.call(otherHandlers, event);
	  });
	  const elementType = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';

	  const isNonNativeButton = () => {
	    const button = buttonRef.current;
	    return elementType !== 'button' && !((button == null ? void 0 : button.tagName) === 'A' && button != null && button.href);
	  };

	  const handleMouseDown = otherHandlers => event => {
	    var _otherHandlers$onMous2;

	    if (event.target === event.currentTarget && !disabled) {
	      setActive(true);
	    }

	    (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
	  };

	  const handleMouseUp = otherHandlers => event => {
	    var _otherHandlers$onMous3;

	    if (event.target === event.currentTarget) {
	      setActive(false);
	    }

	    (_otherHandlers$onMous3 = otherHandlers.onMouseUp) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
	  };

	  const handleKeyDown = useEventCallback(otherHandlers => event => {
	    var _otherHandlers$onKeyD;

	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
	      event.preventDefault();
	    }

	    if (event.target === event.currentTarget && event.key === ' ' && !disabled) {
	      setActive(true);
	    }

	    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event); // Keyboard accessibility for non interactive elements

	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
	      var _otherHandlers$onClic;

	      event.preventDefault();
	      (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
	    }
	  });
	  const handleKeyUp = useEventCallback(otherHandlers => event => {
	    var _otherHandlers$onKeyU;

	    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
	    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
	    if (event.target === event.currentTarget) {
	      setActive(false);
	    }

	    (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event); // Keyboard accessibility for non interactive elements

	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
	      var _otherHandlers$onClic2;

	      (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);
	    }
	  });
	  const buttonProps = {};

	  if (elementType === 'button') {
	    buttonProps.type = type != null ? type : 'button';
	    buttonProps.disabled = disabled;
	  } else {
	    if (!href && !to) {
	      buttonProps.role = 'button';
	    }

	    if (disabled) {
	      buttonProps['aria-disabled'] = disabled;
	    }
	  }

	  const handleOwnRef = useForkRef(focusVisibleRef, buttonRef);
	  const handleRef = useForkRef(ref, handleOwnRef);

	  const getRootProps = otherHandlers => {
	    const propsEventHandlers = extractEventHandlers(props);

	    const externalEventHandlers = _extends$3({}, propsEventHandlers, otherHandlers);

	    const ownEventHandlers = {
	      onBlur: handleBlur(externalEventHandlers),
	      onFocus: handleFocus(externalEventHandlers),
	      onKeyDown: handleKeyDown(externalEventHandlers),
	      onKeyUp: handleKeyUp(externalEventHandlers),
	      onMouseDown: handleMouseDown(externalEventHandlers),
	      onMouseLeave: handleMouseLeave(externalEventHandlers),
	      onMouseUp: handleMouseUp(externalEventHandlers)
	    };

	    const mergedEventHandlers = _extends$3({}, externalEventHandlers, ownEventHandlers); // onFocusVisible can be present on the props, but since it's not a valid React event handler,
	    // it must not be forwarded to the inner component.


	    delete mergedEventHandlers.onFocusVisible;
	    return _extends$3({
	      tabIndex: disabled ? -1 : tabIndex,
	      type,
	      ref: handleRef
	    }, buttonProps, mergedEventHandlers);
	  };

	  return {
	    getRootProps,
	    focusVisible,
	    setFocusVisible,
	    disabled,
	    active
	  };
	}

	function createMixins(breakpoints, spacing, mixins) {
	  return _extends$3({
	    toolbar: {
	      minHeight: 56,
	      [`${breakpoints.up('xs')} and (orientation: landscape)`]: {
	        minHeight: 48
	      },
	      [breakpoints.up('sm')]: {
	        minHeight: 64
	      }
	    }
	  }, mixins);
	}

	const _excluded$e = ["mode", "contrastThreshold", "tonalOffset"];
	const light = {
	  // The colors used to style the text.
	  text: {
	    // The most important text.
	    primary: 'rgba(0, 0, 0, 0.87)',
	    // Secondary text.
	    secondary: 'rgba(0, 0, 0, 0.6)',
	    // Disabled text have even lower visual prominence.
	    disabled: 'rgba(0, 0, 0, 0.38)'
	  },
	  // The color used to divide different elements.
	  divider: 'rgba(0, 0, 0, 0.12)',
	  // The background colors used to style the surfaces.
	  // Consistency between these values is important.
	  background: {
	    paper: common$1.white,
	    default: common$1.white
	  },
	  // The colors used to style the action elements.
	  action: {
	    // The color of an active action like an icon button.
	    active: 'rgba(0, 0, 0, 0.54)',
	    // The color of an hovered action.
	    hover: 'rgba(0, 0, 0, 0.04)',
	    hoverOpacity: 0.04,
	    // The color of a selected action.
	    selected: 'rgba(0, 0, 0, 0.08)',
	    selectedOpacity: 0.08,
	    // The color of a disabled action.
	    disabled: 'rgba(0, 0, 0, 0.26)',
	    // The background color of a disabled action.
	    disabledBackground: 'rgba(0, 0, 0, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(0, 0, 0, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.12
	  }
	};
	const dark = {
	  text: {
	    primary: common$1.white,
	    secondary: 'rgba(255, 255, 255, 0.7)',
	    disabled: 'rgba(255, 255, 255, 0.5)',
	    icon: 'rgba(255, 255, 255, 0.5)'
	  },
	  divider: 'rgba(255, 255, 255, 0.12)',
	  background: {
	    paper: '#121212',
	    default: '#121212'
	  },
	  action: {
	    active: common$1.white,
	    hover: 'rgba(255, 255, 255, 0.08)',
	    hoverOpacity: 0.08,
	    selected: 'rgba(255, 255, 255, 0.16)',
	    selectedOpacity: 0.16,
	    disabled: 'rgba(255, 255, 255, 0.3)',
	    disabledBackground: 'rgba(255, 255, 255, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(255, 255, 255, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.24
	  }
	};

	function addLightOrDark(intent, direction, shade, tonalOffset) {
	  const tonalOffsetLight = tonalOffset.light || tonalOffset;
	  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;

	  if (!intent[direction]) {
	    if (intent.hasOwnProperty(shade)) {
	      intent[direction] = intent[shade];
	    } else if (direction === 'light') {
	      intent.light = lighten(intent.main, tonalOffsetLight);
	    } else if (direction === 'dark') {
	      intent.dark = darken(intent.main, tonalOffsetDark);
	    }
	  }
	}

	function getDefaultPrimary(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: blue$1[200],
	      light: blue$1[50],
	      dark: blue$1[400]
	    };
	  }

	  return {
	    main: blue$1[700],
	    light: blue$1[400],
	    dark: blue$1[800]
	  };
	}

	function getDefaultSecondary(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: purple$1[200],
	      light: purple$1[50],
	      dark: purple$1[400]
	    };
	  }

	  return {
	    main: purple$1[500],
	    light: purple$1[300],
	    dark: purple$1[700]
	  };
	}

	function getDefaultError(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: red$1[500],
	      light: red$1[300],
	      dark: red$1[700]
	    };
	  }

	  return {
	    main: red$1[700],
	    light: red$1[400],
	    dark: red$1[800]
	  };
	}

	function getDefaultInfo(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: lightBlue$1[400],
	      light: lightBlue$1[300],
	      dark: lightBlue$1[700]
	    };
	  }

	  return {
	    main: lightBlue$1[700],
	    light: lightBlue$1[500],
	    dark: lightBlue$1[900]
	  };
	}

	function getDefaultSuccess(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: green$1[400],
	      light: green$1[300],
	      dark: green$1[700]
	    };
	  }

	  return {
	    main: green$1[800],
	    light: green$1[500],
	    dark: green$1[900]
	  };
	}

	function getDefaultWarning(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: orange$1[400],
	      light: orange$1[300],
	      dark: orange$1[700]
	    };
	  }

	  return {
	    main: '#ED6C02',
	    // closest to orange[800] that pass 3:1.
	    light: orange$1[500],
	    dark: orange$1[900]
	  };
	}

	function createPalette(palette) {
	  const {
	    mode = 'light',
	    contrastThreshold = 3,
	    tonalOffset = 0.2
	  } = palette,
	        other = _objectWithoutPropertiesLoose$2(palette, _excluded$e);

	  const primary = palette.primary || getDefaultPrimary(mode);
	  const secondary = palette.secondary || getDefaultSecondary(mode);
	  const error = palette.error || getDefaultError(mode);
	  const info = palette.info || getDefaultInfo(mode);
	  const success = palette.success || getDefaultSuccess(mode);
	  const warning = palette.warning || getDefaultWarning(mode); // Use the same logic as
	  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
	  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54

	  function getContrastText(background) {
	    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;

	    return contrastText;
	  }

	  const augmentColor = ({
	    color,
	    name,
	    mainShade = 500,
	    lightShade = 300,
	    darkShade = 700
	  }) => {
	    color = _extends$3({}, color);

	    if (!color.main && color[mainShade]) {
	      color.main = color[mainShade];
	    }

	    if (!color.hasOwnProperty('main')) {
	      throw new Error(formatMuiErrorMessage(11, name ? ` (${name})` : '', mainShade));
	    }

	    if (typeof color.main !== 'string') {
	      throw new Error(formatMuiErrorMessage(12, name ? ` (${name})` : '', JSON.stringify(color.main)));
	    }

	    addLightOrDark(color, 'light', lightShade, tonalOffset);
	    addLightOrDark(color, 'dark', darkShade, tonalOffset);

	    if (!color.contrastText) {
	      color.contrastText = getContrastText(color.main);
	    }

	    return color;
	  };

	  const modes = {
	    dark,
	    light
	  };

	  const paletteOutput = deepmerge(_extends$3({
	    // A collection of common colors.
	    common: common$1,
	    // The palette mode, can be light or dark.
	    mode,
	    // The colors used to represent primary interface elements for a user.
	    primary: augmentColor({
	      color: primary,
	      name: 'primary'
	    }),
	    // The colors used to represent secondary interface elements for a user.
	    secondary: augmentColor({
	      color: secondary,
	      name: 'secondary',
	      mainShade: 'A400',
	      lightShade: 'A200',
	      darkShade: 'A700'
	    }),
	    // The colors used to represent interface elements that the user should be made aware of.
	    error: augmentColor({
	      color: error,
	      name: 'error'
	    }),
	    // The colors used to represent potentially dangerous actions or important messages.
	    warning: augmentColor({
	      color: warning,
	      name: 'warning'
	    }),
	    // The colors used to present information to the user that is neutral and not necessarily important.
	    info: augmentColor({
	      color: info,
	      name: 'info'
	    }),
	    // The colors used to indicate the successful completion of an action that user triggered.
	    success: augmentColor({
	      color: success,
	      name: 'success'
	    }),
	    // The grey colors.
	    grey: grey$1,
	    // Used by `getContrastText()` to maximize the contrast between
	    // the background and the text.
	    contrastThreshold,
	    // Takes a background color and returns the text color that maximizes the contrast.
	    getContrastText,
	    // Generate a rich color object.
	    augmentColor,
	    // Used by the functions below to shift a color's luminance by approximately
	    // two indexes within its tonal palette.
	    // E.g., shift from Red 500 to Red 300 or Red 700.
	    tonalOffset
	  }, modes[mode]), other);
	  return paletteOutput;
	}

	const _excluded$d = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];

	function round(value) {
	  return Math.round(value * 1e5) / 1e5;
	}

	const caseAllCaps = {
	  textTransform: 'uppercase'
	};
	const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
	/**
	 * @see @link{https://material.io/design/typography/the-type-system.html}
	 * @see @link{https://material.io/design/typography/understanding-typography.html}
	 */

	function createTypography(palette, typography) {
	  const _ref = typeof typography === 'function' ? typography(palette) : typography,
	        {
	    fontFamily = defaultFontFamily,
	    // The default font size of the Material Specification.
	    fontSize = 14,
	    // px
	    fontWeightLight = 300,
	    fontWeightRegular = 400,
	    fontWeightMedium = 500,
	    fontWeightBold = 700,
	    // Tell Material-UI what's the font-size on the html element.
	    // 16px is the default font-size used by browsers.
	    htmlFontSize = 16,
	    // Apply the CSS properties to all the variants.
	    allVariants,
	    pxToRem: pxToRem2
	  } = _ref,
	        other = _objectWithoutPropertiesLoose$2(_ref, _excluded$d);

	  const coef = fontSize / 14;

	  const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);

	  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends$3({
	    fontFamily,
	    fontWeight,
	    fontSize: pxToRem(size),
	    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
	    lineHeight
	  }, fontFamily === defaultFontFamily ? {
	    letterSpacing: `${round(letterSpacing / size)}em`
	  } : {}, casing, allVariants);

	  const variants = {
	    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
	    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
	    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
	    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
	    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
	    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
	    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
	    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
	    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
	    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
	    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
	    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
	    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
	  };
	  return deepmerge(_extends$3({
	    htmlFontSize,
	    pxToRem,
	    fontFamily,
	    fontSize,
	    fontWeightLight,
	    fontWeightRegular,
	    fontWeightMedium,
	    fontWeightBold
	  }, variants), other, {
	    clone: false // No need to clone deep

	  });
	}

	const shadowKeyUmbraOpacity = 0.2;
	const shadowKeyPenumbraOpacity = 0.14;
	const shadowAmbientShadowOpacity = 0.12;

	function createShadow(...px) {
	  return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(',');
	} // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss


	const shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
	var shadows$1 = shadows;

	const _excluded$c = ["duration", "easing", "delay"];
	// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
	// to learn the context in which each easing should be used.
	const easing = {
	  // This is the most common easing curve.
	  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
	  // Objects enter the screen at full velocity from off-screen and
	  // slowly decelerate to a resting point.
	  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
	  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
	  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
	  // The sharp curve is used by objects that may return to the screen at any time.
	  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
	}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
	// to learn when use what timing

	const duration = {
	  shortest: 150,
	  shorter: 200,
	  short: 250,
	  // most basic recommended timing
	  standard: 300,
	  // this is to be used in complex animations
	  complex: 375,
	  // recommended when something is entering screen
	  enteringScreen: 225,
	  // recommended when something is leaving screen
	  leavingScreen: 195
	};

	function formatMs(milliseconds) {
	  return `${Math.round(milliseconds)}ms`;
	}

	function getAutoHeightDuration(height) {
	  if (!height) {
	    return 0;
	  }

	  const constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10

	  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
	}

	function createTransitions(inputTransitions) {
	  const mergedEasing = _extends$3({}, easing, inputTransitions.easing);

	  const mergedDuration = _extends$3({}, duration, inputTransitions.duration);

	  const create = (props = ['all'], options = {}) => {
	    const {
	      duration: durationOption = mergedDuration.standard,
	      easing: easingOption = mergedEasing.easeInOut,
	      delay = 0
	    } = options;
	          _objectWithoutPropertiesLoose$2(options, _excluded$c);

	    return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
	  };

	  return _extends$3({
	    getAutoHeightDuration,
	    create
	  }, inputTransitions, {
	    easing: mergedEasing,
	    duration: mergedDuration
	  });
	}

	// We need to centralize the zIndex definitions as they work
	// like global values in the browser.
	const zIndex = {
	  mobileStepper: 1000,
	  speedDial: 1050,
	  appBar: 1100,
	  drawer: 1200,
	  modal: 1300,
	  snackbar: 1400,
	  tooltip: 1500
	};
	var zIndex$1 = zIndex;

	const _excluded$b = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];

	function createTheme(options = {}, ...args) {
	  const {
	    mixins: mixinsInput = {},
	    palette: paletteInput = {},
	    transitions: transitionsInput = {},
	    typography: typographyInput = {}
	  } = options,
	        other = _objectWithoutPropertiesLoose$2(options, _excluded$b);

	  const palette = createPalette(paletteInput);
	  const systemTheme = createTheme$1(options);
	  let muiTheme = deepmerge(systemTheme, {
	    mixins: createMixins(systemTheme.breakpoints, systemTheme.spacing, mixinsInput),
	    palette,
	    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
	    shadows: shadows$1.slice(),
	    typography: createTypography(palette, typographyInput),
	    transitions: createTransitions(transitionsInput),
	    zIndex: _extends$3({}, zIndex$1)
	  });
	  muiTheme = deepmerge(muiTheme, other);
	  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);

	  return muiTheme;
	}

	const defaultTheme = createTheme();
	var defaultTheme$1 = defaultTheme;

	function useThemeProps({
	  props,
	  name
	}) {
	  return useThemeProps$1({
	    props,
	    name,
	    defaultTheme: defaultTheme$1
	  });
	}

	const rootShouldForwardProp = prop => shouldForwardProp(prop) && prop !== 'classes';
	const styled = createStyled({
	  defaultTheme: defaultTheme$1,
	  rootShouldForwardProp
	});
	var styled$1 = styled;

	function getSvgIconUtilityClass(slot) {
	  return generateUtilityClass('MuiSvgIcon', slot);
	}
	generateUtilityClasses('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);

	const _excluded$a = ["children", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"];

	const useUtilityClasses$9 = ownerState => {
	  const {
	    color,
	    fontSize,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]
	  };
	  return composeClasses(slots, getSvgIconUtilityClass, classes);
	};

	const SvgIconRoot = styled$1('svg', {
	  name: 'MuiSvgIcon',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$palette$ownerS, _theme$palette$ownerS2;

	  return {
	    userSelect: 'none',
	    width: '1em',
	    height: '1em',
	    display: 'inline-block',
	    fill: 'currentColor',
	    flexShrink: 0,
	    transition: theme.transitions.create('fill', {
	      duration: theme.transitions.duration.shorter
	    }),
	    fontSize: {
	      inherit: 'inherit',
	      small: theme.typography.pxToRem(20),
	      medium: theme.typography.pxToRem(24),
	      large: theme.typography.pxToRem(35)
	    }[ownerState.fontSize],
	    // TODO v5 deprecate, v6 remove for sx
	    color: (_theme$palette$ownerS = (_theme$palette$ownerS2 = theme.palette[ownerState.color]) == null ? void 0 : _theme$palette$ownerS2.main) != null ? _theme$palette$ownerS : {
	      action: theme.palette.action.active,
	      disabled: theme.palette.action.disabled,
	      inherit: undefined
	    }[ownerState.color]
	  };
	});
	const SvgIcon = /*#__PURE__*/react.exports.forwardRef(function SvgIcon(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSvgIcon'
	  });

	  const {
	    children,
	    className,
	    color = 'inherit',
	    component = 'svg',
	    fontSize = 'medium',
	    htmlColor,
	    titleAccess,
	    viewBox = '0 0 24 24'
	  } = props,
	        other = _objectWithoutPropertiesLoose$2(props, _excluded$a);

	  const ownerState = _extends$3({}, props, {
	    color,
	    component,
	    fontSize,
	    viewBox
	  });

	  const classes = useUtilityClasses$9(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(SvgIconRoot, _extends$3({
	    as: component,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    focusable: "false",
	    viewBox: viewBox,
	    color: htmlColor,
	    "aria-hidden": titleAccess ? undefined : true,
	    role: titleAccess ? 'img' : undefined,
	    ref: ref
	  }, other, {
	    children: [children, titleAccess ? /*#__PURE__*/jsxRuntime.exports.jsx("title", {
	      children: titleAccess
	    }) : null]
	  }));
	});
	SvgIcon.muiName = 'SvgIcon';
	var SvgIcon$1 = SvgIcon;

	function createSvgIcon$1(path, displayName) {
	  const Component = (props, ref) => /*#__PURE__*/jsxRuntime.exports.jsx(SvgIcon$1, _extends$3({
	    "data-testid": `${displayName}Icon`,
	    ref: ref
	  }, props, {
	    children: path
	  }));

	  Component.muiName = SvgIcon$1.muiName;
	  return /*#__PURE__*/react.exports.memo( /*#__PURE__*/react.exports.forwardRef(Component));
	}

	var utils = /*#__PURE__*/Object.freeze({
		__proto__: null,
		capitalize: capitalize,
		createChainedFunction: createChainedFunction,
		createSvgIcon: createSvgIcon$1,
		debounce: debounce,
		deprecatedPropType: deprecatedPropType,
		isMuiElement: isMuiElement,
		ownerDocument: ownerDocument,
		ownerWindow: ownerWindow,
		requirePropFactory: requirePropFactory,
		setRef: setRef,
		unstable_useEnhancedEffect: useEnhancedEffect$1,
		unstable_useId: useId,
		unsupportedProp: unsupportedProp,
		useControlled: useControlled,
		useEventCallback: useEventCallback,
		useForkRef: useForkRef,
		useIsFocusVisible: useIsFocusVisible
	});

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _inheritsLoose$1(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  _setPrototypeOf(subClass, superClass);
	}

	var TransitionGroupContext = React$1.createContext(null);

	function _assertThisInitialized$1(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */

	function getChildMapping(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && react.exports.isValidElement(child) ? mapFn(child) : child;
	  };

	  var result = Object.create(null);
	  if (children) react.exports.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */

	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  } // For each key of `next`, the list of keys to insert before that key in
	  // the combined list


	  var nextKeysPending = Object.create(null);
	  var pendingKeys = [];

	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i;
	  var childMapping = {};

	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }

	    childMapping[nextKey] = getValueForKey(nextKey);
	  } // Finally, add the keys which didn't appear before any key in `next`


	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}

	function getProp(child, prop, props) {
	  return props[prop] != null ? props[prop] : child.props[prop];
	}

	function getInitialChildMapping(props, onExited) {
	  return getChildMapping(props.children, function (child) {
	    return react.exports.cloneElement(child, {
	      onExited: onExited.bind(null, child),
	      in: true,
	      appear: getProp(child, 'appear', props),
	      enter: getProp(child, 'enter', props),
	      exit: getProp(child, 'exit', props)
	    });
	  });
	}
	function getNextChildMapping(nextProps, prevChildMapping, onExited) {
	  var nextChildMapping = getChildMapping(nextProps.children);
	  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
	  Object.keys(children).forEach(function (key) {
	    var child = children[key];
	    if (!react.exports.isValidElement(child)) return;
	    var hasPrev = (key in prevChildMapping);
	    var hasNext = (key in nextChildMapping);
	    var prevChild = prevChildMapping[key];
	    var isLeaving = react.exports.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

	    if (hasNext && (!hasPrev || isLeaving)) {
	      // console.log('entering', key)
	      children[key] = react.exports.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: true,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    } else if (!hasNext && hasPrev && !isLeaving) {
	      // item is old (exiting)
	      // console.log('leaving', key)
	      children[key] = react.exports.cloneElement(child, {
	        in: false
	      });
	    } else if (hasNext && hasPrev && react.exports.isValidElement(prevChild)) {
	      // item hasn't changed transition states
	      // copy over the last transition props;
	      // console.log('unchanged', key)
	      children[key] = react.exports.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: prevChild.props.in,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    }
	  });
	  return children;
	}

	var values = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};

	var defaultProps = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};
	/**
	 * The `<TransitionGroup>` component manages a set of transition components
	 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
	 * components, `<TransitionGroup>` is a state machine for managing the mounting
	 * and unmounting of components over time.
	 *
	 * Consider the example below. As items are removed or added to the TodoList the
	 * `in` prop is toggled automatically by the `<TransitionGroup>`.
	 *
	 * Note that `<TransitionGroup>`  does not define any animation behavior!
	 * Exactly _how_ a list item animates is up to the individual transition
	 * component. This means you can mix and match animations across different list
	 * items.
	 */

	var TransitionGroup = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose$1(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;

	    var handleExited = _this.handleExited.bind(_assertThisInitialized$1(_this)); // Initial children should all be entering, dependent on appear


	    _this.state = {
	      contextValue: {
	        isMounting: true
	      },
	      handleExited: handleExited,
	      firstRender: true
	    };
	    return _this;
	  }

	  var _proto = TransitionGroup.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.mounted = true;
	    this.setState({
	      contextValue: {
	        isMounting: false
	      }
	    });
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };

	  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
	    var prevChildMapping = _ref.children,
	        handleExited = _ref.handleExited,
	        firstRender = _ref.firstRender;
	    return {
	      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
	      firstRender: false
	    };
	  } // node is `undefined` when user provided `nodeRef` prop
	  ;

	  _proto.handleExited = function handleExited(child, node) {
	    var currentChildMapping = getChildMapping(this.props.children);
	    if (child.key in currentChildMapping) return;

	    if (child.props.onExited) {
	      child.props.onExited(node);
	    }

	    if (this.mounted) {
	      this.setState(function (state) {
	        var children = _extends$3({}, state.children);

	        delete children[child.key];
	        return {
	          children: children
	        };
	      });
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        Component = _this$props.component,
	        childFactory = _this$props.childFactory,
	        props = _objectWithoutPropertiesLoose$2(_this$props, ["component", "childFactory"]);

	    var contextValue = this.state.contextValue;
	    var children = values(this.state.children).map(childFactory);
	    delete props.appear;
	    delete props.enter;
	    delete props.exit;

	    if (Component === null) {
	      return /*#__PURE__*/React$1.createElement(TransitionGroupContext.Provider, {
	        value: contextValue
	      }, children);
	    }

	    return /*#__PURE__*/React$1.createElement(TransitionGroupContext.Provider, {
	      value: contextValue
	    }, /*#__PURE__*/React$1.createElement(Component, props, children));
	  };

	  return TransitionGroup;
	}(React$1.Component);

	TransitionGroup.propTypes = {};
	TransitionGroup.defaultProps = defaultProps;
	var TransitionGroup$1 = TransitionGroup;

	function Ripple(props) {
	  const {
	    className,
	    classes,
	    pulsate = false,
	    rippleX,
	    rippleY,
	    rippleSize,
	    in: inProp,
	    onExited,
	    timeout
	  } = props;
	  const [leaving, setLeaving] = react.exports.useState(false);
	  const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
	  const rippleStyles = {
	    width: rippleSize,
	    height: rippleSize,
	    top: -(rippleSize / 2) + rippleY,
	    left: -(rippleSize / 2) + rippleX
	  };
	  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);

	  if (!inProp && !leaving) {
	    setLeaving(true);
	  }

	  react.exports.useEffect(() => {
	    if (!inProp && onExited != null) {
	      // react-transition-group#onExited
	      const timeoutId = setTimeout(onExited, timeout);
	      return () => {
	        clearTimeout(timeoutId);
	      };
	    }

	    return undefined;
	  }, [onExited, inProp, timeout]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	    className: rippleClassName,
	    style: rippleStyles,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	      className: childClassName
	    })
	  });
	}

	const touchRippleClasses = generateUtilityClasses('MuiTouchRipple', ['root', 'ripple', 'rippleVisible', 'ripplePulsate', 'child', 'childLeaving', 'childPulsate']);
	var touchRippleClasses$1 = touchRippleClasses;

	const _excluded$9 = ["center", "classes", "className"];

	let _$1 = t => t,
	    _t$1,
	    _t2$1,
	    _t3$1,
	    _t4$1;
	const DURATION = 550;
	const DELAY_RIPPLE = 80;
	const enterKeyframe = keyframes(_t$1 || (_t$1 = _$1`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
	const exitKeyframe = keyframes(_t2$1 || (_t2$1 = _$1`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
	const pulsateKeyframe = keyframes(_t3$1 || (_t3$1 = _$1`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
	const TouchRippleRoot = styled$1('span', {
	  name: 'MuiTouchRipple',
	  slot: 'Root',
	  skipSx: true
	})({
	  overflow: 'hidden',
	  pointerEvents: 'none',
	  position: 'absolute',
	  zIndex: 0,
	  top: 0,
	  right: 0,
	  bottom: 0,
	  left: 0,
	  borderRadius: 'inherit'
	}); // This `styled()` function invokes keyframes. `styled-components` only supports keyframes
	// in string templates. Do not convert these styles in JS object as it will break.

	const TouchRippleRipple = styled$1(Ripple, {
	  name: 'MuiTouchRipple',
	  slot: 'Ripple'
	})(_t4$1 || (_t4$1 = _$1`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses$1.rippleVisible, enterKeyframe, DURATION, ({
	  theme
	}) => theme.transitions.easing.easeInOut, touchRippleClasses$1.ripplePulsate, ({
	  theme
	}) => theme.transitions.duration.shorter, touchRippleClasses$1.child, touchRippleClasses$1.childLeaving, exitKeyframe, DURATION, ({
	  theme
	}) => theme.transitions.easing.easeInOut, touchRippleClasses$1.childPulsate, pulsateKeyframe, ({
	  theme
	}) => theme.transitions.easing.easeInOut);
	/**
	 * @ignore - internal component.
	 *
	 * TODO v5: Make private
	 */

	const TouchRipple = /*#__PURE__*/react.exports.forwardRef(function TouchRipple(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTouchRipple'
	  });

	  const {
	    center: centerProp = false,
	    classes = {},
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose$2(props, _excluded$9);

	  const [ripples, setRipples] = react.exports.useState([]);
	  const nextKey = react.exports.useRef(0);
	  const rippleCallback = react.exports.useRef(null);
	  react.exports.useEffect(() => {
	    if (rippleCallback.current) {
	      rippleCallback.current();
	      rippleCallback.current = null;
	    }
	  }, [ripples]); // Used to filter out mouse emulated events on mobile.

	  const ignoringMouseDown = react.exports.useRef(false); // We use a timer in order to only show the ripples for touch "click" like events.
	  // We don't want to display the ripple for touch scroll events.

	  const startTimer = react.exports.useRef(null); // This is the hook called once the previous timeout is ready.

	  const startTimerCommit = react.exports.useRef(null);
	  const container = react.exports.useRef(null);
	  react.exports.useEffect(() => {
	    return () => {
	      clearTimeout(startTimer.current);
	    };
	  }, []);
	  const startCommit = react.exports.useCallback(params => {
	    const {
	      pulsate,
	      rippleX,
	      rippleY,
	      rippleSize,
	      cb
	    } = params;
	    setRipples(oldRipples => [...oldRipples, /*#__PURE__*/jsxRuntime.exports.jsx(TouchRippleRipple, {
	      classes: {
	        ripple: clsx(classes.ripple, touchRippleClasses$1.ripple),
	        rippleVisible: clsx(classes.rippleVisible, touchRippleClasses$1.rippleVisible),
	        ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses$1.ripplePulsate),
	        child: clsx(classes.child, touchRippleClasses$1.child),
	        childLeaving: clsx(classes.childLeaving, touchRippleClasses$1.childLeaving),
	        childPulsate: clsx(classes.childPulsate, touchRippleClasses$1.childPulsate)
	      },
	      timeout: DURATION,
	      pulsate: pulsate,
	      rippleX: rippleX,
	      rippleY: rippleY,
	      rippleSize: rippleSize
	    }, nextKey.current)]);
	    nextKey.current += 1;
	    rippleCallback.current = cb;
	  }, [classes]);
	  const start = react.exports.useCallback((event = {}, options = {}, cb) => {
	    const {
	      pulsate = false,
	      center = centerProp || options.pulsate,
	      fakeElement = false // For test purposes

	    } = options;

	    if (event.type === 'mousedown' && ignoringMouseDown.current) {
	      ignoringMouseDown.current = false;
	      return;
	    }

	    if (event.type === 'touchstart') {
	      ignoringMouseDown.current = true;
	    }

	    const element = fakeElement ? null : container.current;
	    const rect = element ? element.getBoundingClientRect() : {
	      width: 0,
	      height: 0,
	      left: 0,
	      top: 0
	    }; // Get the size of the ripple

	    let rippleX;
	    let rippleY;
	    let rippleSize;

	    if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
	      rippleX = Math.round(rect.width / 2);
	      rippleY = Math.round(rect.height / 2);
	    } else {
	      const {
	        clientX,
	        clientY
	      } = event.touches ? event.touches[0] : event;
	      rippleX = Math.round(clientX - rect.left);
	      rippleY = Math.round(clientY - rect.top);
	    }

	    if (center) {
	      rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3); // For some reason the animation is broken on Mobile Chrome if the size is even.

	      if (rippleSize % 2 === 0) {
	        rippleSize += 1;
	      }
	    } else {
	      const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
	      const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
	      rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
	    } // Touche devices


	    if (event.touches) {
	      // check that this isn't another touchstart due to multitouch
	      // otherwise we will only clear a single timer when unmounting while two
	      // are running
	      if (startTimerCommit.current === null) {
	        // Prepare the ripple effect.
	        startTimerCommit.current = () => {
	          startCommit({
	            pulsate,
	            rippleX,
	            rippleY,
	            rippleSize,
	            cb
	          });
	        }; // Delay the execution of the ripple effect.


	        startTimer.current = setTimeout(() => {
	          if (startTimerCommit.current) {
	            startTimerCommit.current();
	            startTimerCommit.current = null;
	          }
	        }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
	      }
	    } else {
	      startCommit({
	        pulsate,
	        rippleX,
	        rippleY,
	        rippleSize,
	        cb
	      });
	    }
	  }, [centerProp, startCommit]);
	  const pulsate = react.exports.useCallback(() => {
	    start({}, {
	      pulsate: true
	    });
	  }, [start]);
	  const stop = react.exports.useCallback((event, cb) => {
	    clearTimeout(startTimer.current); // The touch interaction occurs too quickly.
	    // We still want to show ripple effect.

	    if (event.type === 'touchend' && startTimerCommit.current) {
	      startTimerCommit.current();
	      startTimerCommit.current = null;
	      startTimer.current = setTimeout(() => {
	        stop(event, cb);
	      });
	      return;
	    }

	    startTimerCommit.current = null;
	    setRipples(oldRipples => {
	      if (oldRipples.length > 0) {
	        return oldRipples.slice(1);
	      }

	      return oldRipples;
	    });
	    rippleCallback.current = cb;
	  }, []);
	  react.exports.useImperativeHandle(ref, () => ({
	    pulsate,
	    start,
	    stop
	  }), [pulsate, start, stop]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TouchRippleRoot, _extends$3({
	    className: clsx(classes.root, touchRippleClasses$1.root, className),
	    ref: container
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(TransitionGroup$1, {
	      component: null,
	      exit: true,
	      children: ripples
	    })
	  }));
	});
	var TouchRipple$1 = TouchRipple;

	function getButtonBaseUtilityClass(slot) {
	  return generateUtilityClass('MuiButtonBase', slot);
	}
	const buttonBaseClasses = generateUtilityClasses('MuiButtonBase', ['root', 'disabled', 'focusVisible']);
	var buttonBaseClasses$1 = buttonBaseClasses;

	const useTouchRipple = props => {
	  const {
	    disabled,
	    disableFocusRipple,
	    disableRipple,
	    disableTouchRipple,
	    focusVisible,
	    rippleRef
	  } = props;
	  react.exports.useEffect(() => {
	    if (focusVisible && !disableFocusRipple && !disableRipple) {
	      var _rippleRef$current;

	      (_rippleRef$current = rippleRef.current) == null ? void 0 : _rippleRef$current.pulsate();
	    }
	  }, [rippleRef, focusVisible, disableFocusRipple, disableRipple]);

	  function useRippleHandler(rippleAction, skipRippleAction = disableTouchRipple) {
	    return useEventCallback(event => {
	      if (!skipRippleAction && rippleRef.current) {
	        rippleRef.current[rippleAction](event);
	      }

	      return true;
	    });
	  }

	  const keydownRef = react.exports.useRef(false);
	  const handleKeyDown = useEventCallback(event => {
	    if (!disableFocusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
	      keydownRef.current = true;
	      rippleRef.current.stop(event, () => {
	        var _rippleRef$current2;

	        rippleRef == null ? void 0 : (_rippleRef$current2 = rippleRef.current) == null ? void 0 : _rippleRef$current2.start(event);
	      });
	    }
	  });
	  const handleKeyUp = useEventCallback(event => {
	    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
	    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
	    if (!disableFocusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
	      keydownRef.current = false;
	      rippleRef.current.stop(event, () => {
	        var _rippleRef$current3;

	        rippleRef == null ? void 0 : (_rippleRef$current3 = rippleRef.current) == null ? void 0 : _rippleRef$current3.pulsate(event);
	      });
	    }
	  });
	  const handleBlur = useRippleHandler('stop', false);
	  const handleMouseDown = useRippleHandler('start');
	  const handleContextMenu = useRippleHandler('stop');
	  const handleDragLeave = useRippleHandler('stop');
	  const handleMouseUp = useRippleHandler('stop');
	  const handleMouseLeave = useRippleHandler('stop');
	  const handleTouchStart = useRippleHandler('start');
	  const handleTouchEnd = useRippleHandler('stop');
	  const handleTouchMove = useRippleHandler('stop');
	  const [mountedState, setMountedState] = react.exports.useState(false);
	  react.exports.useEffect(() => {
	    setMountedState(true);
	  }, []);
	  const enableTouchRipple = mountedState && !disableRipple && !disabled;
	  const getRippleHandlers = react.exports.useMemo(() => {
	    const rippleHandlers = {
	      onBlur: handleBlur,
	      onKeyDown: handleKeyDown,
	      onKeyUp: handleKeyUp,
	      onMouseDown: handleMouseDown,
	      onMouseUp: handleMouseUp,
	      onMouseLeave: handleMouseLeave,
	      onContextMenu: handleContextMenu,
	      onDragLeave: handleDragLeave,
	      onTouchStart: handleTouchStart,
	      onTouchEnd: handleTouchEnd,
	      onTouchMove: handleTouchMove
	    };
	    return (otherEvents = {}) => {
	      const eventNames = Object.keys(rippleHandlers);
	      const wrappedEvents = eventNames.map(eventName => ({
	        name: eventName,
	        handler: ev => {
	          var _otherEvents$eventNam;

	          (_otherEvents$eventNam = otherEvents[eventName]) == null ? void 0 : _otherEvents$eventNam.call(otherEvents, ev);
	          rippleHandlers[eventName](ev);
	        }
	      }));
	      return wrappedEvents.reduce((acc, current) => {
	        acc[current.name] = current.handler;
	        return acc;
	      }, {});
	    };
	  }, [handleBlur, handleKeyDown, handleKeyUp, handleMouseDown, handleMouseUp, handleMouseLeave, handleContextMenu, handleDragLeave, handleTouchStart, handleTouchEnd, handleTouchMove]);
	  return {
	    enableTouchRipple,
	    getRippleHandlers
	  };
	};

	var useTouchRipple$1 = useTouchRipple;

	const _excluded$8 = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "type"];

	const useUtilityClasses$8 = ownerState => {
	  const {
	    disabled,
	    focusVisible,
	    focusVisibleClassName,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
	  };
	  const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);

	  if (focusVisible && focusVisibleClassName) {
	    composedClasses.root += ` ${focusVisibleClassName}`;
	  }

	  return composedClasses;
	};

	const ButtonBaseRoot = styled$1('button', {
	  name: 'MuiButtonBase',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'inline-flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  position: 'relative',
	  boxSizing: 'border-box',
	  WebkitTapHighlightColor: 'transparent',
	  backgroundColor: 'transparent',
	  // Reset default value
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0,
	  border: 0,
	  margin: 0,
	  // Remove the margin in Safari
	  borderRadius: 0,
	  padding: 0,
	  // Remove the padding in Firefox
	  cursor: 'pointer',
	  userSelect: 'none',
	  verticalAlign: 'middle',
	  MozAppearance: 'none',
	  // Reset
	  WebkitAppearance: 'none',
	  // Reset
	  textDecoration: 'none',
	  // So we take precedent over the style of a native <a /> element.
	  color: 'inherit',
	  '&::-moz-focus-inner': {
	    borderStyle: 'none' // Remove Firefox dotted outline.

	  },
	  [`&.${buttonBaseClasses$1.disabled}`]: {
	    pointerEvents: 'none',
	    // Disable link interactions
	    cursor: 'default'
	  },
	  '@media print': {
	    colorAdjust: 'exact'
	  }
	});
	/**
	 * `ButtonBase` contains as few styles as possible.
	 * It aims to be a simple building block for creating a button.
	 * It contains a load of style reset and some focus/ripple logic.
	 */

	const ButtonBase = /*#__PURE__*/react.exports.forwardRef(function ButtonBase(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiButtonBase'
	  });

	  const {
	    action,
	    centerRipple = false,
	    children,
	    className,
	    component = 'button',
	    disabled = false,
	    disableRipple = false,
	    disableTouchRipple = false,
	    focusRipple = false,
	    LinkComponent = 'a',
	    tabIndex = 0,
	    TouchRippleProps
	  } = props,
	        other = _objectWithoutPropertiesLoose$2(props, _excluded$8);

	  const buttonRef = react.exports.useRef(null);
	  const handleRef = useForkRef(buttonRef, ref);
	  const rippleRef = react.exports.useRef(null);
	  let ComponentProp = component;

	  if (ComponentProp === 'button' && (other.href || other.to)) {
	    ComponentProp = LinkComponent;
	  }

	  const {
	    focusVisible,
	    setFocusVisible,
	    getRootProps
	  } = useButton(_extends$3({}, props, {
	    component: ComponentProp,
	    ref: handleRef
	  }));
	  react.exports.useImperativeHandle(action, () => ({
	    focusVisible: () => {
	      setFocusVisible(true);
	      buttonRef.current.focus();
	    }
	  }), [setFocusVisible]);
	  const {
	    enableTouchRipple,
	    getRippleHandlers
	  } = useTouchRipple$1({
	    disabled,
	    disableFocusRipple: !focusRipple,
	    disableRipple,
	    disableTouchRipple,
	    focusVisible,
	    rippleRef
	  });

	  const ownerState = _extends$3({}, props, {
	    centerRipple,
	    component,
	    disabled,
	    disableRipple,
	    disableTouchRipple,
	    focusRipple,
	    tabIndex,
	    focusVisible
	  });

	  const classes = useUtilityClasses$8(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(ButtonBaseRoot, _extends$3({
	    as: ComponentProp,
	    className: clsx(classes.root, className),
	    ownerState: ownerState
	  }, getRootProps(getRippleHandlers(props)), other, {
	    children: [children, enableTouchRipple ?
	    /*#__PURE__*/

	    /* TouchRipple is only needed client-side, x2 boost on the server. */
	    jsxRuntime.exports.jsx(TouchRipple$1, _extends$3({
	      ref: rippleRef,
	      center: centerRipple
	    }, TouchRippleProps)) : null]
	  }));
	});
	var ButtonBase$1 = ButtonBase;

	function getIconButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiIconButton', slot);
	}
	const iconButtonClasses = generateUtilityClasses('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge']);
	var iconButtonClasses$1 = iconButtonClasses;

	const _excluded$7 = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];

	const useUtilityClasses$7 = ownerState => {
	  const {
	    classes,
	    disabled,
	    color,
	    edge,
	    size
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', color !== 'default' && `color${capitalize(color)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`]
	  };
	  return composeClasses(slots, getIconButtonUtilityClass, classes);
	};

	const IconButtonRoot = styled$1(ButtonBase$1, {
	  name: 'MuiIconButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends$3({
	  textAlign: 'center',
	  flex: '0 0 auto',
	  fontSize: theme.typography.pxToRem(24),
	  padding: 8,
	  borderRadius: '50%',
	  overflow: 'visible',
	  // Explicitly set the default value to solve a bug on IE11.
	  color: theme.palette.action.active,
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.shortest
	  }),
	  '&:hover': {
	    backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.edge === 'start' && {
	  marginLeft: ownerState.size === 'small' ? -3 : -12
	}, ownerState.edge === 'end' && {
	  marginRight: ownerState.size === 'small' ? -3 : -12
	}), ({
	  theme,
	  ownerState
	}) => _extends$3({}, ownerState.color === 'inherit' && {
	  color: 'inherit'
	}, ownerState.color !== 'inherit' && ownerState.color !== 'default' && {
	  color: theme.palette[ownerState.color].main,
	  '&:hover': {
	    backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.size === 'small' && {
	  padding: 5,
	  fontSize: theme.typography.pxToRem(18)
	}, ownerState.size === 'large' && {
	  padding: 12,
	  fontSize: theme.typography.pxToRem(28)
	}, {
	  [`&.${iconButtonClasses$1.disabled}`]: {
	    backgroundColor: 'transparent',
	    color: theme.palette.action.disabled
	  }
	}));
	/**
	 * Refer to the [Icons](/components/icons/) section of the documentation
	 * regarding the available icon options.
	 */

	const IconButton = /*#__PURE__*/react.exports.forwardRef(function IconButton(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiIconButton'
	  });

	  const {
	    edge = false,
	    children,
	    className,
	    color = 'default',
	    disabled = false,
	    disableFocusRipple = false,
	    size = 'medium'
	  } = props,
	        other = _objectWithoutPropertiesLoose$2(props, _excluded$7);

	  const ownerState = _extends$3({}, props, {
	    edge,
	    color,
	    disabled,
	    disableFocusRipple,
	    size
	  });

	  const classes = useUtilityClasses$7(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(IconButtonRoot, _extends$3({
	    className: clsx(classes.root, className),
	    centerRipple: true,
	    focusRipple: !disableFocusRipple,
	    disabled: disabled,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: children
	  }));
	});
	var IconButton$1 = IconButton;

	function getTypographyUtilityClass(slot) {
	  return generateUtilityClass('MuiTypography', slot);
	}
	generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);

	const _excluded$6 = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];

	const useUtilityClasses$6 = ownerState => {
	  const {
	    align,
	    gutterBottom,
	    noWrap,
	    paragraph,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']
	  };
	  return composeClasses(slots, getTypographyUtilityClass, classes);
	};

	const TypographyRoot = styled$1('span', {
	  name: 'MuiTypography',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends$3({
	  margin: 0
	}, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
	  textAlign: ownerState.align
	}, ownerState.noWrap && {
	  overflow: 'hidden',
	  textOverflow: 'ellipsis',
	  whiteSpace: 'nowrap'
	}, ownerState.gutterBottom && {
	  marginBottom: '0.35em'
	}, ownerState.paragraph && {
	  marginBottom: 16
	}));
	const defaultVariantMapping = {
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  subtitle1: 'h6',
	  subtitle2: 'h6',
	  body1: 'p',
	  body2: 'p',
	  inherit: 'p'
	}; // TODO v6: deprecate these color values in v5.x and remove the transformation in v6

	const colorTransformations = {
	  primary: 'primary.main',
	  textPrimary: 'text.primary',
	  secondary: 'secondary.main',
	  textSecondary: 'text.secondary',
	  error: 'error.main'
	};

	const transformDeprecatedColors = color => {
	  return colorTransformations[color] || color;
	};

	const Typography = /*#__PURE__*/react.exports.forwardRef(function Typography(inProps, ref) {
	  const themeProps = useThemeProps({
	    props: inProps,
	    name: 'MuiTypography'
	  });
	  const color = transformDeprecatedColors(themeProps.color);
	  const props = extendSxProp(_extends$3({}, themeProps, {
	    color
	  }));

	  const {
	    align = 'inherit',
	    className,
	    component,
	    gutterBottom = false,
	    noWrap = false,
	    paragraph = false,
	    variant = 'body1',
	    variantMapping = defaultVariantMapping
	  } = props,
	        other = _objectWithoutPropertiesLoose$2(props, _excluded$6);

	  const ownerState = _extends$3({}, props, {
	    align,
	    color,
	    className,
	    component,
	    gutterBottom,
	    noWrap,
	    paragraph,
	    variant,
	    variantMapping
	  });

	  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
	  const classes = useUtilityClasses$6(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TypographyRoot, _extends$3({
	    as: Component,
	    ref: ref,
	    ownerState: ownerState,
	    className: clsx(classes.root, className)
	  }, other));
	});
	var Typography$1 = Typography;

	function getButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiButton', slot);
	}
	const buttonClasses = generateUtilityClasses('MuiButton', ['root', 'text', 'textInherit', 'textPrimary', 'textSecondary', 'outlined', 'outlinedInherit', 'outlinedPrimary', 'outlinedSecondary', 'contained', 'containedInherit', 'containedPrimary', 'containedSecondary', 'disableElevation', 'focusVisible', 'disabled', 'colorInherit', 'textSizeSmall', 'textSizeMedium', 'textSizeLarge', 'outlinedSizeSmall', 'outlinedSizeMedium', 'outlinedSizeLarge', 'containedSizeSmall', 'containedSizeMedium', 'containedSizeLarge', 'sizeMedium', 'sizeSmall', 'sizeLarge', 'fullWidth', 'startIcon', 'endIcon', 'iconSizeSmall', 'iconSizeMedium', 'iconSizeLarge']);
	var buttonClasses$1 = buttonClasses;

	const _excluded$5 = ["children", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];

	const useUtilityClasses$5 = ownerState => {
	  const {
	    color,
	    disableElevation,
	    fullWidth,
	    size,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, `${variant}${capitalize(color)}`, `size${capitalize(size)}`, `${variant}Size${capitalize(size)}`, color === 'inherit' && 'colorInherit', disableElevation && 'disableElevation', fullWidth && 'fullWidth'],
	    label: ['label'],
	    startIcon: ['startIcon', `iconSize${capitalize(size)}`],
	    endIcon: ['endIcon', `iconSize${capitalize(size)}`]
	  };
	  const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
	  return _extends$3({}, classes, composedClasses);
	};

	const commonIconStyles = ownerState => _extends$3({}, ownerState.size === 'small' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 18
	  }
	}, ownerState.size === 'medium' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 20
	  }
	}, ownerState.size === 'large' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 22
	  }
	});

	const ButtonRoot = styled$1(ButtonBase$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color)}`], styles[`size${capitalize(ownerState.size)}`], styles[`${ownerState.variant}Size${capitalize(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, ownerState.disableElevation && styles.disableElevation, ownerState.fullWidth && styles.fullWidth];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends$3({}, theme.typography.button, {
	  minWidth: 64,
	  padding: '6px 16px',
	  borderRadius: theme.shape.borderRadius,
	  transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {
	    duration: theme.transitions.duration.short
	  }),
	  '&:hover': _extends$3({
	    textDecoration: 'none',
	    backgroundColor: alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
	    backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
	    border: `1px solid ${theme.palette[ownerState.color].main}`,
	    backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }, ownerState.variant === 'contained' && {
	    backgroundColor: theme.palette.grey.A100,
	    boxShadow: theme.shadows[4],
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      boxShadow: theme.shadows[2],
	      backgroundColor: theme.palette.grey[300]
	    }
	  }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
	    backgroundColor: theme.palette[ownerState.color].dark,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: theme.palette[ownerState.color].main
	    }
	  }),
	  '&:active': _extends$3({}, ownerState.variant === 'contained' && {
	    boxShadow: theme.shadows[8]
	  }),
	  [`&.${buttonClasses$1.focusVisible}`]: _extends$3({}, ownerState.variant === 'contained' && {
	    boxShadow: theme.shadows[6]
	  }),
	  [`&.${buttonClasses$1.disabled}`]: _extends$3({
	    color: theme.palette.action.disabled
	  }, ownerState.variant === 'outlined' && {
	    border: `1px solid ${theme.palette.action.disabledBackground}`
	  }, ownerState.variant === 'outlined' && ownerState.color === 'secondary' && {
	    border: `1px solid ${theme.palette.action.disabled}`
	  }, ownerState.variant === 'contained' && {
	    color: theme.palette.action.disabled,
	    boxShadow: theme.shadows[0],
	    backgroundColor: theme.palette.action.disabledBackground
	  })
	}, ownerState.variant === 'text' && {
	  padding: '6px 8px'
	}, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
	  color: theme.palette[ownerState.color].main
	}, ownerState.variant === 'outlined' && {
	  padding: '5px 15px',
	  border: `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`
	}, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
	  color: theme.palette[ownerState.color].main,
	  border: `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
	}, ownerState.variant === 'contained' && {
	  color: theme.palette.getContrastText(theme.palette.grey[300]),
	  backgroundColor: theme.palette.grey[300],
	  boxShadow: theme.shadows[2]
	}, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
	  color: theme.palette[ownerState.color].contrastText,
	  backgroundColor: theme.palette[ownerState.color].main
	}, ownerState.color === 'inherit' && {
	  color: 'inherit',
	  borderColor: 'currentColor'
	}, ownerState.size === 'small' && ownerState.variant === 'text' && {
	  padding: '4px 5px',
	  fontSize: theme.typography.pxToRem(13)
	}, ownerState.size === 'large' && ownerState.variant === 'text' && {
	  padding: '8px 11px',
	  fontSize: theme.typography.pxToRem(15)
	}, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
	  padding: '3px 9px',
	  fontSize: theme.typography.pxToRem(13)
	}, ownerState.size === 'large' && ownerState.variant === 'outlined' && {
	  padding: '7px 21px',
	  fontSize: theme.typography.pxToRem(15)
	}, ownerState.size === 'small' && ownerState.variant === 'contained' && {
	  padding: '4px 10px',
	  fontSize: theme.typography.pxToRem(13)
	}, ownerState.size === 'large' && ownerState.variant === 'contained' && {
	  padding: '8px 22px',
	  fontSize: theme.typography.pxToRem(15)
	}, ownerState.fullWidth && {
	  width: '100%'
	}), ({
	  ownerState
	}) => ownerState.disableElevation && {
	  boxShadow: 'none',
	  '&:hover': {
	    boxShadow: 'none'
	  },
	  [`&.${buttonClasses$1.focusVisible}`]: {
	    boxShadow: 'none'
	  },
	  '&:active': {
	    boxShadow: 'none'
	  },
	  [`&.${buttonClasses$1.disabled}`]: {
	    boxShadow: 'none'
	  }
	});
	const ButtonStartIcon = styled$1('span', {
	  name: 'MuiButton',
	  slot: 'StartIcon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.startIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
	  }
	})(({
	  ownerState
	}) => _extends$3({
	  display: 'inherit',
	  marginRight: 8,
	  marginLeft: -4
	}, ownerState.size === 'small' && {
	  marginLeft: -2
	}, commonIconStyles(ownerState)));
	const ButtonEndIcon = styled$1('span', {
	  name: 'MuiButton',
	  slot: 'EndIcon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.endIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
	  }
	})(({
	  ownerState
	}) => _extends$3({
	  display: 'inherit',
	  marginRight: -4,
	  marginLeft: 8
	}, ownerState.size === 'small' && {
	  marginRight: -2
	}, commonIconStyles(ownerState)));
	const Button = /*#__PURE__*/react.exports.forwardRef(function Button(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiButton'
	  });

	  const {
	    children,
	    color = 'primary',
	    component = 'button',
	    disabled = false,
	    disableElevation = false,
	    disableFocusRipple = false,
	    endIcon: endIconProp,
	    focusVisibleClassName,
	    fullWidth = false,
	    size = 'medium',
	    startIcon: startIconProp,
	    type,
	    variant = 'text'
	  } = props,
	        other = _objectWithoutPropertiesLoose$2(props, _excluded$5);

	  const ownerState = _extends$3({}, props, {
	    color,
	    component,
	    disabled,
	    disableElevation,
	    disableFocusRipple,
	    fullWidth,
	    size,
	    type,
	    variant
	  });

	  const classes = useUtilityClasses$5(ownerState);

	  const startIcon = startIconProp && /*#__PURE__*/jsxRuntime.exports.jsx(ButtonStartIcon, {
	    className: classes.startIcon,
	    ownerState: ownerState,
	    children: startIconProp
	  });

	  const endIcon = endIconProp && /*#__PURE__*/jsxRuntime.exports.jsx(ButtonEndIcon, {
	    className: classes.endIcon,
	    ownerState: ownerState,
	    children: endIconProp
	  });

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(ButtonRoot, _extends$3({
	    ownerState: ownerState,
	    component: component,
	    disabled: disabled,
	    focusRipple: !disableFocusRipple,
	    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
	    ref: ref,
	    type: type
	  }, other, {
	    classes: classes,
	    children: [startIcon, children, endIcon]
	  }));
	});
	var Button$1 = Button;

	/**
	 * @ignore - internal component.
	 */

	const FormControlContext = /*#__PURE__*/react.exports.createContext();

	var FormControlContext$1 = FormControlContext;

	function useFormControl() {
	  return react.exports.useContext(FormControlContext$1);
	}

	function getSwitchBaseUtilityClass(slot) {
	  return generateUtilityClass('PrivateSwitchBase', slot);
	}
	generateUtilityClasses('PrivateSwitchBase', ['root', 'checked', 'disabled', 'input', 'edgeStart', 'edgeEnd']);

	const _excluded$4 = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];

	const useUtilityClasses$4 = ownerState => {
	  const {
	    classes,
	    checked,
	    disabled,
	    edge
	  } = ownerState;
	  const slots = {
	    root: ['root', checked && 'checked', disabled && 'disabled', edge && `edge${capitalize(edge)}`],
	    input: ['input']
	  };
	  return composeClasses(slots, getSwitchBaseUtilityClass, classes);
	};

	const SwitchBaseRoot = styled$1(ButtonBase$1, {
	  skipSx: true
	})(({
	  ownerState
	}) => _extends$3({
	  padding: 9,
	  borderRadius: '50%'
	}, ownerState.edge === 'start' && {
	  marginLeft: ownerState.size === 'small' ? -3 : -12
	}, ownerState.edge === 'end' && {
	  marginRight: ownerState.size === 'small' ? -3 : -12
	}));
	const SwitchBaseInput = styled$1('input', {
	  skipSx: true
	})({
	  cursor: 'inherit',
	  position: 'absolute',
	  opacity: 0,
	  width: '100%',
	  height: '100%',
	  top: 0,
	  left: 0,
	  margin: 0,
	  padding: 0,
	  zIndex: 1
	});
	/**
	 * @ignore - internal component.
	 */

	const SwitchBase = /*#__PURE__*/react.exports.forwardRef(function SwitchBase(props, ref) {
	  const {
	    autoFocus,
	    checked: checkedProp,
	    checkedIcon,
	    className,
	    defaultChecked,
	    disabled: disabledProp,
	    disableFocusRipple = false,
	    edge = false,
	    icon,
	    id,
	    inputProps,
	    inputRef,
	    name,
	    onBlur,
	    onChange,
	    onFocus,
	    readOnly,
	    required,
	    tabIndex,
	    type,
	    value
	  } = props,
	        other = _objectWithoutPropertiesLoose$2(props, _excluded$4);

	  const [checked, setCheckedState] = useControlled({
	    controlled: checkedProp,
	    default: Boolean(defaultChecked),
	    name: 'SwitchBase',
	    state: 'checked'
	  });
	  const muiFormControl = useFormControl();

	  const handleFocus = event => {
	    if (onFocus) {
	      onFocus(event);
	    }

	    if (muiFormControl && muiFormControl.onFocus) {
	      muiFormControl.onFocus(event);
	    }
	  };

	  const handleBlur = event => {
	    if (onBlur) {
	      onBlur(event);
	    }

	    if (muiFormControl && muiFormControl.onBlur) {
	      muiFormControl.onBlur(event);
	    }
	  };

	  const handleInputChange = event => {
	    // Workaround for https://github.com/facebook/react/issues/9023
	    if (event.nativeEvent.defaultPrevented) {
	      return;
	    }

	    const newChecked = event.target.checked;
	    setCheckedState(newChecked);

	    if (onChange) {
	      // TODO v6: remove the second argument.
	      onChange(event, newChecked);
	    }
	  };

	  let disabled = disabledProp;

	  if (muiFormControl) {
	    if (typeof disabled === 'undefined') {
	      disabled = muiFormControl.disabled;
	    }
	  }

	  const hasLabelFor = type === 'checkbox' || type === 'radio';

	  const ownerState = _extends$3({}, props, {
	    checked,
	    disabled,
	    disableFocusRipple,
	    edge
	  });

	  const classes = useUtilityClasses$4(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(SwitchBaseRoot, _extends$3({
	    component: "span",
	    className: clsx(classes.root, className),
	    centerRipple: true,
	    focusRipple: !disableFocusRipple,
	    disabled: disabled,
	    tabIndex: null,
	    role: undefined,
	    onFocus: handleFocus,
	    onBlur: handleBlur,
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(SwitchBaseInput, _extends$3({
	      autoFocus: autoFocus,
	      checked: checkedProp,
	      defaultChecked: defaultChecked,
	      className: classes.input,
	      disabled: disabled,
	      id: hasLabelFor && id,
	      name: name,
	      onChange: handleInputChange,
	      readOnly: readOnly,
	      ref: inputRef,
	      required: required,
	      ownerState: ownerState,
	      tabIndex: tabIndex,
	      type: type,
	      value: value
	    }, inputProps)), checked ? checkedIcon : icon]
	  }));
	}); // NB: If changed, please update Checkbox, Switch and Radio
	var SwitchBase$1 = SwitchBase;

	var CheckBoxOutlineBlankIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
	}), 'CheckBoxOutlineBlank');

	var CheckBoxIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
	}), 'CheckBox');

	var IndeterminateCheckBoxIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
	}), 'IndeterminateCheckBox');

	function getCheckboxUtilityClass(slot) {
	  return generateUtilityClass('MuiCheckbox', slot);
	}
	const checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary']);
	var checkboxClasses$1 = checkboxClasses;

	const _excluded$3 = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size"];

	const useUtilityClasses$3 = ownerState => {
	  const {
	    classes,
	    indeterminate,
	    color
	  } = ownerState;
	  const slots = {
	    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`]
	  };
	  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
	  return _extends$3({}, classes, composedClasses);
	};

	const CheckboxRoot = styled$1(SwitchBase$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiCheckbox',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.indeterminate && styles.indeterminate, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends$3({
	  color: theme.palette.text.secondary
	}, !ownerState.disableRipple && {
	  '&:hover': {
	    backgroundColor: alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.color !== 'default' && {
	  [`&.${checkboxClasses$1.checked}, &.${checkboxClasses$1.indeterminate}`]: {
	    color: theme.palette[ownerState.color].main
	  },
	  [`&.${checkboxClasses$1.disabled}`]: {
	    color: theme.palette.action.disabled
	  }
	}));

	const defaultCheckedIcon = /*#__PURE__*/jsxRuntime.exports.jsx(CheckBoxIcon, {});

	const defaultIcon = /*#__PURE__*/jsxRuntime.exports.jsx(CheckBoxOutlineBlankIcon, {});

	const defaultIndeterminateIcon = /*#__PURE__*/jsxRuntime.exports.jsx(IndeterminateCheckBoxIcon, {});

	const Checkbox$1 = /*#__PURE__*/react.exports.forwardRef(function Checkbox(inProps, ref) {
	  var _icon$props$fontSize, _indeterminateIcon$pr;

	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCheckbox'
	  });

	  const {
	    checkedIcon = defaultCheckedIcon,
	    color = 'primary',
	    icon: iconProp = defaultIcon,
	    indeterminate = false,
	    indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
	    inputProps,
	    size = 'medium'
	  } = props,
	        other = _objectWithoutPropertiesLoose$2(props, _excluded$3);

	  const icon = indeterminate ? indeterminateIconProp : iconProp;
	  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;

	  const ownerState = _extends$3({}, props, {
	    color,
	    indeterminate,
	    size
	  });

	  const classes = useUtilityClasses$3(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(CheckboxRoot, _extends$3({
	    type: "checkbox",
	    inputProps: _extends$3({
	      'data-indeterminate': indeterminate
	    }, inputProps),
	    icon: /*#__PURE__*/react.exports.cloneElement(icon, {
	      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
	    }),
	    checkedIcon: /*#__PURE__*/react.exports.cloneElement(indeterminateIcon, {
	      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
	    }),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    classes: classes
	  }));
	});
	var MuiCheckbox = Checkbox$1;

	function getCircularProgressUtilityClass(slot) {
	  return generateUtilityClass('MuiCircularProgress', slot);
	}
	generateUtilityClasses('MuiCircularProgress', ['root', 'determinate', 'indeterminate', 'colorPrimary', 'colorSecondary', 'svg', 'circle', 'circleDeterminate', 'circleIndeterminate', 'circleDisableShrink']);

	const _excluded$2 = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];

	let _ = t => t,
	    _t,
	    _t2,
	    _t3,
	    _t4;
	const SIZE = 44;
	const circularRotateKeyframe = keyframes(_t || (_t = _`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
	const circularDashKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));

	const useUtilityClasses$2 = ownerState => {
	  const {
	    classes,
	    variant,
	    color,
	    disableShrink
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, `color${capitalize(color)}`],
	    svg: ['svg'],
	    circle: ['circle', `circle${capitalize(variant)}`, disableShrink && 'circleDisableShrink']
	  };
	  return composeClasses(slots, getCircularProgressUtilityClass, classes);
	};

	const CircularProgressRoot = styled$1('span', {
	  name: 'MuiCircularProgress',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  ownerState,
	  theme
	}) => _extends$3({
	  display: 'inline-block'
	}, ownerState.variant === 'determinate' && {
	  transition: theme.transitions.create('transform')
	}, ownerState.color !== 'inherit' && {
	  color: theme.palette[ownerState.color].main
	}), ({
	  ownerState
	}) => ownerState.variant === 'indeterminate' && css(_t3 || (_t3 = _`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
	const CircularProgressSVG = styled$1('svg', {
	  name: 'MuiCircularProgress',
	  slot: 'Svg',
	  overridesResolver: (props, styles) => styles.svg
	})({
	  display: 'block' // Keeps the progress centered

	});
	const CircularProgressCircle = styled$1('circle', {
	  name: 'MuiCircularProgress',
	  slot: 'Circle',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.circle, styles[`circle${capitalize(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];
	  }
	})(({
	  ownerState,
	  theme
	}) => _extends$3({
	  stroke: 'currentColor'
	}, ownerState.variant === 'determinate' && {
	  transition: theme.transitions.create('stroke-dashoffset')
	}, ownerState.variant === 'indeterminate' && {
	  // Some default value that looks fine waiting for the animation to kicks in.
	  strokeDasharray: '80px, 200px',
	  strokeDashoffset: 0 // Add the unit to fix a Edge 16 and below bug.

	}), ({
	  ownerState
	}) => ownerState.variant === 'indeterminate' && !ownerState.disableShrink && css(_t4 || (_t4 = _`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
	/**
	 * ## ARIA
	 *
	 * If the progress bar is describing the loading progress of a particular region of a page,
	 * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
	 * attribute to `true` on that region until it has finished loading.
	 */

	const CircularProgress = /*#__PURE__*/react.exports.forwardRef(function CircularProgress(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCircularProgress'
	  });

	  const {
	    className,
	    color = 'primary',
	    disableShrink = false,
	    size = 40,
	    style,
	    thickness = 3.6,
	    value = 0,
	    variant = 'indeterminate'
	  } = props,
	        other = _objectWithoutPropertiesLoose$2(props, _excluded$2);

	  const ownerState = _extends$3({}, props, {
	    color,
	    disableShrink,
	    size,
	    thickness,
	    value,
	    variant
	  });

	  const classes = useUtilityClasses$2(ownerState);
	  const circleStyle = {};
	  const rootStyle = {};
	  const rootProps = {};

	  if (variant === 'determinate') {
	    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
	    circleStyle.strokeDasharray = circumference.toFixed(3);
	    rootProps['aria-valuenow'] = Math.round(value);
	    circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
	    rootStyle.transform = 'rotate(-90deg)';
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(CircularProgressRoot, _extends$3({
	    className: clsx(classes.root, className),
	    style: _extends$3({
	      width: size,
	      height: size
	    }, rootStyle, style),
	    ownerState: ownerState,
	    ref: ref,
	    role: "progressbar"
	  }, rootProps, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(CircularProgressSVG, {
	      className: classes.svg,
	      ownerState: ownerState,
	      viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(CircularProgressCircle, {
	        className: classes.circle,
	        style: circleStyle,
	        ownerState: ownerState,
	        cx: SIZE,
	        cy: SIZE,
	        r: (SIZE - thickness) / 2,
	        fill: "none",
	        strokeWidth: thickness
	      })
	    })
	  }));
	});
	var CircularProgress$1 = CircularProgress;

	function GlobalStyles(props) {
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles$1, _extends$3({}, props, {
	    defaultTheme: defaultTheme$1
	  }));
	}

	var _GlobalStyles;
	const html = {
	  WebkitFontSmoothing: 'antialiased',
	  // Antialiasing.
	  MozOsxFontSmoothing: 'grayscale',
	  // Antialiasing.
	  // Change from `box-sizing: content-box` so that `width`
	  // is not affected by `padding` or `border`.
	  boxSizing: 'border-box',
	  // Fix font resize problem in iOS
	  WebkitTextSizeAdjust: '100%'
	};
	const body = theme => _extends$3({
	  color: theme.palette.text.primary
	}, theme.typography.body1, {
	  backgroundColor: theme.palette.background.default,
	  '@media print': {
	    // Save printer ink.
	    backgroundColor: theme.palette.common.white
	  }
	});
	const styles = theme => {
	  var _theme$components, _theme$components$Mui;

	  let defaultStyles = {
	    html,
	    '*, *::before, *::after': {
	      boxSizing: 'inherit'
	    },
	    'strong, b': {
	      fontWeight: theme.typography.fontWeightBold
	    },
	    body: _extends$3({
	      margin: 0
	    }, body(theme), {
	      // Add support for document.body.requestFullScreen().
	      // Other elements, if background transparent, are not supported.
	      '&::backdrop': {
	        backgroundColor: theme.palette.background.default
	      }
	    })
	  };
	  const themeOverrides = (_theme$components = theme.components) == null ? void 0 : (_theme$components$Mui = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components$Mui.styleOverrides;

	  if (themeOverrides) {
	    defaultStyles = [defaultStyles, themeOverrides];
	  }

	  return defaultStyles;
	};
	/**
	 * Kickstart an elegant, consistent, and simple baseline to build upon.
	 */

	function CssBaseline(inProps) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCssBaseline'
	  });
	  const {
	    children
	  } = props;
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [_GlobalStyles || (_GlobalStyles = /*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles, {
	      styles: styles
	    })), children]
	  });
	}

	function getFormControlLabelUtilityClasses(slot) {
	  return generateUtilityClass('MuiFormControlLabel', slot);
	}
	const formControlLabelClasses = generateUtilityClasses('MuiFormControlLabel', ['root', 'labelPlacementStart', 'labelPlacementTop', 'labelPlacementBottom', 'disabled', 'label']);
	var formControlLabelClasses$1 = formControlLabelClasses;

	const _excluded$1 = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "value"];

	const useUtilityClasses$1 = ownerState => {
	  const {
	    classes,
	    disabled,
	    labelPlacement
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', `labelPlacement${capitalize(labelPlacement)}`],
	    label: ['label', disabled && 'disabled']
	  };
	  return composeClasses(slots, getFormControlLabelUtilityClasses, classes);
	};

	const FormControlLabelRoot = styled$1('label', {
	  name: 'MuiFormControlLabel',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${formControlLabelClasses$1.label}`]: styles.label
	    }, styles.root, styles[`labelPlacement${capitalize(ownerState.labelPlacement)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends$3({
	  display: 'inline-flex',
	  alignItems: 'center',
	  cursor: 'pointer',
	  // For correct alignment with the text.
	  verticalAlign: 'middle',
	  WebkitTapHighlightColor: 'transparent',
	  marginLeft: -11,
	  marginRight: 16,
	  // used for row presentation of radio/checkbox
	  [`&.${formControlLabelClasses$1.disabled}`]: {
	    cursor: 'default'
	  }
	}, ownerState.labelPlacement === 'start' && {
	  flexDirection: 'row-reverse',
	  marginLeft: 16,
	  // used for row presentation of radio/checkbox
	  marginRight: -11
	}, ownerState.labelPlacement === 'top' && {
	  flexDirection: 'column-reverse',
	  marginLeft: 16
	}, ownerState.labelPlacement === 'bottom' && {
	  flexDirection: 'column',
	  marginLeft: 16
	}, {
	  [`& .${formControlLabelClasses$1.label}`]: {
	    [`&.${formControlLabelClasses$1.disabled}`]: {
	      color: theme.palette.text.disabled
	    }
	  }
	}));
	/**
	 * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.
	 * Use this component if you want to display an extra label.
	 */

	const FormControlLabel = /*#__PURE__*/react.exports.forwardRef(function FormControlLabel(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormControlLabel'
	  });

	  const {
	    className,
	    componentsProps = {},
	    control,
	    disabled: disabledProp,
	    disableTypography,
	    label,
	    labelPlacement = 'end'
	  } = props,
	        other = _objectWithoutPropertiesLoose$2(props, _excluded$1);

	  const muiFormControl = useFormControl();
	  let disabled = disabledProp;

	  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {
	    disabled = control.props.disabled;
	  }

	  if (typeof disabled === 'undefined' && muiFormControl) {
	    disabled = muiFormControl.disabled;
	  }

	  const controlProps = {
	    disabled
	  };
	  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(key => {
	    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {
	      controlProps[key] = props[key];
	    }
	  });

	  const ownerState = _extends$3({}, props, {
	    disabled,
	    label,
	    labelPlacement
	  });

	  const classes = useUtilityClasses$1(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(FormControlLabelRoot, _extends$3({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [/*#__PURE__*/react.exports.cloneElement(control, controlProps), label.type === Typography$1 || disableTypography ? label : /*#__PURE__*/jsxRuntime.exports.jsx(Typography$1, _extends$3({
	      component: "span",
	      className: classes.label
	    }, componentsProps.typography, {
	      children: label
	    }))]
	  }));
	});
	var FormControlLabel$1 = FormControlLabel;

	/**
	 * @ignore - internal component.
	 */

	const GridContext = /*#__PURE__*/react.exports.createContext();

	var GridContext$1 = GridContext;

	function getGridUtilityClass(slot) {
	  return generateUtilityClass('MuiGrid', slot);
	}
	const SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	const DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];
	const WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];
	const GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
	const gridClasses = generateUtilityClasses('MuiGrid', ['root', 'container', 'item', 'zeroMinWidth', // spacings
	...SPACINGS.map(spacing => `spacing-xs-${spacing}`), // direction values
	...DIRECTIONS.map(direction => `direction-xs-${direction}`), // wrap values
	...WRAPS.map(wrap => `wrap-xs-${wrap}`), // grid sizes for all breakpoints
	...GRID_SIZES.map(size => `grid-xs-${size}`), ...GRID_SIZES.map(size => `grid-sm-${size}`), ...GRID_SIZES.map(size => `grid-md-${size}`), ...GRID_SIZES.map(size => `grid-lg-${size}`), ...GRID_SIZES.map(size => `grid-xl-${size}`)]);

	const _excluded = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "lg", "md", "rowSpacing", "sm", "spacing", "wrap", "xl", "xs", "zeroMinWidth"];

	function getOffset$1(val) {
	  const parse = parseFloat(val);
	  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;
	}

	function generateGrid(globalStyles, theme, breakpoint, ownerState) {
	  const size = ownerState[breakpoint];

	  if (!size) {
	    return;
	  }

	  let styles = {};

	  if (size === true) {
	    // For the auto layouting
	    styles = {
	      flexBasis: 0,
	      flexGrow: 1,
	      maxWidth: '100%'
	    };
	  } else if (size === 'auto') {
	    styles = {
	      flexBasis: 'auto',
	      flexGrow: 0,
	      flexShrink: 0,
	      maxWidth: 'none',
	      width: 'auto'
	    };
	  } else {
	    const columnsBreakpointValues = resolveBreakpointValues({
	      values: ownerState.columns,
	      base: theme.breakpoints.values
	    }); // Keep 7 significant numbers.

	    const width = `${Math.round(size / columnsBreakpointValues[breakpoint] * 10e7) / 10e5}%`;
	    let more = {};

	    if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
	      const themeSpacing = theme.spacing(ownerState.columnSpacing);

	      if (themeSpacing !== '0px') {
	        const fullWidth = `calc(${width} + ${getOffset$1(themeSpacing)})`;
	        more = {
	          flexBasis: fullWidth,
	          maxWidth: fullWidth
	        };
	      }
	    } // Close to the bootstrap implementation:
	    // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41


	    styles = _extends$3({
	      flexBasis: width,
	      flexGrow: 0,
	      maxWidth: width
	    }, more);
	  } // No need for a media query for the first size.


	  if (theme.breakpoints.values[breakpoint] === 0) {
	    Object.assign(globalStyles, styles);
	  } else {
	    globalStyles[theme.breakpoints.up(breakpoint)] = styles;
	  }
	}

	function generateDirection({
	  theme,
	  ownerState
	}) {
	  return handleBreakpoints({
	    theme
	  }, ownerState.direction, propValue => {
	    const output = {
	      flexDirection: propValue
	    };

	    if (propValue.indexOf('column') === 0) {
	      output[`& > .${gridClasses.item}`] = {
	        maxWidth: 'none'
	      };
	    }

	    return output;
	  });
	}

	function generateRowGap({
	  theme,
	  ownerState
	}) {
	  const {
	    container,
	    rowSpacing
	  } = ownerState;
	  let styles = {};

	  if (container && rowSpacing !== 0) {
	    styles = handleBreakpoints({
	      theme
	    }, rowSpacing, propValue => {
	      const themeSpacing = theme.spacing(propValue);

	      if (themeSpacing !== '0px') {
	        return {
	          marginTop: `-${getOffset$1(themeSpacing)}`,
	          [`& > .${gridClasses.item}`]: {
	            paddingTop: getOffset$1(themeSpacing)
	          }
	        };
	      }

	      return {};
	    });
	  }

	  return styles;
	}
	function generateColumnGap({
	  theme,
	  ownerState
	}) {
	  const {
	    container,
	    columnSpacing
	  } = ownerState;
	  let styles = {};

	  if (container && columnSpacing !== 0) {
	    styles = handleBreakpoints({
	      theme
	    }, columnSpacing, propValue => {
	      const themeSpacing = theme.spacing(propValue);

	      if (themeSpacing !== '0px') {
	        return {
	          width: `calc(100% + ${getOffset$1(themeSpacing)})`,
	          marginLeft: `-${getOffset$1(themeSpacing)}`,
	          [`& > .${gridClasses.item}`]: {
	            paddingLeft: getOffset$1(themeSpacing)
	          }
	        };
	      }

	      return {};
	    });
	  }

	  return styles;
	} // Default CSS values
	// flex: '0 1 auto',
	// flexDirection: 'row',
	// alignItems: 'flex-start',
	// flexWrap: 'nowrap',
	// justifyContent: 'flex-start',

	const GridRoot = styled$1('div', {
	  name: 'MuiGrid',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      container,
	      direction,
	      item,
	      lg,
	      md,
	      sm,
	      spacing,
	      wrap,
	      xl,
	      xs,
	      zeroMinWidth
	    } = props.ownerState;
	    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, container && spacing !== 0 && styles[`spacing-xs-${String(spacing)}`], direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], xs !== false && styles[`grid-xs-${String(xs)}`], sm !== false && styles[`grid-sm-${String(sm)}`], md !== false && styles[`grid-md-${String(md)}`], lg !== false && styles[`grid-lg-${String(lg)}`], xl !== false && styles[`grid-xl-${String(xl)}`]];
	  }
	})(({
	  ownerState
	}) => _extends$3({
	  boxSizing: 'border-box'
	}, ownerState.container && {
	  display: 'flex',
	  flexWrap: 'wrap',
	  width: '100%'
	}, ownerState.item && {
	  margin: 0 // For instance, it's useful when used with a `figure` element.

	}, ownerState.zeroMinWidth && {
	  minWidth: 0
	}, ownerState.wrap === 'nowrap' && {
	  flexWrap: 'nowrap'
	}, ownerState.wrap === 'reverse' && {
	  flexWrap: 'wrap-reverse'
	}), generateDirection, generateRowGap, generateColumnGap, ({
	  theme,
	  ownerState
	}) => theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {
	  // Use side effect over immutability for better performance.
	  generateGrid(globalStyles, theme, breakpoint, ownerState);
	  return globalStyles;
	}, {}));

	const useUtilityClasses = ownerState => {
	  const {
	    classes,
	    container,
	    direction,
	    item,
	    lg,
	    md,
	    sm,
	    spacing,
	    wrap,
	    xl,
	    xs,
	    zeroMinWidth
	  } = ownerState;
	  const slots = {
	    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', container && spacing !== 0 && `spacing-xs-${String(spacing)}`, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, xs !== false && `grid-xs-${String(xs)}`, sm !== false && `grid-sm-${String(sm)}`, md !== false && `grid-md-${String(md)}`, lg !== false && `grid-lg-${String(lg)}`, xl !== false && `grid-xl-${String(xl)}`]
	  };
	  return composeClasses(slots, getGridUtilityClass, classes);
	};

	const Grid$1 = /*#__PURE__*/react.exports.forwardRef(function Grid(inProps, ref) {
	  const themeProps = useThemeProps({
	    props: inProps,
	    name: 'MuiGrid'
	  });
	  const props = extendSxProp(themeProps);

	  const {
	    className,
	    columns: columnsProp = 12,
	    columnSpacing: columnSpacingProp,
	    component = 'div',
	    container = false,
	    direction = 'row',
	    item = false,
	    lg = false,
	    md = false,
	    rowSpacing: rowSpacingProp,
	    sm = false,
	    spacing = 0,
	    wrap = 'wrap',
	    xl = false,
	    xs = false,
	    zeroMinWidth = false
	  } = props,
	        other = _objectWithoutPropertiesLoose$2(props, _excluded);

	  const rowSpacing = rowSpacingProp || spacing;
	  const columnSpacing = columnSpacingProp || spacing;
	  const columns = react.exports.useContext(GridContext$1) || columnsProp;

	  const ownerState = _extends$3({}, props, {
	    columns,
	    container,
	    direction,
	    item,
	    lg,
	    md,
	    sm,
	    rowSpacing,
	    columnSpacing,
	    wrap,
	    xl,
	    xs,
	    zeroMinWidth
	  });

	  const classes = useUtilityClasses(ownerState);

	  const wrapChild = element => columns !== 12 ? /*#__PURE__*/jsxRuntime.exports.jsx(GridContext$1.Provider, {
	    value: columns,
	    children: element
	  }) : element;

	  return wrapChild( /*#__PURE__*/jsxRuntime.exports.jsx(GridRoot, _extends$3({
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    as: component,
	    ref: ref
	  }, other)));
	});

	var MuiGrid = Grid$1;

	var Heading = function (props) {
	    var heading = props.heading, readmore = props.readmore, url = props.url;
	    var renderHeading = heading ? (jsxRuntime.exports.jsx(Typography$1, __assign$2({ variant: "h2" }, { children: heading }), void 0)) : ("");
	    var renderReadmore = !readmore || !url ? "" : jsxRuntime.exports.jsx("a", __assign$2({ href: url }, { children: readmore }), void 0);
	    return (jsxRuntime.exports.jsxs("div", __assign$2({ className: "rlv-heading" }, { children: [renderHeading, renderReadmore] }), void 0));
	};
	Heading.propTypes = {
	    heading: PropTypes.string.isRequired,
	    readmore: PropTypes.string.isRequired,
	    url: PropTypes.string.isRequired,
	};

	var reactPaginate = {exports: {}};

	(function (module, exports) {
	!function(e,a){module.exports=a(react.exports);}(commonjsGlobal,(function(e){return function(e){var a={};function t(r){if(a[r])return a[r].exports;var n=a[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,t),n.l=!0,n.exports}return t.m=e,t.c=a,t.d=function(e,a,r){t.o(e,a)||Object.defineProperty(e,a,{enumerable:!0,get:r});},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},t.t=function(e,a){if(1&a&&(e=t(e)),8&a)return e;if(4&a&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&a&&"string"!=typeof e)for(var n in e)t.d(r,n,function(a){return e[a]}.bind(null,n));return r},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,"a",a),a},t.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},t.p="",t(t.s=4)}([function(e,a,t){e.exports=t(2)();},function(a,t){a.exports=e;},function(e,a,t){var r=t(3);function n(){}function i(){}i.resetWarningCache=n,e.exports=function(){function e(e,a,t,n,i,s){if(s!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function a(){return e}e.isRequired=e;var t={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:a,element:e,elementType:e,instanceOf:a,node:e,objectOf:a,oneOf:a,oneOfType:a,shape:a,exact:a,checkPropTypes:i,resetWarningCache:n};return t.PropTypes=t,t};},function(e,a,t){e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";},function(e,a,t){t.r(a);var r=t(1),n=t.n(r),i=t(0),s=t.n(i);function l(){return (l=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);}return e}).apply(this,arguments)}var o=function(e){var a=e.pageClassName,t=e.pageLinkClassName,r=e.page,i=e.selected,s=e.activeClassName,o=e.activeLinkClassName,u=e.getEventListener,c=e.pageSelectedHandler,p=e.href,f=e.extraAriaContext,g=e.pageLabelBuilder,d=e.ariaLabel||"Page "+r+(f?" "+f:""),b=null;return i&&(b="page",d=e.ariaLabel||"Page "+r+" is your current page",a=void 0!==a?a+" "+s:s,void 0!==t?void 0!==o&&(t=t+" "+o):t=o),n.a.createElement("li",{className:a},n.a.createElement("a",l({role:"button",className:t,href:p,tabIndex:"0","aria-label":d,"aria-current":b,onKeyPress:c},u(c)),g(r)))};o.propTypes={pageSelectedHandler:s.a.func.isRequired,selected:s.a.bool.isRequired,pageClassName:s.a.string,pageLinkClassName:s.a.string,activeClassName:s.a.string,activeLinkClassName:s.a.string,extraAriaContext:s.a.string,href:s.a.string,ariaLabel:s.a.string,page:s.a.number.isRequired,getEventListener:s.a.func.isRequired,pageLabelBuilder:s.a.func.isRequired};var u=o;function c(){return (c=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);}return e}).apply(this,arguments)}var p=function(e){var a=e.breakLabel,t=e.breakClassName,r=e.breakLinkClassName,i=e.breakHandler,s=e.getEventListener,l=t||"break";return n.a.createElement("li",{className:l},n.a.createElement("a",c({className:r,role:"button",tabIndex:"0",onKeyPress:i},s(i)),a))};p.propTypes={breakLabel:s.a.oneOfType([s.a.string,s.a.node]),breakClassName:s.a.string,breakLinkClassName:s.a.string,breakHandler:s.a.func.isRequired,getEventListener:s.a.func.isRequired};var f=p;function g(e){return (g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(){return (d=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);}return e}).apply(this,arguments)}function b(e,a){for(var t=0;t<a.length;t++){var r=a[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r);}}function v(e,a){return (v=Object.setPrototypeOf||function(e,a){return e.__proto__=a,e})(e,a)}function m(e){var a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return !1}}();return function(){var t,r=C(e);if(a){var n=C(this).constructor;t=Reflect.construct(r,arguments,n);}else t=r.apply(this,arguments);return h(this,t)}}function h(e,a){return !a||"object"!==g(a)&&"function"!=typeof a?y(e):a}function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function C(e){return (C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function P(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}var k=function(e){!function(e,a){if("function"!=typeof a&&null!==a)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(a&&a.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),a&&v(e,a);}(s,e);var a,t,i=m(s);function s(e){var a,t;return function(e,a){if(!(e instanceof a))throw new TypeError("Cannot call a class as a function")}(this,s),P(y(a=i.call(this,e)),"handlePreviousPage",(function(e){var t=a.state.selected;e.preventDefault?e.preventDefault():e.returnValue=!1,t>0&&a.handlePageSelected(t-1,e);})),P(y(a),"handleNextPage",(function(e){var t=a.state.selected,r=a.props.pageCount;e.preventDefault?e.preventDefault():e.returnValue=!1,t<r-1&&a.handlePageSelected(t+1,e);})),P(y(a),"handlePageSelected",(function(e,t){t.preventDefault?t.preventDefault():t.returnValue=!1,a.state.selected!==e?(a.setState({selected:e}),a.callCallback(e)):a.callActiveCallback(e);})),P(y(a),"getEventListener",(function(e){return P({},a.props.eventListener,e)})),P(y(a),"handleBreakClick",(function(e,t){t.preventDefault?t.preventDefault():t.returnValue=!1;var r=a.state.selected;a.handlePageSelected(r<e?a.getForwardJump():a.getBackwardJump(),t);})),P(y(a),"callCallback",(function(e){void 0!==a.props.onPageChange&&"function"==typeof a.props.onPageChange&&a.props.onPageChange({selected:e});})),P(y(a),"callActiveCallback",(function(e){void 0!==a.props.onPageActive&&"function"==typeof a.props.onPageActive&&a.props.onPageActive({selected:e});})),P(y(a),"pagination",(function(){var e=[],t=a.props,r=t.pageRangeDisplayed,i=t.pageCount,s=t.marginPagesDisplayed,l=t.breakLabel,o=t.breakClassName,u=t.breakLinkClassName,c=a.state.selected;if(i<=r)for(var p=0;p<i;p++)e.push(a.getPageElement(p));else {var g,d,b,v=r/2,m=r-v;c>i-r/2?v=r-(m=i-c):c<r/2&&(m=r-(v=c));var h=function(e){return a.getPageElement(e)};for(g=0;g<i;g++)(d=g+1)<=s||d>i-s||g>=c-v&&g<=c+m?e.push(h(g)):l&&e[e.length-1]!==b&&(b=n.a.createElement(f,{key:g,breakLabel:l,breakClassName:o,breakLinkClassName:u,breakHandler:a.handleBreakClick.bind(null,g),getEventListener:a.getEventListener}),e.push(b));}return e})),t=e.initialPage?e.initialPage:e.forcePage?e.forcePage:0,a.state={selected:t},a}return a=s,(t=[{key:"componentDidMount",value:function(){var e=this.props,a=e.initialPage,t=e.disableInitialCallback,r=e.extraAriaContext;void 0===a||t||this.callCallback(a),r&&console.warn("DEPRECATED (react-paginate): The extraAriaContext prop is deprecated. You should now use the ariaLabelBuilder instead.");}},{key:"componentDidUpdate",value:function(e){void 0!==this.props.forcePage&&this.props.forcePage!==e.forcePage&&this.setState({selected:this.props.forcePage});}},{key:"getForwardJump",value:function(){var e=this.state.selected,a=this.props,t=a.pageCount,r=e+a.pageRangeDisplayed;return r>=t?t-1:r}},{key:"getBackwardJump",value:function(){var e=this.state.selected-this.props.pageRangeDisplayed;return e<0?0:e}},{key:"hrefBuilder",value:function(e){var a=this.props,t=a.hrefBuilder,r=a.pageCount;if(t&&e!==this.state.selected&&e>=0&&e<r)return t(e+1)}},{key:"ariaLabelBuilder",value:function(e){var a=e===this.state.selected;if(this.props.ariaLabelBuilder&&e>=0&&e<this.props.pageCount){var t=this.props.ariaLabelBuilder(e+1,a);return this.props.extraAriaContext&&!a&&(t=t+" "+this.props.extraAriaContext),t}}},{key:"getPageElement",value:function(e){var a=this.state.selected,t=this.props,r=t.pageClassName,i=t.pageLinkClassName,s=t.activeClassName,l=t.activeLinkClassName,o=t.extraAriaContext,c=t.pageLabelBuilder;return n.a.createElement(u,{key:e,pageSelectedHandler:this.handlePageSelected.bind(null,e),selected:a===e,pageClassName:r,pageLinkClassName:i,activeClassName:s,activeLinkClassName:l,extraAriaContext:o,href:this.hrefBuilder(e),ariaLabel:this.ariaLabelBuilder(e),page:e+1,pageLabelBuilder:c,getEventListener:this.getEventListener})}},{key:"render",value:function(){var e=this.props,a=e.disabledClassName,t=e.pageCount,r=e.containerClassName,i=e.previousLabel,s=e.previousClassName,l=e.previousLinkClassName,o=e.previousAriaLabel,u=e.prevRel,c=e.nextLabel,p=e.nextClassName,f=e.nextLinkClassName,g=e.nextAriaLabel,b=e.nextRel,v=this.state.selected,m=s+(0===v?" ".concat(a):""),h=p+(v===t-1?" ".concat(a):""),y=0===v?"true":"false",C=v===t-1?"true":"false";return n.a.createElement("ul",{className:r},n.a.createElement("li",{className:m},n.a.createElement("a",d({className:l,href:this.hrefBuilder(v-1),tabIndex:"0",role:"button",onKeyPress:this.handlePreviousPage,"aria-disabled":y,"aria-label":o,rel:u},this.getEventListener(this.handlePreviousPage)),i)),this.pagination(),n.a.createElement("li",{className:h},n.a.createElement("a",d({className:f,href:this.hrefBuilder(v+1),tabIndex:"0",role:"button",onKeyPress:this.handleNextPage,"aria-disabled":C,"aria-label":g,rel:b},this.getEventListener(this.handleNextPage)),c)))}}])&&b(a.prototype,t),s}(r.Component);P(k,"propTypes",{pageCount:s.a.number.isRequired,pageRangeDisplayed:s.a.number.isRequired,marginPagesDisplayed:s.a.number.isRequired,previousLabel:s.a.node,previousAriaLabel:s.a.string,prevRel:s.a.string,nextLabel:s.a.node,nextAriaLabel:s.a.string,nextRel:s.a.string,breakLabel:s.a.oneOfType([s.a.string,s.a.node]),hrefBuilder:s.a.func,onPageChange:s.a.func,onPageActive:s.a.func,initialPage:s.a.number,forcePage:s.a.number,disableInitialCallback:s.a.bool,containerClassName:s.a.string,pageClassName:s.a.string,pageLinkClassName:s.a.string,pageLabelBuilder:s.a.func,activeClassName:s.a.string,activeLinkClassName:s.a.string,previousClassName:s.a.string,nextClassName:s.a.string,previousLinkClassName:s.a.string,nextLinkClassName:s.a.string,disabledClassName:s.a.string,breakClassName:s.a.string,breakLinkClassName:s.a.string,extraAriaContext:s.a.string,ariaLabelBuilder:s.a.func,eventListener:s.a.string}),P(k,"defaultProps",{pageCount:10,pageRangeDisplayed:2,marginPagesDisplayed:3,activeClassName:"selected",previousLabel:"Previous",previousClassName:"previous",previousAriaLabel:"Previous page",prevRel:"prev",nextLabel:"Next",nextClassName:"next",nextAriaLabel:"Next page",nextRel:"next",breakLabel:"...",disabledClassName:"disabled",disableInitialCallback:!1,pageLabelBuilder:function(e){return e},eventListener:"onClick"});a.default=k;}])}));

	}(reactPaginate));

	var ReactPaginate = /*@__PURE__*/getDefaultExportFromCjs(reactPaginate.exports);

	/**
	 * Removes an element from an array.
	 * @param {Array} a The haystack
	 * @param {String} e The needle to remove
	 * @return {Array} a new array
	 */
	var removeElement = function (a, e) {
	    if (!a) {
	        return;
	    }
	    return a.filter(function (v) { return v !== e; });
	};
	/**
	 * Adds a unique element to an array.
	 * @param {Array} a
	 * @param {string} e
	 */
	var addUniqueElement = function (a, e) {
	    if (!a) {
	        return [e];
	    }
	    if (!a.includes(e)) {
	        a.push(e);
	    }
	    return a;
	};
	/**
	 * Adds a unique object to an array.
	 * @param {Array} a
	 * @param {object} o
	 */
	var addUniqueObj = function (a, o) {
	    if (!("id" in o)) {
	        console.warn("element id required");
	        return;
	    }
	    if (!a.find(function (object) { return object.id === o.id; })) {
	        a.push(o);
	    }
	};
	/**
	 * Test to see if element should be displayed
	 * @param {mixed} v string or integer.
	 * @return {boolean}
	 */
	var isHidden = function (v) {
	    return v === "true" || v === 1;
	};
	var isNotHidden = function (v) {
	    return !isHidden(v);
	};
	var isNested = function (obj) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    return args.reduce(function (obj, level) { return obj && obj[level]; }, obj);
	};
	var truncateString = function (str, num) {
	    if (str.length > num) {
	        return str.slice(0, num) + "...";
	    }
	    return str;
	};
	function getQueryId(props) {
	    return [props.depts, props.api, props.format];
	}
	function createMarkup(markup) {
	    return { __html: markup };
	}
	// export const addElement = (a, e) => {
	//     return a.push(e);
	// }
	// export const replaceElement = (a, e, n) => {
	//     if (a.includes(e)) {
	//         a[a.indexOf(e)] = n;
	//     } else{
	//         a.push(n);
	//     }
	// }
	// /**
	//  * Returns a array of unique values.
	//  * @param {Array} a
	//  * @return {Array} Set of unique values
	//  */
	// export const unique = (a) => {
	//     return [...new Set(a)]
	// }

	var Paginate = function (props) {
	    var hidepagination = props.hidepagination, handlePageClick = props.handlePageClick, total = props.total;
	    if (total < 2 || isHidden(hidepagination)) {
	        return jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {}, void 0);
	    }
	    return (jsxRuntime.exports.jsx("nav", __assign$2({ className: "rlc-paginate" }, { children: jsxRuntime.exports.jsx(ReactPaginate, { previousLabel: "previous", nextLabel: "next", breakLabel: "...", breakClassName: "break-me", pageCount: total, marginPagesDisplayed: 1, pageRangeDisplayed: 3, onPageChange: handlePageClick, containerClassName: "pager_items", activeClassName: "is-active" }, void 0) }), void 0));
	};
	Paginate.propTypes = {
	    hidepagination: PropTypes.oneOf(["true", "false", 1, 0, ""]).isRequired,
	    total: PropTypes.number.isRequired,
	    handlePageClick: PropTypes.func.isRequired,
	};

	var dist = {};

	Object.defineProperty(dist, "__esModule", { value: true });
	// Void elements are elements without inner content,
	// which close themselves regardless of trailing slash.
	// E.g. both <br> and <br /> are self-closing.
	var VOID_ELEMENTS = [
	    "area",
	    "base",
	    "br",
	    "col",
	    "command",
	    "embed",
	    "hr",
	    "img",
	    "input",
	    "keygen",
	    "link",
	    "meta",
	    "param",
	    "source",
	    "track",
	    "wbr",
	];
	// Block elements trigger newlines where they're inserted,
	// and are always safe places for truncation.
	var BLOCK_ELEMENTS = [
	    "address",
	    "article",
	    "aside",
	    "blockquote",
	    "canvas",
	    "dd",
	    "div",
	    "dl",
	    "dt",
	    "fieldset",
	    "figcaption",
	    "figure",
	    "footer",
	    "form",
	    "h1",
	    "h2",
	    "h3",
	    "h4",
	    "h5",
	    "h6",
	    "header",
	    "hgroup",
	    "hr",
	    "li",
	    "main",
	    "nav",
	    "noscript",
	    "ol",
	    "output",
	    "p",
	    "pre",
	    "section",
	    "table",
	    "tbody",
	    "tfoot",
	    "thead",
	    "tr",
	    "ul",
	    "video",
	];
	var NEWLINE_CHAR_CODE = 10; // '\n'
	var EXCLAMATION_CHAR_CODE = 33; // '!'
	var DOUBLE_QUOTE_CHAR_CODE = 34; // '"'
	var AMPERSAND_CHAR_CODE = 38; // '&'
	var SINGLE_QUOTE_CHAR_CODE = 39; // '\''
	var FORWARD_SLASH_CHAR_CODE = 47; // '/'
	var SEMICOLON_CHAR_CODE = 59; // ';'
	var TAG_OPEN_CHAR_CODE = 60; // '<'
	var EQUAL_SIGN_CHAR_CODE = 61; // '='
	var TAG_CLOSE_CHAR_CODE = 62; // '>'
	var CHAR_OF_INTEREST_REGEX = /[<&\n\ud800-\udbff]/;
	var SIMPLIFY_WHITESPACE_REGEX = /\s{2,}/g;
	/**
	 * Clips a string to a maximum length. If the string exceeds the length, it is truncated and an
	 * indicator (an ellipsis, by default) is appended.
	 *
	 * In detail, the clipping rules are as follows:
	 * - The resulting clipped string may never contain more than maxLength characters. Examples:
	 *   - clip("foo", 3) => "foo"
	 *   - clip("foo", 2) => "f…"
	 * - The indicator is inserted if and only if the string is clipped at any place other than a
	 *   newline. Examples:
	 *   - clip("foo bar", 5) => "foo …"
	 *   - clip("foo\nbar", 5) => "foo"
	 * - If the html option is true and valid HTML is inserted, the clipped output *must* also be valid
	 *   HTML. If the input is not valid HTML, the result is undefined (not to be confused with JS'
	 *   "undefined" type; some errors might be detected and result in an exception, but this is not
	 *   guaranteed).
	 *
	 * @param string The string to clip.
	 * @param maxLength The maximum length of the clipped string in number of characters.
	 * @param options Optional options object.
	 *
	 * @return The clipped string.
	 */
	function clip(string, maxLength, options) {
	    if (options === void 0) { options = {}; }
	    if (!string) {
	        return "";
	    }
	    string = string.toString();
	    return options.html
	        ? clipHtml(string, maxLength, options)
	        : clipPlainText(string, maxLength, options);
	}
	var _default$8 = dist.default = clip;
	function clipHtml(string, maxLength, options) {
	    var _a = options.imageWeight, imageWeight = _a === void 0 ? 2 : _a, _b = options.indicator, indicator = _b === void 0 ? "\u2026" : _b, _c = options.maxLines, maxLines = _c === void 0 ? Infinity : _c;
	    var numChars = indicator.length;
	    var numLines = 1;
	    var i = 0;
	    var isUnbreakableContent = false;
	    var tagStack = []; // Stack of currently open HTML tags.
	    var length = string.length;
	    for (; i < length; i++) {
	        var rest = i ? string.slice(i) : string;
	        var nextIndex = rest.search(CHAR_OF_INTEREST_REGEX);
	        var nextBlockSize = nextIndex > -1 ? nextIndex : rest.length;
	        i += nextBlockSize;
	        if (!isUnbreakableContent) {
	            if (shouldSimplifyWhiteSpace(tagStack)) {
	                numChars += simplifyWhiteSpace(nextBlockSize === rest.length ? rest : rest.slice(0, nextIndex)).length;
	                if (numChars > maxLength) {
	                    i -= nextBlockSize; // We just cut off the entire incorrectly placed text...
	                    break;
	                }
	            }
	            else {
	                numChars += nextBlockSize;
	                if (numChars > maxLength) {
	                    i = Math.max(i - numChars + maxLength, 0);
	                    break;
	                }
	            }
	        }
	        if (nextIndex === -1) {
	            break;
	        }
	        var charCode = string.charCodeAt(i);
	        if (charCode === TAG_OPEN_CHAR_CODE) {
	            var nextCharCode = string.charCodeAt(i + 1);
	            var isSpecialTag = nextCharCode === EXCLAMATION_CHAR_CODE;
	            if (isSpecialTag && string.substr(i + 2, 2) === "--") {
	                var commentEndIndex = string.indexOf("-->", i + 4) + 3;
	                i = commentEndIndex - 1; // - 1 because the outer for loop will increment it
	            }
	            else if (isSpecialTag && string.substr(i + 2, 7) === "[CDATA[") {
	                var cdataEndIndex = string.indexOf("]]>", i + 9) + 3;
	                i = cdataEndIndex - 1; // - 1 because the outer for loop will increment it
	                // note we don't count CDATA text for our character limit because it is only
	                // allowed within SVG and MathML content, both of which we don't clip
	            }
	            else {
	                // don't open new tags if we are currently at the limit
	                if (numChars === maxLength &&
	                    string.charCodeAt(i + 1) !== FORWARD_SLASH_CHAR_CODE) {
	                    numChars++;
	                    break;
	                }
	                var attributeQuoteCharCode = 0;
	                var endIndex = i;
	                var isAttributeValue = false;
	                while (true /* eslint-disable-line */) {
	                    endIndex++;
	                    if (endIndex >= length) {
	                        throw new Error("Invalid HTML: " + string);
	                    }
	                    var charCode_1 = string.charCodeAt(endIndex);
	                    if (isAttributeValue) {
	                        if (attributeQuoteCharCode) {
	                            if (charCode_1 === attributeQuoteCharCode) {
	                                isAttributeValue = false;
	                            }
	                        }
	                        else {
	                            if (isWhiteSpace(charCode_1)) {
	                                isAttributeValue = false;
	                            }
	                            else if (charCode_1 === TAG_CLOSE_CHAR_CODE) {
	                                isAttributeValue = false;
	                                endIndex--; // re-evaluate this character
	                            }
	                        }
	                    }
	                    else if (charCode_1 === EQUAL_SIGN_CHAR_CODE) {
	                        while (isWhiteSpace(string.charCodeAt(endIndex + 1))) {
	                            endIndex++; // skip whitespace
	                        }
	                        isAttributeValue = true;
	                        var firstAttributeCharCode = string.charCodeAt(endIndex + 1);
	                        if (firstAttributeCharCode === DOUBLE_QUOTE_CHAR_CODE ||
	                            firstAttributeCharCode === SINGLE_QUOTE_CHAR_CODE) {
	                            attributeQuoteCharCode = firstAttributeCharCode;
	                            endIndex++;
	                        }
	                        else {
	                            attributeQuoteCharCode = 0;
	                        }
	                    }
	                    else if (charCode_1 === TAG_CLOSE_CHAR_CODE) {
	                        var isEndTag = string.charCodeAt(i + 1) === FORWARD_SLASH_CHAR_CODE;
	                        var tagNameStartIndex = i + (isEndTag ? 2 : 1);
	                        var tagNameEndIndex = Math.min(indexOfWhiteSpace(string, tagNameStartIndex), endIndex);
	                        var tagName = string
	                            .slice(tagNameStartIndex, tagNameEndIndex)
	                            .toLowerCase();
	                        if (tagName.charCodeAt(tagName.length - 1) === FORWARD_SLASH_CHAR_CODE) {
	                            // Remove trailing slash for self-closing tag names like <br/>
	                            tagName = tagName.slice(0, tagName.length - 1);
	                        }
	                        if (isEndTag) {
	                            var currentTagName = tagStack.pop();
	                            if (currentTagName !== tagName) {
	                                throw new Error("Invalid HTML: " + string);
	                            }
	                            if (tagName === "math" || tagName === "svg") {
	                                isUnbreakableContent =
	                                    tagStack.includes("math") || tagStack.includes("svg");
	                                if (!isUnbreakableContent) {
	                                    numChars += imageWeight;
	                                    if (numChars > maxLength) {
	                                        break;
	                                    }
	                                }
	                            }
	                            if (BLOCK_ELEMENTS.includes(tagName)) {
	                                // All block level elements should trigger a new line
	                                // when truncating
	                                if (!isUnbreakableContent) {
	                                    numLines++;
	                                    if (numLines > maxLines) {
	                                        // If we exceed the max lines, push the tag back onto the
	                                        // stack so that it will be added back correctly after
	                                        // truncation
	                                        tagStack.push(tagName);
	                                        break;
	                                    }
	                                }
	                            }
	                        }
	                        else if (VOID_ELEMENTS.includes(tagName) ||
	                            string.charCodeAt(endIndex - 1) === FORWARD_SLASH_CHAR_CODE) {
	                            if (tagName === "br") {
	                                numLines++;
	                                if (numLines > maxLines) {
	                                    break;
	                                }
	                            }
	                            else if (tagName === "img") {
	                                numChars += imageWeight;
	                                if (numChars > maxLength) {
	                                    break;
	                                }
	                            }
	                        }
	                        else {
	                            tagStack.push(tagName);
	                            if (tagName === "math" || tagName === "svg") {
	                                isUnbreakableContent = true;
	                            }
	                        }
	                        i = endIndex;
	                        break;
	                    }
	                }
	                if (numChars > maxLength || numLines > maxLines) {
	                    break;
	                }
	            }
	        }
	        else if (charCode === AMPERSAND_CHAR_CODE) {
	            var endIndex = i + 1;
	            var isCharacterReference = true;
	            while (true /* eslint-disable-line */) {
	                var charCode_2 = string.charCodeAt(endIndex);
	                if (isCharacterReferenceCharacter(charCode_2)) {
	                    endIndex++;
	                }
	                else if (charCode_2 === SEMICOLON_CHAR_CODE) {
	                    break;
	                }
	                else {
	                    isCharacterReference = false;
	                    break;
	                }
	            }
	            if (!isUnbreakableContent) {
	                numChars++;
	                if (numChars > maxLength) {
	                    break;
	                }
	            }
	            if (isCharacterReference) {
	                i = endIndex;
	            }
	        }
	        else if (charCode === NEWLINE_CHAR_CODE) {
	            if (!isUnbreakableContent && !shouldSimplifyWhiteSpace(tagStack)) {
	                numChars++;
	                if (numChars > maxLength) {
	                    break;
	                }
	                numLines++;
	                if (numLines > maxLines) {
	                    break;
	                }
	            }
	        }
	        else {
	            if (!isUnbreakableContent) {
	                numChars++;
	                if (numChars > maxLength) {
	                    break;
	                }
	            }
	            // high Unicode surrogate should never be separated from its matching low surrogate
	            var nextCharCode = string.charCodeAt(i + 1);
	            if ((nextCharCode & 0xfc00) === 0xdc00) {
	                i++;
	            }
	        }
	    }
	    if (numChars > maxLength) {
	        var nextChar = takeHtmlCharAt(string, i);
	        if (indicator) {
	            var peekIndex = i + nextChar.length;
	            while (string.charCodeAt(peekIndex) === TAG_OPEN_CHAR_CODE &&
	                string.charCodeAt(peekIndex + 1) === FORWARD_SLASH_CHAR_CODE) {
	                var nextPeekIndex = string.indexOf(">", peekIndex + 2) + 1;
	                if (nextPeekIndex) {
	                    peekIndex = nextPeekIndex;
	                }
	                else {
	                    break;
	                }
	            }
	            if (peekIndex && (peekIndex === string.length || isLineBreak(string, peekIndex))) {
	                // if there's only a single character remaining in the input string, or the next
	                // character is followed by a line-break, we can include it instead of the clipping
	                // indicator (provided it's not a special HTML character)
	                i += nextChar.length;
	                nextChar = string.charAt(i);
	            }
	        }
	        // include closing tags before adding the clipping indicator if that's where they
	        // are in the input string
	        while (nextChar === "<" && string.charCodeAt(i + 1) === FORWARD_SLASH_CHAR_CODE) {
	            var tagName = tagStack.pop();
	            var tagEndIndex = tagName ? string.indexOf(">", i + 2) : -1;
	            if (tagEndIndex === -1 || string.slice(i + 2, tagEndIndex).trim() !== tagName) {
	                throw new Error("Invalid HTML: " + string);
	            }
	            i = tagEndIndex + 1;
	            nextChar = string.charAt(i);
	        }
	        if (i < string.length) {
	            if (!options.breakWords) {
	                // try to clip at word boundaries, if desired
	                for (var j = i - indicator.length; j >= 0; j--) {
	                    var charCode = string.charCodeAt(j);
	                    if (charCode === TAG_CLOSE_CHAR_CODE || charCode === SEMICOLON_CHAR_CODE) {
	                        // these characters could be just regular characters, so if they occur in
	                        // the middle of a word, they would "break" our attempt to prevent breaking
	                        // of words, but given this seems highly unlikely and the alternative is
	                        // doing another full parsing of the preceding text, this seems acceptable.
	                        break;
	                    }
	                    else if (charCode === NEWLINE_CHAR_CODE || charCode === TAG_OPEN_CHAR_CODE) {
	                        i = j;
	                        break;
	                    }
	                    else if (isWhiteSpace(charCode)) {
	                        i = j + (indicator ? 1 : 0);
	                        break;
	                    }
	                }
	            }
	            var result = string.slice(0, i);
	            if (!isLineBreak(string, i)) {
	                result += indicator;
	            }
	            while (tagStack.length) {
	                var tagName = tagStack.pop();
	                result += "</" + tagName + ">";
	            }
	            return result;
	        }
	    }
	    else if (numLines > maxLines) {
	        var result = string.slice(0, i);
	        while (tagStack.length) {
	            var tagName = tagStack.pop();
	            result += "</" + tagName + ">";
	        }
	        return result;
	    }
	    return string;
	}
	function clipPlainText(string, maxLength, options) {
	    var _a = options.indicator, indicator = _a === void 0 ? "\u2026" : _a, _b = options.maxLines, maxLines = _b === void 0 ? Infinity : _b;
	    var numChars = indicator.length;
	    var numLines = 1;
	    var i = 0;
	    var length = string.length;
	    for (; i < length; i++) {
	        numChars++;
	        if (numChars > maxLength) {
	            break;
	        }
	        var charCode = string.charCodeAt(i);
	        if (charCode === NEWLINE_CHAR_CODE) {
	            numLines++;
	            if (numLines > maxLines) {
	                break;
	            }
	        }
	        else if ((charCode & 0xfc00) === 0xd800) {
	            // high Unicode surrogate should never be separated from its matching low surrogate
	            var nextCharCode = string.charCodeAt(i + 1);
	            if ((nextCharCode & 0xfc00) === 0xdc00) {
	                i++;
	            }
	        }
	    }
	    if (numChars > maxLength) {
	        var nextChar = takeCharAt(string, i);
	        if (indicator) {
	            var peekIndex = i + nextChar.length;
	            if (peekIndex === string.length) {
	                return string;
	            }
	            else if (string.charCodeAt(peekIndex) === NEWLINE_CHAR_CODE) {
	                return string.slice(0, i + nextChar.length);
	            }
	        }
	        if (!options.breakWords) {
	            // try to clip at word boundaries, if desired
	            for (var j = i - indicator.length; j >= 0; j--) {
	                var charCode = string.charCodeAt(j);
	                if (charCode === NEWLINE_CHAR_CODE) {
	                    i = j;
	                    nextChar = "\n";
	                    break;
	                }
	                else if (isWhiteSpace(charCode)) {
	                    i = j + (indicator ? 1 : 0);
	                    break;
	                }
	            }
	        }
	        return string.slice(0, i) + (nextChar === "\n" ? "" : indicator);
	    }
	    else if (numLines > maxLines) {
	        return string.slice(0, i);
	    }
	    return string;
	}
	function indexOfWhiteSpace(string, fromIndex) {
	    var length = string.length;
	    for (var i = fromIndex; i < length; i++) {
	        if (isWhiteSpace(string.charCodeAt(i))) {
	            return i;
	        }
	    }
	    // Rather than -1, this function returns the length of the string if no match is found,
	    // so it works well with the Math.min() usage above:
	    return length;
	}
	function isCharacterReferenceCharacter(charCode) {
	    return ((charCode >= 48 && charCode <= 57) ||
	        (charCode >= 65 && charCode <= 90) ||
	        (charCode >= 97 && charCode <= 122));
	}
	function isLineBreak(string, index) {
	    var firstCharCode = string.charCodeAt(index);
	    if (firstCharCode === NEWLINE_CHAR_CODE) {
	        return true;
	    }
	    else if (firstCharCode === TAG_OPEN_CHAR_CODE) {
	        var newlineElements = "(" + BLOCK_ELEMENTS.join("|") + "|br)";
	        var newlineRegExp = new RegExp("^<" + newlineElements + "[\t\n\f\r ]*/?>", "i");
	        return newlineRegExp.test(string.slice(index));
	    }
	    else {
	        return false;
	    }
	}
	function isWhiteSpace(charCode) {
	    return (charCode === 9 || charCode === 10 || charCode === 12 || charCode === 13 || charCode === 32);
	}
	/**
	 * Certain tags don't display their whitespace-only content. In such cases, we
	 * should simplify the whitespace before counting it.
	 */
	function shouldSimplifyWhiteSpace(tagStack) {
	    for (var i = tagStack.length - 1; i >= 0; i--) {
	        var tagName = tagStack[i];
	        if (tagName === "li" || tagName === "td") {
	            return false;
	        }
	        if (tagName === "ol" || tagName === "table" || tagName === "ul") {
	            return true;
	        }
	    }
	    return false;
	}
	function simplifyWhiteSpace(string) {
	    return string.trim().replace(SIMPLIFY_WHITESPACE_REGEX, " ");
	}
	function takeCharAt(string, index) {
	    var charCode = string.charCodeAt(index);
	    if ((charCode & 0xfc00) === 0xd800) {
	        // high Unicode surrogate should never be separated from its matching low surrogate
	        var nextCharCode = string.charCodeAt(index + 1);
	        if ((nextCharCode & 0xfc00) === 0xdc00) {
	            return String.fromCharCode(charCode, nextCharCode);
	        }
	    }
	    return String.fromCharCode(charCode);
	}
	function takeHtmlCharAt(string, index) {
	    var char = takeCharAt(string, index);
	    if (char === "&") {
	        while (true /* eslint-disable-line */) {
	            index++;
	            var nextCharCode = string.charCodeAt(index);
	            if (isCharacterReferenceCharacter(nextCharCode)) {
	                char += String.fromCharCode(nextCharCode);
	            }
	            else if (nextCharCode === SEMICOLON_CHAR_CODE) {
	                char += String.fromCharCode(nextCharCode);
	                break;
	            }
	            else {
	                break;
	            }
	        }
	    }
	    return char;
	}

	/**
	 * @file A collection of functions for working with event objects.
	 */
	/**
	 * Some events don't have end dates/times but the end date/time must come after the start date
	 * So we default to the start date.
	 * @param {EventEvent} event
	 * @returns {Date}
	 */
	var getEventEnd = function (event) {
	    return (event.event_instances[0].event_instance.end ||
	        event.event_instances[0].event_instance.start);
	};
	/**
	 * Get event start date.
	 * @param {EventEvent} event A localist event obj
	 * @return {string} Date string.
	 */
	var getEventStart = function (event) {
	    return event.event_instances[0].event_instance.start;
	};
	/**
	 * Gets time from dateTime.
	 *
	 * @param {dateTime} dateTime A valid date time.
	 *
	 * @return {string} The 12 hour string: "1:00 p.m".
	 */
	var getTimeFromDateTime = function (dateTime) {
	    var time = moment(dateTime).format("h:mm a");
	    return time;
	};
	/**
	 * Gets full month day  from dateTime.
	 *
	 * @param {dateTime} dateTime A valid datetime.
	 *
	 * @return {string} The abbreviated month and day "Jan 1".
	 */
	var getMonthDayFromDateTime = function (dateTime) {
	    var monthDay = moment(dateTime).format("MMMM D");
	    return monthDay;
	};
	/**
	 * Gets day  from dateTime.
	 *
	 * @param {dateTime} dateTime A valid date time.
	 *
	 * @return {string} The abbreviated day "1".
	 */
	var getDayFromDateTime = function (dateTime) {
	    var day = moment(dateTime).format("D");
	    return day;
	};
	/**
	 * Get event last end date.
	 * @param {EventEvent} event A localist event obj
	 * @return {string} Date string.
	 */
	var getEventEndDate = function (event) {
	    var endDateTime = event.last_date;
	    return endDateTime;
	};
	/**
	 * A plain date string.
	 * @param {mixed} date A date string or date object.
	 * @return {string} Date string.
	 */
	var stripDate = function (date) {
	    var cd = moment(date).format("YYYYMMDD");
	    return cd;
	};
	/**
	 * Used by calendars
	 * @param {EventEvent} event A localist event obj.
	 * @return {string} Date string.
	 */
	var getCalStartDate = function (event) {
	    var sd = getEventStart(event);
	    var cd = stripDate(sd);
	    return cd;
	};
	/**
	 *  Used by calendars
	 * @param {EventEvent} event A localist event obj.
	 * @return {string} Date string.
	 */
	var getCalEndDate = function (event) {
	    var ed = getEventEndDate(event);
	    var sd = stripDate(ed);
	    return sd;
	};
	/**
	 * The logic for determining the type of date string.
	 *
	 * @param {EventEvent} event The localist event.
	 * @param {Format} format
	 *
	 * @return {string} The date string.
	 */
	var getDisplayDate = function (event, format) {
	    var dateTime = getEventStart(event);
	    var eventDate = moment(dateTime).format("M/DD/YYYY");
	    switch (format) {
	        case "compact":
	            eventDate = moment(dateTime).format("MMM D");
	            break;
	    }
	    return eventDate;
	};
	/**
	 * @param {EventEvent} event The localist event.
	 * @param {Format} format
	 *
	 * @return {string} The date string in format "MMMM D, YYYY".
	 */
	var getFullDate = function (event) {
	    return moment(getEventStart(event)).format("MMMM D, YYYY");
	};
	/**
	 *
	 * @param {EventEvent} event The localist event.
	 * @return {string} The event start date.
	 */
	var getEventDate = function (event) {
	    var startDateTime = getEventStart(event);
	    var eventStartDate = getMonthDayFromDateTime(startDateTime);
	    return eventStartDate;
	};
	/**
	 * Truncates the description text.
	 *   Does not support html.
	 *
	 * @param {EventEvent} event the event object.
	 * @param {number} excerptLength The length of the excerpt.
	 *
	 * @return {string} The truncated description string
	 */
	var getTruncDesc = function (event, excerptLength, readMore) {
	    if (!event) {
	        return "";
	    }
	    var description = event.description_text;
	    if (excerptLength) {
	        var maxLength = typeof excerptLength == "string"
	            ? parseInt(excerptLength, 10)
	            : excerptLength;
	        var ellipsis = readMore ? "... " + readMore : "...";
	        description = _default$8(event.description_text, maxLength, {
	            html: true,
	            maxLines: 5,
	            indicator: ellipsis,
	        });
	    }
	    return description;
	};
	/**
	 *
	 * @param {EventEvent} event The localist event.
	 * @return {string} The day of the event.
	 */
	var getDay = function (event) {
	    var startDateTime = getEventStart(event);
	    var date = getDayFromDateTime(startDateTime);
	    return date;
	};
	var getEventEndTime = function (event) {
	    var endTime = getEventEnd(event);
	    var time = "";
	    // Some end times are null if so it will return start date.
	    // If its the start date don't return a end time.
	    if (endTime !== getEventStart(event)) {
	        time = getTimeFromDateTime(endTime);
	    }
	    return time;
	};
	var isAllDay = function (event) {
	    if (event.event_instances[0].event_instance.all_day) {
	        return true;
	    }
	    return false;
	};
	/**
	 * Checks if event is all day and returns appropriate start time.
	 * @param {EventEvent} event The event obj.
	 * @return {string} the eventTime string.
	 */
	var getEventTime = function (event) {
	    var eventTime = "";
	    if (isAllDay(event)) {
	        eventTime = "all day";
	    }
	    else {
	        var startDate = getEventStart(event);
	        eventTime = getTimeFromDateTime(startDate);
	    }
	    return eventTime;
	};
	/**
	 * Checks if event is all day and returns appropriate start time.
	 * @param {EventEvent} event The event obj.
	 * @return {string} the eventTime string.
	 */
	var getEventFullTime = function (event) {
	    var eventTime = "";
	    if (isAllDay(event)) {
	        eventTime = "all day";
	    }
	    else {
	        var startDate = getEventStart(event);
	        var stopTime = getEventEndTime(event);
	        stopTime = stopTime ? " - " + stopTime : "";
	        eventTime = getTimeFromDateTime(startDate) + stopTime;
	    }
	    return eventTime;
	};
	/**
	 *
	 * @param {EventEvent} event The localist event
	 * @return {string} The group name.
	 */
	var getGroupName = function (event) {
	    var groupName = "";
	    if (typeof event.group_name !== "undefined") {
	        groupName = event.group_name || "";
	    }
	    return groupName;
	};
	/**
	 *
	 * @param {EventEvent} event The localist event
	 * @return {integer} The group Id.
	 */
	var getGroupId = function (event) {
	    var groupId = 0;
	    if (typeof event.group_name !== "undefined") {
	        groupId = event.group_id || -1;
	    }
	    return groupId;
	};
	/**
	 * The event type ids.
	 * @param {EventEvent} event The event object.
	 * @return {array} An array of event type ids.
	 */
	var getTypeIds = function (event) {
	    var types = [];
	    if (typeof event.filters.event_types !== "undefined") {
	        types = event.filters.event_types.map(function (type) {
	            return type.id;
	        });
	    }
	    return types;
	};
	/**
	 * The events departments id
	 * @param {EventEvent} event The event object.
	 *
	 * @return {array} The department id.
	 */
	var getDepartmentIds = function (event) {
	    var departments = [];
	    if (typeof event.filters.departments !== "undefined") {
	        departments = event.filters.departments.map(function (dept) {
	            return dept.id;
	        });
	    }
	    return departments;
	};
	/**
	 * Gets start date in compact format.
	 * @param {event} event The event.
	 * @return {string} The MMM D".
	 */
	var getEventDateCompact = function (event) {
	    var startDateTime = getEventStart(event);
	    var eventDateCompact = moment(startDateTime).format("MMM D");
	    return eventDateCompact;
	};
	/**
	 * Gets start date in standard format.
	 * @param {event} event The event.
	 * @return {string} The MMMM YYYY".
	 */
	var getMonthHeader = function (event) {
	    var startDateTime = getEventStart(event);
	    var eventMonthHeader = moment(startDateTime).format("MMMM YYYY");
	    return eventMonthHeader;
	};
	/**
	 * Gets start date in standard format.
	 * @param {event} event The event.
	 * @return {string} The MMM".
	 */
	var getAbbrMonth = function (event) {
	    var startDateTime = getEventStart(event);
	    var abbrMonth = moment(startDateTime).format("MMM");
	    return abbrMonth;
	};
	/**
	 * If event has a class array return it as a string.
	 * @param {event} event The event.
	 * @return {string}
	 */
	var getClassItem = function (event) {
	    var _a;
	    if ("itemClassArray" in event) {
	        return (_a = event === null || event === void 0 ? void 0 : event.itemClassArray) === null || _a === void 0 ? void 0 : _a.join(" ");
	    }
	    return "";
	};

	var buildUrl$1 = {exports: {}};

	/**
	 * build-url - A small library that builds a URL given its components
	 * @version v6.0.0
	 * @link https://github.com/steverydz/build-url#readme
	 * @license MIT
	 */

	(function (module, exports) {
	(function () {

	  var root = this;
	  var previousBuildUrl = root.buildUrl;

	  var encodedParam = function (param) {
	    return param === null ? '' : encodeURIComponent(String(param).trim());
	  };

	  var buildUrl = function (url, options) {
	    var queryString = [];
	    var key;
	    var builtUrl;
	    var caseChange; 
	    
	    if (options && options.lowerCase) {
	        caseChange = !!options.lowerCase;
	    } else {
	        caseChange = false;
	    }

	    if (url === null) {
	      builtUrl = '';
	    } else if (typeof(url) === 'object') {
	      builtUrl = '';
	      options = url;
	    } else {
	      builtUrl = url;
	    }

	    if (options) {
	      if (options.path) {
	        if(builtUrl && builtUrl[builtUrl.length - 1] === '/') {
	          builtUrl = builtUrl.slice(0, -1);
	        } 

	        var localVar = String(options.path).trim(); 
	        if (caseChange) {
	          localVar = localVar.toLowerCase();
	        }
	        if (localVar.indexOf('/') === 0) {
	            builtUrl += localVar;
	        } else {
	          builtUrl += '/' + localVar;
	        }
	      }

	      if (options.queryParams) {
	        for (key in options.queryParams) {
	          if (options.queryParams.hasOwnProperty(key) && options.queryParams[key] !== void 0) {
	            var param;
	            if (options.disableCSV && Array.isArray(options.queryParams[key]) && options.queryParams[key].length) {
	              for(var i = 0; i < options.queryParams[key].length; i++) {
	                param = options.queryParams[key][i];
	                queryString.push(key + '=' + encodedParam(param));
	              }
	            } else {              
	              if (caseChange) {
	                param = options.queryParams[key].toLowerCase();
	              }
	              else {
	                param = options.queryParams[key];
	              }
	              queryString.push(key + '=' + encodedParam(param));
	            }
	          }
	        }
	        builtUrl += '?' + queryString.join('&');
	      }

	      if (options.hash) {
	        if(caseChange)
	            builtUrl += '#' + String(options.hash).trim().toLowerCase();
	        else
	            builtUrl += '#' + String(options.hash).trim();
	      }
	    } 
	    return builtUrl;
	  };

	  buildUrl.noConflict = function () {
	    root.buildUrl = previousBuildUrl;
	    return buildUrl;
	  };

	  {
	    if (module.exports) {
	      exports = module.exports = buildUrl;
	    }
	    exports.buildUrl = buildUrl;
	  }
	}).call(commonjsGlobal);
	}(buildUrl$1, buildUrl$1.exports));

	var buildUrl = buildUrl$1.exports;

	var Google = {};

	var interopRequireDefault = {exports: {}};

	(function (module) {
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}

	module.exports = _interopRequireDefault;
	module.exports["default"] = module.exports, module.exports.__esModule = true;
	}(interopRequireDefault));

	var createSvgIcon = {};

	var require$$0 = /*@__PURE__*/getAugmentedNamespace(utils);

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function () {
	    return _utils.createSvgIcon;
	  }
	});

	var _utils = require$$0;
	}(createSvgIcon));

	var _interopRequireDefault$7 = interopRequireDefault.exports;

	Object.defineProperty(Google, "__esModule", {
	  value: true
	});
	var default_1$7 = Google.default = void 0;

	_interopRequireWildcard$1(react.exports);

	var _createSvgIcon$7 = _interopRequireDefault$7(createSvgIcon);

	var _jsxRuntime$7 = jsxRuntime.exports;

	function _getRequireWildcardCache$1(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	var _default$7 = (0, _createSvgIcon$7.default)( /*#__PURE__*/(0, _jsxRuntime$7.jsx)("path", {
	  d: "M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
	}), 'Google');

	default_1$7 = Google.default = _default$7;

	var Apple = {};

	var _interopRequireDefault$6 = interopRequireDefault.exports;

	Object.defineProperty(Apple, "__esModule", {
	  value: true
	});
	var default_1$6 = Apple.default = void 0;

	_interopRequireWildcard(react.exports);

	var _createSvgIcon$6 = _interopRequireDefault$6(createSvgIcon);

	var _jsxRuntime$6 = jsxRuntime.exports;

	function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	var _default$6 = (0, _createSvgIcon$6.default)( /*#__PURE__*/(0, _jsxRuntime$6.jsx)("path", {
	  d: "M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"
	}), 'Apple');

	default_1$6 = Apple.default = _default$6;

	var Event = {};

	var _interopRequireDefault$5 = interopRequireDefault.exports;

	Object.defineProperty(Event, "__esModule", {
	  value: true
	});
	var default_1$5 = Event.default = void 0;

	var _createSvgIcon$5 = _interopRequireDefault$5(createSvgIcon);

	var _jsxRuntime$5 = jsxRuntime.exports;

	var _default$5 = (0, _createSvgIcon$5.default)( /*#__PURE__*/(0, _jsxRuntime$5.jsx)("path", {
	  d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
	}), 'Event');

	default_1$5 = Event.default = _default$5;

	var buildGoogleLink = function (event) {
	    var gDateStart = getCalStartDate(event);
	    var gDateStop = getCalEndDate(event);
	    var href = buildUrl("https://calendar.google.com/calendar/event", {
	        queryParams: {
	            action: "TEMPLATE",
	            dates: gDateStart + "/" + gDateStop,
	            details: event.description_text.replace(/[\r\n]/g, "<br />"),
	            location: event.location,
	            sprop: "website:events.cornell.edu",
	            text: event.title,
	        },
	    });
	    return href;
	};
	var buildGoogleStr = function (event) {
	    var href = buildGoogleLink(event);
	    return (jsxRuntime.exports.jsxs("a", __assign$2({ href: href, title: "Save to Google Calendar", rel: "noreferrer noopener", target: "_blank" }, { children: [jsxRuntime.exports.jsx(default_1$7, { className: "google" }, void 0), jsxRuntime.exports.jsxs("span", __assign$2({ className: "sr-only" }, { children: ["Add ", event.title, " to Google Calendar"] }), void 0)] }), void 0));
	};
	var buildiCal = function (event) {
	    return (jsxRuntime.exports.jsxs("a", __assign$2({ href: event.localist_ics_url, title: "Save to iCal", rel: "noreferrer noopener", target: "_blank" }, { children: [jsxRuntime.exports.jsx(default_1$6, { className: "apple" }, void 0), jsxRuntime.exports.jsxs("span", __assign$2({ className: "sr-only" }, { children: ["Add ", event.title, " to iCal"] }), void 0)] }), void 0));
	};
	var buildOutlookCal = function (event) {
	    return (jsxRuntime.exports.jsxs("a", __assign$2({ href: event.localist_ics_url, title: "Save to Outlook", rel: "noreferrer noopener", target: "_blank" }, { children: [jsxRuntime.exports.jsx(default_1$5, { className: "microsoft" }, void 0), jsxRuntime.exports.jsxs("span", __assign$2({ className: "sr-only" }, { children: ["Add ", event.title, " to Outlook"] }), void 0)] }), void 0));
	};
	var AddCal = function (props) {
	    var event = props.event, hideaddcal = props.hideaddcal;
	    if (isHidden(hideaddcal)) {
	        return jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {}, void 0);
	    }
	    return (jsxRuntime.exports.jsxs("span", __assign$2({ className: "rlc-add-cal" }, { children: ["add to calendar ", buildGoogleStr(event), " ", buildiCal(event), buildOutlookCal(event)] }), void 0));
	};
	AddCal.propTypes = {
	    event: PropTypes.object.isRequired,
	    hideaddcal: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	};

	var EventDescription = function (props) {
	    var description = props.description, title = props.title, url = props.url, hidedescription = props.hidedescription;
	    if (isHidden(hidedescription) && isHidden(hidedescription)) {
	        return jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {}, void 0);
	    }
	    var descriptionLink = (jsxRuntime.exports.jsxs("a", __assign$2({ className: "read-more more", href: url, rel: "noreferrer noopener", target: "_blank" }, { children: [" ", "read more", jsxRuntime.exports.jsxs("span", __assign$2({ className: "visually-hidden" }, { children: [" about ", title] }), void 0)] }), void 0));
	    return (jsxRuntime.exports.jsx("div", __assign$2({ className: "rlv-event-description" }, { children: jsxRuntime.exports.jsxs("p", { children: [isHidden(hidedescription) ? "" : description, isHidden(hidedescription) ? "" : descriptionLink] }, void 0) }), void 0));
	};
	EventDescription.propTypes = {
	    description: PropTypes.string.isRequired,
	    title: PropTypes.string.isRequired,
	    url: PropTypes.string.isRequired,
	    hidedescription: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	};
	EventDescription.defaultProps = {
	    hidedescription: "false",
	};

	var EventTitle = function (props) {
	    var title = props.title, url = props.url;
	    return (jsxRuntime.exports.jsx("h3", __assign$2({ className: "rlv-event-title" }, { children: jsxRuntime.exports.jsx("a", __assign$2({ rel: "noreferrer noopener", target: "_blank", href: url }, { children: title }), void 0) }), void 0));
	};
	EventTitle.propTypes = {
	    title: PropTypes.string.isRequired,
	    url: PropTypes.string.isRequired,
	};

	var EventDate$1 = function (props) {
	    var date = props.date;
	    return (jsxRuntime.exports.jsx("h4", __assign$2({ className: "meta date" }, { children: jsxRuntime.exports.jsx("span", __assign$2({ className: "fulldate" }, { children: date }), void 0) }), void 0));
	};
	EventDate$1.propTypes = {
	    date: PropTypes.string.isRequired,
	};

	var Room = {};

	var _interopRequireDefault$4 = interopRequireDefault.exports;

	Object.defineProperty(Room, "__esModule", {
	  value: true
	});
	var default_1$4 = Room.default = void 0;

	var _createSvgIcon$4 = _interopRequireDefault$4(createSvgIcon);

	var _jsxRuntime$4 = jsxRuntime.exports;

	var _default$4 = (0, _createSvgIcon$4.default)( /*#__PURE__*/(0, _jsxRuntime$4.jsx)("path", {
	  d: "M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"
	}), 'Room');

	default_1$4 = Room.default = _default$4;

	var EventLocation = function (props) {
	    var locationName = props.locationName;
	    if (!locationName) {
	        return jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {}, void 0);
	    }
	    return (jsxRuntime.exports.jsxs("h4", __assign$2({ className: "rlv-event-location" }, { children: [jsxRuntime.exports.jsx(default_1$4, { className: "room-icon", style: { fontSize: "inherit", marginRight: "5px" } }, void 0), locationName] }), void 0));
	};
	EventLocation.propTypes = {
	    locationName: PropTypes.string,
	};

	var EventImage = function (props) {
	    var hideimages = props.hideimages, photoUrl = props.photoUrl, title = props.title, photoCrop = props.photoCrop;
	    var _a = __read(react.exports.useState(photoUrl), 2), src = _a[0], setImg = _a[1];
	    var photo = src.replace("/huge/", "/" + photoCrop + "/");
	    var handleError = function (e) {
	        // fall back image url
	        setImg("https://localist-images.azureedge.net/photos/383704/huge/280b45456aa9d4e5eb4e4de5828d4d1dc0772e63.jpg");
	    };
	    if (isHidden(hideimages)) {
	        return jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {}, void 0);
	    }
	    return (jsxRuntime.exports.jsx("img", { className: "rlv-event-image", alt: title, width: "200", src: photo, loading: "lazy", onError: handleError }, void 0));
	};
	EventImage.propTypes = {
	    photoUrl: PropTypes.string.isRequired,
	    title: PropTypes.string.isRequired,
	    hideimages: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	    photoCrop: PropTypes.oneOf(["huge", "big", "big_square"]),
	};
	EventImage.defaultProps = {
	    hideimages: null,
	    photoCrop: "big",
	};

	var EventThumbnail = function (props) {
	    var hideimages = props.hideimages, photoUrl = props.photoUrl, title = props.title, photoCrop = props.photoCrop;
	    if (isHidden(hideimages)) {
	        return jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {}, void 0);
	    }
	    return (jsxRuntime.exports.jsx("div", __assign$2({ className: "group-image" }, { children: jsxRuntime.exports.jsx(EventImage, { hideimages: hideimages, photoUrl: photoUrl, title: title, photoCrop: photoCrop }, void 0) }), void 0));
	};
	EventThumbnail.propTypes = {
	    photoUrl: PropTypes.string.isRequired,
	    title: PropTypes.string.isRequired,
	    hideimages: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	    photoCrop: PropTypes.oneOf(["huge", "big", "big_square"]),
	};
	EventThumbnail.defaultProps = {
	    hideimages: null,
	    photoCrop: "big",
	};

	/**
	 * View CWD FlexBox Grid https://iws-preview.hosting.cornell.edu/ama39/cssf/style.html#section-59
	 */
	var Grid = function (props) {
	    if (props.container) {
	        return (jsxRuntime.exports.jsx(MuiGrid, __assign$2({ container: true, className: "rlv-flex-grid", style: props.style }, { children: props.children }), void 0));
	    }
	    return (jsxRuntime.exports.jsx(MuiGrid, __assign$2({ style: props.style, className: "rlv-flex-" + props.col, item: true, md: props.col, xs: 12 }, { children: props.children }), void 0));
	};

	var StandardInner = function (props) {
	    var event = props.event, truncatedescription = props.truncatedescription, hidedescription = props.hidedescription, hideimages = props.hideimages;
	    var classList = getClassItem(event);
	    return (jsxRuntime.exports.jsx("div", __assign$2({ className: "views-row" }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "event-node node " + classList }, { children: jsxRuntime.exports.jsxs("div", __assign$2({ className: "events" }, { children: [jsxRuntime.exports.jsx("div", __assign$2({ className: "field title" }, { children: jsxRuntime.exports.jsx(EventTitle, { title: event.title, url: event.localist_url }, void 0) }), void 0), jsxRuntime.exports.jsxs(Grid, __assign$2({ container: true }, { children: [jsxRuntime.exports.jsx(Grid, __assign$2({ col: 9, style: { marginBottom: 0 } }, { children: jsxRuntime.exports.jsx(EventLocation, { locationName: event.location_name }, void 0) }), void 0), jsxRuntime.exports.jsx(Grid, __assign$2({ col: 3, style: { marginBottom: 0 } }, { children: jsxRuntime.exports.jsx(EventDate$1, { date: getEventTime(event) }, void 0) }), void 0)] }), void 0), jsxRuntime.exports.jsx(EventThumbnail, { photoUrl: event.photo_url, title: event.title, hideimages: hideimages, photoCrop: "big" }, void 0), jsxRuntime.exports.jsx(EventDescription, { description: getTruncDesc(event, truncatedescription), title: event.title, url: event.localist_url, hidedescription: hidedescription }, void 0), jsxRuntime.exports.jsx(AddCal, __assign$2({}, props), void 0)] }), void 0) }), void 0) }), void 0));
	};
	StandardInner.propTypes = {
	    event: PropTypes.object.isRequired,
	    filterby: PropTypes.string.isRequired,
	    truncatedescription: PropTypes.string.isRequired,
	    hideaddcal: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hidedescription: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hideimages: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	};
	var Standard = function (props) {
	    var events = props.events, filterby = props.filterby, hideaddcal = props.hideaddcal, truncatedescription = props.truncatedescription, 
	    // thumbnail,
	    hidedescription = props.hidedescription, hideimages = props.hideimages, listClassArray = props.listClassArray, wrapperClassArray = props.wrapperClassArray;
	    var lastMonth = "";
	    var lastDay = "";
	    var getMonth = function (event) {
	        var month = getMonthHeader(event);
	        if (lastMonth !== month) {
	            lastMonth = month;
	            return jsxRuntime.exports.jsx("h3", __assign$2({ className: "month-header" }, { children: month }), void 0);
	        }
	        return "";
	    };
	    var getDay = function (event, format) {
	        var displayDate = getDisplayDate(event, format);
	        if (lastDay !== displayDate) {
	            lastDay = displayDate;
	            return (jsxRuntime.exports.jsxs("h4", __assign$2({ className: "day-header" }, { children: [jsxRuntime.exports.jsx(default_1$5, { className: "event-icon" }, void 0), displayDate] }), void 0));
	        }
	        return "";
	    };
	    var wrapperClassList = wrapperClassArray.join(" ");
	    var listClassList = listClassArray.join(" ");
	    return (jsxRuntime.exports.jsx("section", __assign$2({ className: "rlv-standard", title: "Events List" }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "events-main-body" }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "events-listing " + wrapperClassList }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "events-list " + listClassList }, { children: events.length > 0 ? (events.map(function (event) {
	                        return (jsxRuntime.exports.jsxs("div", { children: [getMonth(event.event), getDay(event.event, props.format), jsxRuntime.exports.jsx(StandardInner, { event: event.event, filterby: filterby, hideaddcal: hideaddcal, truncatedescription: truncatedescription, 
	                                    //   thumbnail={thumbnail}
	                                    hidedescription: hidedescription, hideimages: hideimages }, void 0)] }, event.event.event_instances[0].event_instance.id));
	                    })) : (jsxRuntime.exports.jsx("p", { children: "There are no upcoming events." }, void 0)) }), void 0) }), void 0) }), void 0) }), void 0));
	};
	Standard.propTypes = {
	    events: PropTypes.array,
	    filterby: PropTypes.string.isRequired,
	    truncatedescription: PropTypes.string,
	    thumbnail: PropTypes.string,
	    wrapperClassArray: PropTypes.array.isRequired,
	    listClassArray: PropTypes.array.isRequired,
	    hideaddcal: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	    hidedescription: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	    hideimages: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	};
	Standard.defaultProps = {
	    events: [],
	    hideaddcal: "true",
	    truncatedescription: "250",
	    thumbnail: "true",
	    wrapperclass: "",
	    listclass: "",
	    hidedescription: "false",
	    hideimages: "false",
	};

	var CompactInner = function (props) {
	    var event = props.event, hideaddcal = props.hideaddcal, truncatedescription = props.truncatedescription, hidedescription = props.hidedescription, hideimages = props.hideimages;
	    var classList = getClassItem(event);
	    return (jsxRuntime.exports.jsxs("div", __assign$2({ className: "views-row " + classList }, { children: [jsxRuntime.exports.jsx(EventThumbnail, { photoUrl: event.photo_url, title: event.title, hideimages: hideimages, photoCrop: "big" }, void 0), jsxRuntime.exports.jsx("div", __assign$2({ className: "event-node node" }, { children: jsxRuntime.exports.jsxs("div", __assign$2({ className: "events" }, { children: [jsxRuntime.exports.jsx(EventTitle, { title: event.title, url: event.localist_url }, void 0), jsxRuntime.exports.jsx(EventLocation, { locationName: event.location_name }, void 0), jsxRuntime.exports.jsx(EventDate$1, { date: getEventDateCompact(event) }, void 0), jsxRuntime.exports.jsx(EventDescription, { description: getTruncDesc(event, truncatedescription), title: event.title, url: event.localist_url, hidedescription: hidedescription }, void 0), jsxRuntime.exports.jsx(AddCal, { hideaddcal: hideaddcal, event: event }, void 0)] }), void 0) }), void 0)] }), void 0));
	};
	CompactInner.propTypes = {
	    event: PropTypes.object.isRequired,
	    truncatedescription: PropTypes.string.isRequired,
	    hideaddcal: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hidedescription: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hideimages: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	};
	var Compact = function (props) {
	    var events = props.events, listClassArray = props.listClassArray, wrapperClassArray = props.wrapperClassArray;
	    var wrapperClassList = wrapperClassArray.join(" ");
	    var listClassList = listClassArray.join(" ");
	    return (jsxRuntime.exports.jsx("section", __assign$2({ className: "standard compact", title: "Events List" }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "events-main-body" }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "events-listing compact " + wrapperClassList }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "events-list view-content " + listClassList }, { children: events.length > 0 ? (events.map(function (event) {
	                        return (jsxRuntime.exports.jsx(CompactInner, __assign$2({ event: event.event }, props), event.event.event_instances[0].event_instance.id));
	                    })) : (jsxRuntime.exports.jsx("p", { children: "There are no upcoming events." }, void 0)) }), void 0) }), void 0) }), void 0) }), void 0));
	};
	Compact.propTypes = {
	    events: PropTypes.array,
	    filterby: PropTypes.string.isRequired,
	    truncatedescription: PropTypes.string,
	    wrapperClassArray: PropTypes.array.isRequired,
	    listClassArray: PropTypes.array.isRequired,
	    hideaddcal: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	    hidedescription: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	    hideimages: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	};
	Compact.defaultProps = {
	    events: [],
	    hideaddcal: "false",
	    truncatedescription: "150",
	    hidedescription: "false",
	    hideimages: "false",
	};

	var Truncate = function (props) {
	    var hidedescription = props.hidedescription, event = props.event, truncatedescription = props.truncatedescription, readMore = props.readMore;
	    if (isHidden(hidedescription)) {
	        return jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {}, void 0);
	    }
	    var htmlString = getTruncDesc(event, truncatedescription, readMore);
	    var markup = createMarkup(htmlString);
	    return jsxRuntime.exports.jsx("span", { className: "rlv-truncate", dangerouslySetInnerHTML: markup }, void 0);
	};
	Truncate.propTypes = {
	    event: PropTypes.object.isRequired,
	    truncatedescription: PropTypes.string.isRequired,
	    hidedescription: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    readMore: PropTypes.string,
	};
	Truncate.defaultProps = {
	    readMore: "",
	};

	var Time = function (props) {
	    var event = props.event;
	    return (jsxRuntime.exports.jsxs("time", __assign$2({ className: "rlv-time", title: getEventDate(event), dateTime: getEventTime(event) }, { children: [jsxRuntime.exports.jsx("span", __assign$2({ className: "month" }, { children: getAbbrMonth(event) }), void 0), jsxRuntime.exports.jsx("span", __assign$2({ className: "day" }, { children: getDay(event) }), void 0)] }), void 0));
	};
	Time.propTypes = {
	    event: PropTypes.object.isRequired,
	};

	var ModernStandardInner = function (props) {
	    var event = props.event, hideimages = props.hideimages, hidetime = props.hidetime;
	    /**
	     *
	     * @param {obj} eventTypes An array of events.
	     * @return {string} Html string
	     */
	    var tagStr = function (eventTypes) {
	        var spanStr;
	        if (eventTypes) {
	            spanStr = eventTypes.map(function (element) {
	                return (jsxRuntime.exports.jsx("span", __assign$2({ className: "inline-events-type" }, { children: element.name }), element.id));
	            });
	        }
	        return spanStr;
	    };
	    var eventTime = getEventTime(event);
	    var classList = getClassItem(event);
	    return (jsxRuntime.exports.jsx("div", __assign$2({ className: "rlv-modern-standard " + classList }, { children: jsxRuntime.exports.jsxs("div", __assign$2({ className: "events" }, { children: [jsxRuntime.exports.jsxs("a", __assign$2({ href: event.localist_url, className: "group-link-wrapper field-group-link" }, { children: [hidetime ? "" : jsxRuntime.exports.jsx(Time, { event: event }, void 0), jsxRuntime.exports.jsx("div", __assign$2({ className: "field title" }, { children: jsxRuntime.exports.jsx("h3", { children: event.title }, void 0) }), void 0), jsxRuntime.exports.jsx("div", __assign$2({ className: "field meta" }, { children: jsxRuntime.exports.jsxs("p", { children: [hidetime ? "" : eventTime, event.location_name ? ", " + event.location_name : "", tagStr(event.filters.event_types)] }, void 0) }), void 0), jsxRuntime.exports.jsx("div", __assign$2({ className: "field field-name-summary summary" }, { children: jsxRuntime.exports.jsxs("p", { children: [jsxRuntime.exports.jsx(EventImage, { photoUrl: event.photo_url, title: event.title, hideimages: hideimages, photoCrop: "big" }, void 0), jsxRuntime.exports.jsx(Truncate, __assign$2({}, props, { readMore: "read more" }), void 0)] }, void 0) }), void 0)] }), void 0), jsxRuntime.exports.jsx(AddCal, __assign$2({}, props), void 0)] }), void 0) }), void 0));
	};
	ModernStandardInner.propTypes = {
	    event: PropTypes.object.isRequired,
	    hideaddcal: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    truncatedescription: PropTypes.string.isRequired,
	    hidedescription: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hideimages: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hidetime: PropTypes.bool,
	};
	ModernStandardInner.defaultProps = {
	    hidetime: false,
	};
	var ModernStandard = function (props) {
	    var events = props.events, listClassArray = props.listClassArray, wrapperClassArray = props.wrapperClassArray;
	    var wrapperClassList = wrapperClassArray.join(" ");
	    var listClassList = listClassArray.join(" ");
	    return (jsxRuntime.exports.jsx("section", __assign$2({ className: "events-modern-standard modern", title: "Events List" }, { children: jsxRuntime.exports.jsx("div", { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "rlv-component cwd-card-grid " + wrapperClassList }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: listClassList }, { children: events.length > 0 ? (events.map(function (event) {
	                        return (jsxRuntime.exports.jsx(ModernStandardInner, __assign$2({ event: event.event }, props), event.event.event_instances[0].event_instance.id));
	                    })) : (jsxRuntime.exports.jsx("p", { children: "There are no upcoming events." }, void 0)) }), void 0) }), void 0) }, void 0) }), void 0));
	};
	ModernStandard.propTypes = {
	    events: PropTypes.array,
	    filterby: PropTypes.string.isRequired,
	    hideaddcal: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	    truncatedescription: PropTypes.string,
	    hideimages: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	    hidedescription: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	    wrapperClassArray: PropTypes.array,
	    listClassArray: PropTypes.array,
	};
	ModernStandard.defaultProps = {
	    events: [],
	    hideaddcal: "false",
	    truncatedescription: "250",
	    hideimages: "false",
	    wrapperClassArray: [],
	    listClassArray: [],
	    hidedescription: "false",
	};

	var ModernCompactInner = function (props) {
	    var event = props.event, hideimages = props.hideimages;
	    var eventTime = getEventTime(event);
	    var classList = getClassItem(event);
	    return (jsxRuntime.exports.jsx("div", __assign$2({ className: classList }, { children: jsxRuntime.exports.jsxs("div", __assign$2({ className: "events" }, { children: [jsxRuntime.exports.jsxs("a", __assign$2({ href: event.localist_url, className: "group-link-wrapper field-group-link" }, { children: [jsxRuntime.exports.jsx(EventThumbnail, { photoUrl: event.photo_url, title: event.title, hideimages: hideimages, photoCrop: "big" }, void 0), jsxRuntime.exports.jsx(Time, { event: event }, void 0), jsxRuntime.exports.jsx("div", __assign$2({ className: "field title" }, { children: jsxRuntime.exports.jsx("h3", { children: event.title }, void 0) }), void 0), jsxRuntime.exports.jsx("div", __assign$2({ className: "field meta" }, { children: jsxRuntime.exports.jsxs("p", { children: [eventTime, event.location_name ? ", " + event.location_name : ""] }, void 0) }), void 0), jsxRuntime.exports.jsx("div", __assign$2({ className: "field field-name-summary summary" }, { children: jsxRuntime.exports.jsx("p", { children: jsxRuntime.exports.jsx(Truncate, __assign$2({}, props), void 0) }, void 0) }), void 0)] }), void 0), jsxRuntime.exports.jsx(AddCal, __assign$2({}, props), void 0)] }), void 0) }), void 0));
	};
	ModernCompactInner.propTypes = {
	    event: PropTypes.object.isRequired,
	    truncatedescription: PropTypes.string.isRequired,
	    hideaddcal: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hideimages: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hidedescription: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	};
	var ModernCompact = function (props) {
	    var events = props.events, listClassArray = props.listClassArray, wrapperClassArray = props.wrapperClassArray;
	    var wrapperClassList = wrapperClassArray.join(" ");
	    var listClassList = listClassArray.join(" ");
	    return (jsxRuntime.exports.jsx("section", __assign$2({ className: "rlv-modern-compact modern", title: "Events List" }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "events-main-body" }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "rlv-component cwd-card-grid " + wrapperClassList }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: listClassList }, { children: events.length > 0 ? (events.map(function (event) {
	                        return (jsxRuntime.exports.jsx(ModernCompactInner, __assign$2({ event: event.event }, props), event.event.event_instances[0].event_instance.id));
	                    })) : (jsxRuntime.exports.jsx("p", { children: "There are no upcoming events." }, void 0)) }), void 0) }), void 0) }), void 0) }), void 0));
	};
	ModernCompact.propTypes = {
	    events: PropTypes.array,
	    filterby: PropTypes.string.isRequired,
	    truncatedescription: PropTypes.string,
	    wrapperclass: PropTypes.string,
	    listclass: PropTypes.string,
	    hideimages: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hideaddcal: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hidedescription: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    wrapperClassArray: PropTypes.array,
	    listClassArray: PropTypes.array,
	};
	ModernCompact.defaultProps = {
	    events: [],
	    truncatedescription: "150",
	    wrapperclass: "",
	    listclass: "",
	    wrapperClassArray: [],
	    listClassArray: [],
	};

	var AccessTime = {};

	var _interopRequireDefault$3 = interopRequireDefault.exports;

	Object.defineProperty(AccessTime, "__esModule", {
	  value: true
	});
	var default_1$3 = AccessTime.default = void 0;

	var _createSvgIcon$3 = _interopRequireDefault$3(createSvgIcon);

	var _jsxRuntime$3 = jsxRuntime.exports;

	var _default$3 = (0, _createSvgIcon$3.default)([/*#__PURE__*/(0, _jsxRuntime$3.jsx)("path", {
	  d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
	}, "0"), /*#__PURE__*/(0, _jsxRuntime$3.jsx)("path", {
	  d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
	}, "1")], 'AccessTime');

	default_1$3 = AccessTime.default = _default$3;

	var InlineCompactInner = function (_a) {
	    var event = _a.event;
	    var eventTime = getEventTime(event);
	    var endTime = getEventEndTime(event);
	    var renderEventLocation = function (locationName) {
	        if (!locationName) {
	            return "";
	        }
	        return (jsxRuntime.exports.jsxs("div", __assign$2({ className: "event-location" }, { children: [jsxRuntime.exports.jsx(default_1$4, { className: "room-icon" }, void 0), locationName] }), void 0));
	    };
	    var classList = getClassItem(event);
	    return (jsxRuntime.exports.jsx("div", __assign$2({ className: "rlv-inline-compact views-row " + classList }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "container-fluid" }, { children: jsxRuntime.exports.jsxs("div", __assign$2({ className: "row" }, { children: [jsxRuntime.exports.jsx("div", __assign$2({ className: "col-sm-2 event-month-and-day" }, { children: jsxRuntime.exports.jsxs("div", { children: [jsxRuntime.exports.jsx("span", __assign$2({ className: "event-month" }, { children: getAbbrMonth(event) }), void 0), jsxRuntime.exports.jsx("span", __assign$2({ className: "event-day" }, { children: getDay(event) }), void 0)] }, void 0) }), void 0), jsxRuntime.exports.jsxs("div", __assign$2({ className: "col-sm-8 event-title-and-location" }, { children: [jsxRuntime.exports.jsx("div", __assign$2({ className: "event-title" }, { children: jsxRuntime.exports.jsx("a", __assign$2({ href: event.localist_url, hrefLang: "en" }, { children: event.title }), void 0) }), void 0), jsxRuntime.exports.jsxs("div", __assign$2({ className: "event-times" }, { children: [jsxRuntime.exports.jsx(default_1$3, { className: "access-time-icon" }, void 0), eventTime, endTime ? " - " + endTime : ""] }), void 0), renderEventLocation(event.location_name)] }), void 0)] }), void 0) }), void 0) }), void 0));
	};
	InlineCompactInner.propTypes = {
	    event: PropTypes.object.isRequired,
	};
	var InlineCompact = function (props) {
	    var events = props.events, listclass = props.listclass, wrapperclass = props.wrapperclass;
	    return (jsxRuntime.exports.jsx("section", __assign$2({ className: "modern", id: "eventsInlineCompact", title: "Events List" }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "events-main-body" }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "rlv-component compact events-listing " + wrapperclass }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "events-list view-content " + listclass }, { children: events.length > 0 ? (events.map(function (event) {
	                        return (jsxRuntime.exports.jsx(InlineCompactInner, { event: event.event }, event.event.event_instances[0].event_instance.id));
	                    })) : (jsxRuntime.exports.jsx("p", { children: "There are no upcoming events." }, void 0)) }), void 0) }), void 0) }), void 0) }), void 0));
	};
	InlineCompact.propTypes = {
	    events: PropTypes.array,
	    wrapperclass: PropTypes.string,
	    listclass: PropTypes.string,
	};
	InlineCompact.defaultProps = {
	    events: [],
	    wrapperclass: "",
	    listclass: "",
	};

	function weekOfMonth(m) {
	    return m.clone().startOf("month");
	}
	function lastWeekOfMonth(m) {
	    return m.clone().endOf("month");
	}
	function getKeyFromDateRange(dateRange) {
	    return dateRange.start.clone().format("YYYY-MM-DD");
	}
	function getMonthFromThisDateRange(dateRange, diff, isCalendarMonth) {
	    // will work with calendar
	    var newStart = weekOfMonth(
	    // Get end of first week in the month
	    dateRange.start.clone().endOf("week").add(diff, "month")
	    // dateRange.start.clone().add(diff, "month")
	    );
	    var query = dateRange.end.clone().startOf("week").add(diff, "month");
	    // const query = dateRange.end.clone().add(diff, "month");
	    var newEnd = lastWeekOfMonth(query);
	    return {
	        start: newStart,
	        end: newEnd,
	    };
	}
	function getLastMonth(dateRange) {
	    var newDateRange = getMonthFromThisDateRange(dateRange, -1);
	    return newDateRange;
	}
	function getNextMonth(dateRange) {
	    return getMonthFromThisDateRange(dateRange, 1);
	}
	function initDateRange() {
	    var dateRange = {
	        start: weekOfMonth(moment().startOf("month")),
	        end: lastWeekOfMonth(moment().endOf("month")),
	    };
	    return dateRange;
	}
	var daysInMonth = function (dateContext) {
	    return dateContext.daysInMonth();
	};
	var currentDay = function (dateContext) {
	    return parseInt(dateContext.format("D"), 10);
	};
	var firstDayOfMonth = function (dateContext) {
	    return parseInt(moment(dateContext).startOf("month").format("d"), 10); // Day of week 0...1..5...6
	};
	var lastDayOfMonth = function (dateContext) {
	    return parseInt(moment(dateContext).endOf("month").format("d"), 10); // Day of week 0...1..5...6
	};

	var events = [];
	var filteredEvents = [];
	var initDate = new Date();
	var initialEvent = {
	    id: -1,
	    title: "",
	    url: "",
	    updated_at: initDate,
	    created_at: initDate,
	    facebook_id: null,
	    first_date: initDate,
	    last_date: initDate,
	    hashtag: "",
	    urlname: "",
	    user_id: -1,
	    directions: null,
	    allows_reviews: false,
	    allows_attendance: false,
	    location: "",
	    room_number: null,
	    location_name: "",
	    status: "",
	    experience: "",
	    stream_url: "",
	    stream_info: "",
	    stream_embed_code: "",
	    created_by: -1,
	    updated_by: -1,
	    city_id: null,
	    neighborhood_id: null,
	    school_id: -1,
	    campus_id: null,
	    recurring: false,
	    free: false,
	    private: false,
	    verified: false,
	    rejected: false,
	    sponsored: false,
	    venue_id: null,
	    ticket_url: "",
	    ticket_cost: "",
	    keywords: [""],
	    tags: [""],
	    description_text: "",
	    photo_id: null,
	    detail_views: -1,
	    event_instances: [
	        {
	            event_instance: {
	                id: -1,
	                event_id: -1,
	                start: initDate,
	                end: initDate,
	                ranking: -1,
	                all_day: false,
	                num_attending: -1,
	            },
	        },
	    ],
	    address: "",
	    description: "",
	    featured: false,
	    geo: {
	        latitude: null,
	        longitude: null,
	        street: null,
	        city: null,
	        state: null,
	        country: null,
	        zip: null,
	    },
	    filters: {
	        departments: [
	            {
	                name: "",
	                id: -1,
	            },
	        ],
	        event_types: [
	            {
	                name: "",
	                id: -1,
	            },
	        ],
	    },
	    custom_fields: {
	        contact_email: "",
	        contact_name: "",
	        dept_web_site: "",
	    },
	    localist_url: "",
	    localist_ics_url: "",
	    photo_url: "",
	    venue_url: null,
	    group_id: -1,
	    group_name: "",
	};
	var EventsContext = React$1.createContext({
	    events: events,
	    setEvents: function (events) { },
	    filteredEvents: filteredEvents,
	    setFilteredEvents: function (filteredEvents) { },
	    showDialog: false,
	    setShowDialog: function (show) { },
	    eventSelected: initialEvent,
	    setEventSelected: function (selectedEvent) { },
	    displayedDateRange: {
	        start: moment().startOf("month"),
	        end: moment().endOf("month"),
	    },
	    setDisplayedDateRange: function (displayedDateRange) { },
	});

	var Subscribable = /*#__PURE__*/function () {
	  function Subscribable() {
	    this.listeners = [];
	  }

	  var _proto = Subscribable.prototype;

	  _proto.subscribe = function subscribe(listener) {
	    var _this = this;

	    var callback = listener || function () {
	      return undefined;
	    };

	    this.listeners.push(callback);
	    this.onSubscribe();
	    return function () {
	      _this.listeners = _this.listeners.filter(function (x) {
	        return x !== callback;
	      });

	      _this.onUnsubscribe();
	    };
	  };

	  _proto.hasListeners = function hasListeners() {
	    return this.listeners.length > 0;
	  };

	  _proto.onSubscribe = function onSubscribe() {// Do nothing
	  };

	  _proto.onUnsubscribe = function onUnsubscribe() {// Do nothing
	  };

	  return Subscribable;
	}();

	// TYPES
	// UTILS
	var isServer = typeof window === 'undefined';
	function noop$1() {
	  return undefined;
	}
	function functionalUpdate(updater, input) {
	  return typeof updater === 'function' ? updater(input) : updater;
	}
	function isValidTimeout(value) {
	  return typeof value === 'number' && value >= 0 && value !== Infinity;
	}
	function ensureQueryKeyArray(value) {
	  return Array.isArray(value) ? value : [value];
	}
	function timeUntilStale(updatedAt, staleTime) {
	  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
	}
	function parseQueryArgs(arg1, arg2, arg3) {
	  if (!isQueryKey(arg1)) {
	    return arg1;
	  }

	  if (typeof arg2 === 'function') {
	    return _extends$3({}, arg3, {
	      queryKey: arg1,
	      queryFn: arg2
	    });
	  }

	  return _extends$3({}, arg2, {
	    queryKey: arg1
	  });
	}
	function parseFilterArgs(arg1, arg2, arg3) {
	  return isQueryKey(arg1) ? [_extends$3({}, arg2, {
	    queryKey: arg1
	  }), arg3] : [arg1 || {}, arg2];
	}
	function mapQueryStatusFilter(active, inactive) {
	  if (active === true && inactive === true || active == null && inactive == null) {
	    return 'all';
	  } else if (active === false && inactive === false) {
	    return 'none';
	  } else {
	    // At this point, active|inactive can only be true|false or false|true
	    // so, when only one value is provided, the missing one has to be the negated value
	    var isActive = active != null ? active : !inactive;
	    return isActive ? 'active' : 'inactive';
	  }
	}
	function matchQuery(filters, query) {
	  var active = filters.active,
	      exact = filters.exact,
	      fetching = filters.fetching,
	      inactive = filters.inactive,
	      predicate = filters.predicate,
	      queryKey = filters.queryKey,
	      stale = filters.stale;

	  if (isQueryKey(queryKey)) {
	    if (exact) {
	      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
	        return false;
	      }
	    } else if (!partialMatchKey(query.queryKey, queryKey)) {
	      return false;
	    }
	  }

	  var queryStatusFilter = mapQueryStatusFilter(active, inactive);

	  if (queryStatusFilter === 'none') {
	    return false;
	  } else if (queryStatusFilter !== 'all') {
	    var isActive = query.isActive();

	    if (queryStatusFilter === 'active' && !isActive) {
	      return false;
	    }

	    if (queryStatusFilter === 'inactive' && isActive) {
	      return false;
	    }
	  }

	  if (typeof stale === 'boolean' && query.isStale() !== stale) {
	    return false;
	  }

	  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {
	    return false;
	  }

	  if (predicate && !predicate(query)) {
	    return false;
	  }

	  return true;
	}
	function matchMutation(filters, mutation) {
	  var exact = filters.exact,
	      fetching = filters.fetching,
	      predicate = filters.predicate,
	      mutationKey = filters.mutationKey;

	  if (isQueryKey(mutationKey)) {
	    if (!mutation.options.mutationKey) {
	      return false;
	    }

	    if (exact) {
	      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {
	        return false;
	      }
	    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
	      return false;
	    }
	  }

	  if (typeof fetching === 'boolean' && mutation.state.status === 'loading' !== fetching) {
	    return false;
	  }

	  if (predicate && !predicate(mutation)) {
	    return false;
	  }

	  return true;
	}
	function hashQueryKeyByOptions(queryKey, options) {
	  var hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;
	  return hashFn(queryKey);
	}
	/**
	 * Default query keys hash function.
	 */

	function hashQueryKey(queryKey) {
	  var asArray = ensureQueryKeyArray(queryKey);
	  return stableValueHash(asArray);
	}
	/**
	 * Hashes the value into a stable hash.
	 */

	function stableValueHash(value) {
	  return JSON.stringify(value, function (_, val) {
	    return isPlainObject(val) ? Object.keys(val).sort().reduce(function (result, key) {
	      result[key] = val[key];
	      return result;
	    }, {}) : val;
	  });
	}
	/**
	 * Checks if key `b` partially matches with key `a`.
	 */

	function partialMatchKey(a, b) {
	  return partialDeepEqual(ensureQueryKeyArray(a), ensureQueryKeyArray(b));
	}
	/**
	 * Checks if `b` partially matches with `a`.
	 */

	function partialDeepEqual(a, b) {
	  if (a === b) {
	    return true;
	  }

	  if (typeof a !== typeof b) {
	    return false;
	  }

	  if (a && b && typeof a === 'object' && typeof b === 'object') {
	    return !Object.keys(b).some(function (key) {
	      return !partialDeepEqual(a[key], b[key]);
	    });
	  }

	  return false;
	}
	/**
	 * This function returns `a` if `b` is deeply equal.
	 * If not, it will replace any deeply equal children of `b` with those of `a`.
	 * This can be used for structural sharing between JSON values for example.
	 */

	function replaceEqualDeep(a, b) {
	  if (a === b) {
	    return a;
	  }

	  var array = Array.isArray(a) && Array.isArray(b);

	  if (array || isPlainObject(a) && isPlainObject(b)) {
	    var aSize = array ? a.length : Object.keys(a).length;
	    var bItems = array ? b : Object.keys(b);
	    var bSize = bItems.length;
	    var copy = array ? [] : {};
	    var equalItems = 0;

	    for (var i = 0; i < bSize; i++) {
	      var key = array ? i : bItems[i];
	      copy[key] = replaceEqualDeep(a[key], b[key]);

	      if (copy[key] === a[key]) {
	        equalItems++;
	      }
	    }

	    return aSize === bSize && equalItems === aSize ? a : copy;
	  }

	  return b;
	}
	/**
	 * Shallow compare objects. Only works with objects that always have the same properties.
	 */

	function shallowEqualObjects(a, b) {
	  if (a && !b || b && !a) {
	    return false;
	  }

	  for (var key in a) {
	    if (a[key] !== b[key]) {
	      return false;
	    }
	  }

	  return true;
	} // Copied from: https://github.com/jonschlinkert/is-plain-object

	function isPlainObject(o) {
	  if (!hasObjectPrototype(o)) {
	    return false;
	  } // If has modified constructor


	  var ctor = o.constructor;

	  if (typeof ctor === 'undefined') {
	    return true;
	  } // If has modified prototype


	  var prot = ctor.prototype;

	  if (!hasObjectPrototype(prot)) {
	    return false;
	  } // If constructor does not have an Object-specific method


	  if (!prot.hasOwnProperty('isPrototypeOf')) {
	    return false;
	  } // Most likely a plain Object


	  return true;
	}

	function hasObjectPrototype(o) {
	  return Object.prototype.toString.call(o) === '[object Object]';
	}

	function isQueryKey(value) {
	  return typeof value === 'string' || Array.isArray(value);
	}
	function sleep(timeout) {
	  return new Promise(function (resolve) {
	    setTimeout(resolve, timeout);
	  });
	}
	/**
	 * Schedules a microtask.
	 * This can be useful to schedule state updates after rendering.
	 */

	function scheduleMicrotask(callback) {
	  Promise.resolve().then(callback).catch(function (error) {
	    return setTimeout(function () {
	      throw error;
	    });
	  });
	}

	var FocusManager = /*#__PURE__*/function (_Subscribable) {
	  _inheritsLoose$1(FocusManager, _Subscribable);

	  function FocusManager() {
	    return _Subscribable.apply(this, arguments) || this;
	  }

	  var _proto = FocusManager.prototype;

	  _proto.onSubscribe = function onSubscribe() {
	    if (!this.removeEventListener) {
	      this.setDefaultEventListener();
	    }
	  };

	  _proto.setEventListener = function setEventListener(setup) {
	    var _this = this;

	    if (this.removeEventListener) {
	      this.removeEventListener();
	    }

	    this.removeEventListener = setup(function (focused) {
	      if (typeof focused === 'boolean') {
	        _this.setFocused(focused);
	      } else {
	        _this.onFocus();
	      }
	    });
	  };

	  _proto.setFocused = function setFocused(focused) {
	    this.focused = focused;

	    if (focused) {
	      this.onFocus();
	    }
	  };

	  _proto.onFocus = function onFocus() {
	    this.listeners.forEach(function (listener) {
	      listener();
	    });
	  };

	  _proto.isFocused = function isFocused() {
	    if (typeof this.focused === 'boolean') {
	      return this.focused;
	    } // document global can be unavailable in react native


	    if (typeof document === 'undefined') {
	      return true;
	    }

	    return [undefined, 'visible', 'prerender'].includes(document.visibilityState);
	  };

	  _proto.setDefaultEventListener = function setDefaultEventListener() {
	    var _window;

	    if (!isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {
	      this.setEventListener(function (onFocus) {
	        var listener = function listener() {
	          return onFocus();
	        }; // Listen to visibillitychange and focus


	        window.addEventListener('visibilitychange', listener, false);
	        window.addEventListener('focus', listener, false);
	        return function () {
	          // Be sure to unsubscribe if a new handler is set
	          window.removeEventListener('visibilitychange', listener);
	          window.removeEventListener('focus', listener);
	        };
	      });
	    }
	  };

	  return FocusManager;
	}(Subscribable);

	var focusManager = new FocusManager();

	var OnlineManager = /*#__PURE__*/function (_Subscribable) {
	  _inheritsLoose$1(OnlineManager, _Subscribable);

	  function OnlineManager() {
	    return _Subscribable.apply(this, arguments) || this;
	  }

	  var _proto = OnlineManager.prototype;

	  _proto.onSubscribe = function onSubscribe() {
	    if (!this.removeEventListener) {
	      this.setDefaultEventListener();
	    }
	  };

	  _proto.setEventListener = function setEventListener(setup) {
	    var _this = this;

	    if (this.removeEventListener) {
	      this.removeEventListener();
	    }

	    this.removeEventListener = setup(function (online) {
	      if (typeof online === 'boolean') {
	        _this.setOnline(online);
	      } else {
	        _this.onOnline();
	      }
	    });
	  };

	  _proto.setOnline = function setOnline(online) {
	    this.online = online;

	    if (online) {
	      this.onOnline();
	    }
	  };

	  _proto.onOnline = function onOnline() {
	    this.listeners.forEach(function (listener) {
	      listener();
	    });
	  };

	  _proto.isOnline = function isOnline() {
	    if (typeof this.online === 'boolean') {
	      return this.online;
	    }

	    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {
	      return true;
	    }

	    return navigator.onLine;
	  };

	  _proto.setDefaultEventListener = function setDefaultEventListener() {
	    var _window;

	    if (!isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {
	      this.setEventListener(function (onOnline) {
	        var listener = function listener() {
	          return onOnline();
	        }; // Listen to online


	        window.addEventListener('online', listener, false);
	        window.addEventListener('offline', listener, false);
	        return function () {
	          // Be sure to unsubscribe if a new handler is set
	          window.removeEventListener('online', listener);
	          window.removeEventListener('offline', listener);
	        };
	      });
	    }
	  };

	  return OnlineManager;
	}(Subscribable);

	var onlineManager = new OnlineManager();

	function defaultRetryDelay(failureCount) {
	  return Math.min(1000 * Math.pow(2, failureCount), 30000);
	}

	function isCancelable(value) {
	  return typeof (value == null ? void 0 : value.cancel) === 'function';
	}
	var CancelledError = function CancelledError(options) {
	  this.revert = options == null ? void 0 : options.revert;
	  this.silent = options == null ? void 0 : options.silent;
	};
	function isCancelledError(value) {
	  return value instanceof CancelledError;
	} // CLASS

	var Retryer = function Retryer(config) {
	  var _this = this;

	  var cancelRetry = false;
	  var cancelFn;
	  var continueFn;
	  var promiseResolve;
	  var promiseReject;

	  this.cancel = function (cancelOptions) {
	    return cancelFn == null ? void 0 : cancelFn(cancelOptions);
	  };

	  this.cancelRetry = function () {
	    cancelRetry = true;
	  };

	  this.continue = function () {
	    return continueFn == null ? void 0 : continueFn();
	  };

	  this.failureCount = 0;
	  this.isPaused = false;
	  this.isResolved = false;
	  this.isTransportCancelable = false;
	  this.promise = new Promise(function (outerResolve, outerReject) {
	    promiseResolve = outerResolve;
	    promiseReject = outerReject;
	  });

	  var resolve = function resolve(value) {
	    if (!_this.isResolved) {
	      _this.isResolved = true;
	      config.onSuccess == null ? void 0 : config.onSuccess(value);
	      continueFn == null ? void 0 : continueFn();
	      promiseResolve(value);
	    }
	  };

	  var reject = function reject(value) {
	    if (!_this.isResolved) {
	      _this.isResolved = true;
	      config.onError == null ? void 0 : config.onError(value);
	      continueFn == null ? void 0 : continueFn();
	      promiseReject(value);
	    }
	  };

	  var pause = function pause() {
	    return new Promise(function (continueResolve) {
	      continueFn = continueResolve;
	      _this.isPaused = true;
	      config.onPause == null ? void 0 : config.onPause();
	    }).then(function () {
	      continueFn = undefined;
	      _this.isPaused = false;
	      config.onContinue == null ? void 0 : config.onContinue();
	    });
	  }; // Create loop function


	  var run = function run() {
	    // Do nothing if already resolved
	    if (_this.isResolved) {
	      return;
	    }

	    var promiseOrValue; // Execute query

	    try {
	      promiseOrValue = config.fn();
	    } catch (error) {
	      promiseOrValue = Promise.reject(error);
	    } // Create callback to cancel this fetch


	    cancelFn = function cancelFn(cancelOptions) {
	      if (!_this.isResolved) {
	        reject(new CancelledError(cancelOptions)); // Cancel transport if supported

	        if (isCancelable(promiseOrValue)) {
	          try {
	            promiseOrValue.cancel();
	          } catch (_unused) {}
	        }
	      }
	    }; // Check if the transport layer support cancellation


	    _this.isTransportCancelable = isCancelable(promiseOrValue);
	    Promise.resolve(promiseOrValue).then(resolve).catch(function (error) {
	      var _config$retry, _config$retryDelay;

	      // Stop if the fetch is already resolved
	      if (_this.isResolved) {
	        return;
	      } // Do we need to retry the request?


	      var retry = (_config$retry = config.retry) != null ? _config$retry : 3;
	      var retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;
	      var delay = typeof retryDelay === 'function' ? retryDelay(_this.failureCount, error) : retryDelay;
	      var shouldRetry = retry === true || typeof retry === 'number' && _this.failureCount < retry || typeof retry === 'function' && retry(_this.failureCount, error);

	      if (cancelRetry || !shouldRetry) {
	        // We are done if the query does not need to be retried
	        reject(error);
	        return;
	      }

	      _this.failureCount++; // Notify on fail

	      config.onFail == null ? void 0 : config.onFail(_this.failureCount, error); // Delay

	      sleep(delay) // Pause if the document is not visible or when the device is offline
	      .then(function () {
	        if (!focusManager.isFocused() || !onlineManager.isOnline()) {
	          return pause();
	        }
	      }).then(function () {
	        if (cancelRetry) {
	          reject(error);
	        } else {
	          run();
	        }
	      });
	    });
	  }; // Start loop


	  run();
	};

	// CLASS
	var NotifyManager = /*#__PURE__*/function () {
	  function NotifyManager() {
	    this.queue = [];
	    this.transactions = 0;

	    this.notifyFn = function (callback) {
	      callback();
	    };

	    this.batchNotifyFn = function (callback) {
	      callback();
	    };
	  }

	  var _proto = NotifyManager.prototype;

	  _proto.batch = function batch(callback) {
	    this.transactions++;
	    var result = callback();
	    this.transactions--;

	    if (!this.transactions) {
	      this.flush();
	    }

	    return result;
	  };

	  _proto.schedule = function schedule(callback) {
	    var _this = this;

	    if (this.transactions) {
	      this.queue.push(callback);
	    } else {
	      scheduleMicrotask(function () {
	        _this.notifyFn(callback);
	      });
	    }
	  }
	  /**
	   * All calls to the wrapped function will be batched.
	   */
	  ;

	  _proto.batchCalls = function batchCalls(callback) {
	    var _this2 = this;

	    return function () {
	      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      _this2.schedule(function () {
	        callback.apply(void 0, args);
	      });
	    };
	  };

	  _proto.flush = function flush() {
	    var _this3 = this;

	    var queue = this.queue;
	    this.queue = [];

	    if (queue.length) {
	      scheduleMicrotask(function () {
	        _this3.batchNotifyFn(function () {
	          queue.forEach(function (callback) {
	            _this3.notifyFn(callback);
	          });
	        });
	      });
	    }
	  }
	  /**
	   * Use this method to set a custom notify function.
	   * This can be used to for example wrap notifications with `React.act` while running tests.
	   */
	  ;

	  _proto.setNotifyFunction = function setNotifyFunction(fn) {
	    this.notifyFn = fn;
	  }
	  /**
	   * Use this method to set a custom function to batch notifications together into a single tick.
	   * By default React Query will use the batch function provided by ReactDOM or React Native.
	   */
	  ;

	  _proto.setBatchNotifyFunction = function setBatchNotifyFunction(fn) {
	    this.batchNotifyFn = fn;
	  };

	  return NotifyManager;
	}(); // SINGLETON


	var notifyManager = new NotifyManager();

	// FUNCTIONS
	var logger = console || {
	  error: noop$1,
	  warn: noop$1,
	  log: noop$1
	};
	function getLogger() {
	  return logger;
	}

	// CLASS
	var Query = /*#__PURE__*/function () {
	  function Query(config) {
	    this.defaultOptions = config.defaultOptions;
	    this.setOptions(config.options);
	    this.observers = [];
	    this.cache = config.cache;
	    this.queryKey = config.queryKey;
	    this.queryHash = config.queryHash;
	    this.initialState = config.state || this.getDefaultState(this.options);
	    this.state = this.initialState;
	    this.scheduleGc();
	  }

	  var _proto = Query.prototype;

	  _proto.setOptions = function setOptions(options) {
	    var _this$options$cacheTi;

	    this.options = _extends$3({}, this.defaultOptions, options); // Default to 5 minutes if not cache time is set

	    this.cacheTime = Math.max(this.cacheTime || 0, (_this$options$cacheTi = this.options.cacheTime) != null ? _this$options$cacheTi : 5 * 60 * 1000);
	  };

	  _proto.setDefaultOptions = function setDefaultOptions(options) {
	    this.defaultOptions = options;
	  };

	  _proto.scheduleGc = function scheduleGc() {
	    var _this = this;

	    this.clearGcTimeout();

	    if (isValidTimeout(this.cacheTime)) {
	      this.gcTimeout = setTimeout(function () {
	        _this.optionalRemove();
	      }, this.cacheTime);
	    }
	  };

	  _proto.clearGcTimeout = function clearGcTimeout() {
	    clearTimeout(this.gcTimeout);
	    this.gcTimeout = undefined;
	  };

	  _proto.optionalRemove = function optionalRemove() {
	    if (!this.observers.length && !this.state.isFetching) {
	      this.cache.remove(this);
	    }
	  };

	  _proto.setData = function setData(updater, options) {
	    var _this$options$isDataE, _this$options;

	    var prevData = this.state.data; // Get the new data

	    var data = functionalUpdate(updater, prevData); // Use prev data if an isDataEqual function is defined and returns `true`

	    if ((_this$options$isDataE = (_this$options = this.options).isDataEqual) == null ? void 0 : _this$options$isDataE.call(_this$options, prevData, data)) {
	      data = prevData;
	    } else if (this.options.structuralSharing !== false) {
	      // Structurally share data between prev and new data if needed
	      data = replaceEqualDeep(prevData, data);
	    } // Set data and mark it as cached


	    this.dispatch({
	      data: data,
	      type: 'success',
	      dataUpdatedAt: options == null ? void 0 : options.updatedAt
	    });
	    return data;
	  };

	  _proto.setState = function setState(state, setStateOptions) {
	    this.dispatch({
	      type: 'setState',
	      state: state,
	      setStateOptions: setStateOptions
	    });
	  };

	  _proto.cancel = function cancel(options) {
	    var _this$retryer;

	    var promise = this.promise;
	    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);
	    return promise ? promise.then(noop$1).catch(noop$1) : Promise.resolve();
	  };

	  _proto.destroy = function destroy() {
	    this.clearGcTimeout();
	    this.cancel({
	      silent: true
	    });
	  };

	  _proto.reset = function reset() {
	    this.destroy();
	    this.setState(this.initialState);
	  };

	  _proto.isActive = function isActive() {
	    return this.observers.some(function (observer) {
	      return observer.options.enabled !== false;
	    });
	  };

	  _proto.isFetching = function isFetching() {
	    return this.state.isFetching;
	  };

	  _proto.isStale = function isStale() {
	    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(function (observer) {
	      return observer.getCurrentResult().isStale;
	    });
	  };

	  _proto.isStaleByTime = function isStaleByTime(staleTime) {
	    if (staleTime === void 0) {
	      staleTime = 0;
	    }

	    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);
	  };

	  _proto.onFocus = function onFocus() {
	    var _this$retryer2;

	    var observer = this.observers.find(function (x) {
	      return x.shouldFetchOnWindowFocus();
	    });

	    if (observer) {
	      observer.refetch();
	    } // Continue fetch if currently paused


	    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();
	  };

	  _proto.onOnline = function onOnline() {
	    var _this$retryer3;

	    var observer = this.observers.find(function (x) {
	      return x.shouldFetchOnReconnect();
	    });

	    if (observer) {
	      observer.refetch();
	    } // Continue fetch if currently paused


	    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();
	  };

	  _proto.addObserver = function addObserver(observer) {
	    if (this.observers.indexOf(observer) === -1) {
	      this.observers.push(observer); // Stop the query from being garbage collected

	      this.clearGcTimeout();
	      this.cache.notify({
	        type: 'observerAdded',
	        query: this,
	        observer: observer
	      });
	    }
	  };

	  _proto.removeObserver = function removeObserver(observer) {
	    if (this.observers.indexOf(observer) !== -1) {
	      this.observers = this.observers.filter(function (x) {
	        return x !== observer;
	      });

	      if (!this.observers.length) {
	        // If the transport layer does not support cancellation
	        // we'll let the query continue so the result can be cached
	        if (this.retryer) {
	          if (this.retryer.isTransportCancelable) {
	            this.retryer.cancel({
	              revert: true
	            });
	          } else {
	            this.retryer.cancelRetry();
	          }
	        }

	        if (this.cacheTime) {
	          this.scheduleGc();
	        } else {
	          this.cache.remove(this);
	        }
	      }

	      this.cache.notify({
	        type: 'observerRemoved',
	        query: this,
	        observer: observer
	      });
	    }
	  };

	  _proto.getObserversCount = function getObserversCount() {
	    return this.observers.length;
	  };

	  _proto.invalidate = function invalidate() {
	    if (!this.state.isInvalidated) {
	      this.dispatch({
	        type: 'invalidate'
	      });
	    }
	  };

	  _proto.fetch = function fetch(options, fetchOptions) {
	    var _this2 = this,
	        _this$options$behavio,
	        _context$fetchOptions;

	    if (this.state.isFetching) {
	      if (this.state.dataUpdatedAt && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {
	        // Silently cancel current fetch if the user wants to cancel refetches
	        this.cancel({
	          silent: true
	        });
	      } else if (this.promise) {
	        // Return current promise if we are already fetching
	        return this.promise;
	      }
	    } // Update config if passed, otherwise the config from the last execution is used


	    if (options) {
	      this.setOptions(options);
	    } // Use the options from the first observer with a query function if no function is found.
	    // This can happen when the query is hydrated or created with setQueryData.


	    if (!this.options.queryFn) {
	      var observer = this.observers.find(function (x) {
	        return x.options.queryFn;
	      });

	      if (observer) {
	        this.setOptions(observer.options);
	      }
	    }

	    var queryKey = ensureQueryKeyArray(this.queryKey); // Create query function context

	    var queryFnContext = {
	      queryKey: queryKey,
	      pageParam: undefined
	    }; // Create fetch function

	    var fetchFn = function fetchFn() {
	      return _this2.options.queryFn ? _this2.options.queryFn(queryFnContext) : Promise.reject('Missing queryFn');
	    }; // Trigger behavior hook


	    var context = {
	      fetchOptions: fetchOptions,
	      options: this.options,
	      queryKey: queryKey,
	      state: this.state,
	      fetchFn: fetchFn
	    };

	    if ((_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch) {
	      var _this$options$behavio2;

	      (_this$options$behavio2 = this.options.behavior) == null ? void 0 : _this$options$behavio2.onFetch(context);
	    } // Store state in case the current fetch needs to be reverted


	    this.revertState = this.state; // Set to fetching state if not already in it

	    if (!this.state.isFetching || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {
	      var _context$fetchOptions2;

	      this.dispatch({
	        type: 'fetch',
	        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta
	      });
	    } // Try to fetch the data


	    this.retryer = new Retryer({
	      fn: context.fetchFn,
	      onSuccess: function onSuccess(data) {
	        _this2.setData(data); // Notify cache callback


	        _this2.cache.config.onSuccess == null ? void 0 : _this2.cache.config.onSuccess(data, _this2); // Remove query after fetching if cache time is 0

	        if (_this2.cacheTime === 0) {
	          _this2.optionalRemove();
	        }
	      },
	      onError: function onError(error) {
	        // Optimistically update state if needed
	        if (!(isCancelledError(error) && error.silent)) {
	          _this2.dispatch({
	            type: 'error',
	            error: error
	          });
	        }

	        if (!isCancelledError(error)) {
	          // Notify cache callback
	          _this2.cache.config.onError == null ? void 0 : _this2.cache.config.onError(error, _this2); // Log error

	          getLogger().error(error);
	        } // Remove query after fetching if cache time is 0


	        if (_this2.cacheTime === 0) {
	          _this2.optionalRemove();
	        }
	      },
	      onFail: function onFail() {
	        _this2.dispatch({
	          type: 'failed'
	        });
	      },
	      onPause: function onPause() {
	        _this2.dispatch({
	          type: 'pause'
	        });
	      },
	      onContinue: function onContinue() {
	        _this2.dispatch({
	          type: 'continue'
	        });
	      },
	      retry: context.options.retry,
	      retryDelay: context.options.retryDelay
	    });
	    this.promise = this.retryer.promise;
	    return this.promise;
	  };

	  _proto.dispatch = function dispatch(action) {
	    var _this3 = this;

	    this.state = this.reducer(this.state, action);
	    notifyManager.batch(function () {
	      _this3.observers.forEach(function (observer) {
	        observer.onQueryUpdate(action);
	      });

	      _this3.cache.notify({
	        query: _this3,
	        type: 'queryUpdated',
	        action: action
	      });
	    });
	  };

	  _proto.getDefaultState = function getDefaultState(options) {
	    var data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;
	    var hasInitialData = typeof options.initialData !== 'undefined';
	    var initialDataUpdatedAt = hasInitialData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
	    var hasData = typeof data !== 'undefined';
	    return {
	      data: data,
	      dataUpdateCount: 0,
	      dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,
	      error: null,
	      errorUpdateCount: 0,
	      errorUpdatedAt: 0,
	      fetchFailureCount: 0,
	      fetchMeta: null,
	      isFetching: false,
	      isInvalidated: false,
	      isPaused: false,
	      status: hasData ? 'success' : 'idle'
	    };
	  };

	  _proto.reducer = function reducer(state, action) {
	    var _action$meta, _action$dataUpdatedAt;

	    switch (action.type) {
	      case 'failed':
	        return _extends$3({}, state, {
	          fetchFailureCount: state.fetchFailureCount + 1
	        });

	      case 'pause':
	        return _extends$3({}, state, {
	          isPaused: true
	        });

	      case 'continue':
	        return _extends$3({}, state, {
	          isPaused: false
	        });

	      case 'fetch':
	        return _extends$3({}, state, {
	          fetchFailureCount: 0,
	          fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,
	          isFetching: true,
	          isPaused: false,
	          status: !state.dataUpdatedAt ? 'loading' : state.status
	        });

	      case 'success':
	        return _extends$3({}, state, {
	          data: action.data,
	          dataUpdateCount: state.dataUpdateCount + 1,
	          dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),
	          error: null,
	          fetchFailureCount: 0,
	          isFetching: false,
	          isInvalidated: false,
	          isPaused: false,
	          status: 'success'
	        });

	      case 'error':
	        var error = action.error;

	        if (isCancelledError(error) && error.revert && this.revertState) {
	          return _extends$3({}, this.revertState);
	        }

	        return _extends$3({}, state, {
	          error: error,
	          errorUpdateCount: state.errorUpdateCount + 1,
	          errorUpdatedAt: Date.now(),
	          fetchFailureCount: state.fetchFailureCount + 1,
	          isFetching: false,
	          isPaused: false,
	          status: 'error'
	        });

	      case 'invalidate':
	        return _extends$3({}, state, {
	          isInvalidated: true
	        });

	      case 'setState':
	        return _extends$3({}, state, action.state);

	      default:
	        return state;
	    }
	  };

	  return Query;
	}();

	// CLASS
	var QueryCache = /*#__PURE__*/function (_Subscribable) {
	  _inheritsLoose$1(QueryCache, _Subscribable);

	  function QueryCache(config) {
	    var _this;

	    _this = _Subscribable.call(this) || this;
	    _this.config = config || {};
	    _this.queries = [];
	    _this.queriesMap = {};
	    return _this;
	  }

	  var _proto = QueryCache.prototype;

	  _proto.build = function build(client, options, state) {
	    var _options$queryHash;

	    var queryKey = options.queryKey;
	    var queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);
	    var query = this.get(queryHash);

	    if (!query) {
	      query = new Query({
	        cache: this,
	        queryKey: queryKey,
	        queryHash: queryHash,
	        options: client.defaultQueryOptions(options),
	        state: state,
	        defaultOptions: client.getQueryDefaults(queryKey)
	      });
	      this.add(query);
	    }

	    return query;
	  };

	  _proto.add = function add(query) {
	    if (!this.queriesMap[query.queryHash]) {
	      this.queriesMap[query.queryHash] = query;
	      this.queries.push(query);
	      this.notify({
	        type: 'queryAdded',
	        query: query
	      });
	    }
	  };

	  _proto.remove = function remove(query) {
	    var queryInMap = this.queriesMap[query.queryHash];

	    if (queryInMap) {
	      query.destroy();
	      this.queries = this.queries.filter(function (x) {
	        return x !== query;
	      });

	      if (queryInMap === query) {
	        delete this.queriesMap[query.queryHash];
	      }

	      this.notify({
	        type: 'queryRemoved',
	        query: query
	      });
	    }
	  };

	  _proto.clear = function clear() {
	    var _this2 = this;

	    notifyManager.batch(function () {
	      _this2.queries.forEach(function (query) {
	        _this2.remove(query);
	      });
	    });
	  };

	  _proto.get = function get(queryHash) {
	    return this.queriesMap[queryHash];
	  };

	  _proto.getAll = function getAll() {
	    return this.queries;
	  };

	  _proto.find = function find(arg1, arg2) {
	    var _parseFilterArgs = parseFilterArgs(arg1, arg2),
	        filters = _parseFilterArgs[0];

	    if (typeof filters.exact === 'undefined') {
	      filters.exact = true;
	    }

	    return this.queries.find(function (query) {
	      return matchQuery(filters, query);
	    });
	  };

	  _proto.findAll = function findAll(arg1, arg2) {
	    var _parseFilterArgs2 = parseFilterArgs(arg1, arg2),
	        filters = _parseFilterArgs2[0];

	    return filters ? this.queries.filter(function (query) {
	      return matchQuery(filters, query);
	    }) : this.queries;
	  };

	  _proto.notify = function notify(event) {
	    var _this3 = this;

	    notifyManager.batch(function () {
	      _this3.listeners.forEach(function (listener) {
	        listener(event);
	      });
	    });
	  };

	  _proto.onFocus = function onFocus() {
	    var _this4 = this;

	    notifyManager.batch(function () {
	      _this4.queries.forEach(function (query) {
	        query.onFocus();
	      });
	    });
	  };

	  _proto.onOnline = function onOnline() {
	    var _this5 = this;

	    notifyManager.batch(function () {
	      _this5.queries.forEach(function (query) {
	        query.onOnline();
	      });
	    });
	  };

	  return QueryCache;
	}(Subscribable);

	// CLASS
	var Mutation = /*#__PURE__*/function () {
	  function Mutation(config) {
	    this.options = _extends$3({}, config.defaultOptions, config.options);
	    this.mutationId = config.mutationId;
	    this.mutationCache = config.mutationCache;
	    this.observers = [];
	    this.state = config.state || getDefaultState();
	  }

	  var _proto = Mutation.prototype;

	  _proto.setState = function setState(state) {
	    this.dispatch({
	      type: 'setState',
	      state: state
	    });
	  };

	  _proto.addObserver = function addObserver(observer) {
	    if (this.observers.indexOf(observer) === -1) {
	      this.observers.push(observer);
	    }
	  };

	  _proto.removeObserver = function removeObserver(observer) {
	    this.observers = this.observers.filter(function (x) {
	      return x !== observer;
	    });
	  };

	  _proto.cancel = function cancel() {
	    if (this.retryer) {
	      this.retryer.cancel();
	      return this.retryer.promise.then(noop$1).catch(noop$1);
	    }

	    return Promise.resolve();
	  };

	  _proto.continue = function _continue() {
	    if (this.retryer) {
	      this.retryer.continue();
	      return this.retryer.promise;
	    }

	    return this.execute();
	  };

	  _proto.execute = function execute() {
	    var _this = this;

	    var data;
	    var restored = this.state.status === 'loading';
	    var promise = Promise.resolve();

	    if (!restored) {
	      this.dispatch({
	        type: 'loading',
	        variables: this.options.variables
	      });
	      promise = promise.then(function () {
	        return _this.options.onMutate == null ? void 0 : _this.options.onMutate(_this.state.variables);
	      }).then(function (context) {
	        if (context !== _this.state.context) {
	          _this.dispatch({
	            type: 'loading',
	            context: context,
	            variables: _this.state.variables
	          });
	        }
	      });
	    }

	    return promise.then(function () {
	      return _this.executeMutation();
	    }).then(function (result) {
	      data = result; // Notify cache callback

	      _this.mutationCache.config.onSuccess == null ? void 0 : _this.mutationCache.config.onSuccess(data, _this.state.variables, _this.state.context, _this);
	    }).then(function () {
	      return _this.options.onSuccess == null ? void 0 : _this.options.onSuccess(data, _this.state.variables, _this.state.context);
	    }).then(function () {
	      return _this.options.onSettled == null ? void 0 : _this.options.onSettled(data, null, _this.state.variables, _this.state.context);
	    }).then(function () {
	      _this.dispatch({
	        type: 'success',
	        data: data
	      });

	      return data;
	    }).catch(function (error) {
	      // Notify cache callback
	      _this.mutationCache.config.onError == null ? void 0 : _this.mutationCache.config.onError(error, _this.state.variables, _this.state.context, _this); // Log error

	      getLogger().error(error);
	      return Promise.resolve().then(function () {
	        return _this.options.onError == null ? void 0 : _this.options.onError(error, _this.state.variables, _this.state.context);
	      }).then(function () {
	        return _this.options.onSettled == null ? void 0 : _this.options.onSettled(undefined, error, _this.state.variables, _this.state.context);
	      }).then(function () {
	        _this.dispatch({
	          type: 'error',
	          error: error
	        });

	        throw error;
	      });
	    });
	  };

	  _proto.executeMutation = function executeMutation() {
	    var _this2 = this,
	        _this$options$retry;

	    this.retryer = new Retryer({
	      fn: function fn() {
	        if (!_this2.options.mutationFn) {
	          return Promise.reject('No mutationFn found');
	        }

	        return _this2.options.mutationFn(_this2.state.variables);
	      },
	      onFail: function onFail() {
	        _this2.dispatch({
	          type: 'failed'
	        });
	      },
	      onPause: function onPause() {
	        _this2.dispatch({
	          type: 'pause'
	        });
	      },
	      onContinue: function onContinue() {
	        _this2.dispatch({
	          type: 'continue'
	        });
	      },
	      retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,
	      retryDelay: this.options.retryDelay
	    });
	    return this.retryer.promise;
	  };

	  _proto.dispatch = function dispatch(action) {
	    var _this3 = this;

	    this.state = reducer(this.state, action);
	    notifyManager.batch(function () {
	      _this3.observers.forEach(function (observer) {
	        observer.onMutationUpdate(action);
	      });

	      _this3.mutationCache.notify(_this3);
	    });
	  };

	  return Mutation;
	}();
	function getDefaultState() {
	  return {
	    context: undefined,
	    data: undefined,
	    error: null,
	    failureCount: 0,
	    isPaused: false,
	    status: 'idle',
	    variables: undefined
	  };
	}

	function reducer(state, action) {
	  switch (action.type) {
	    case 'failed':
	      return _extends$3({}, state, {
	        failureCount: state.failureCount + 1
	      });

	    case 'pause':
	      return _extends$3({}, state, {
	        isPaused: true
	      });

	    case 'continue':
	      return _extends$3({}, state, {
	        isPaused: false
	      });

	    case 'loading':
	      return _extends$3({}, state, {
	        context: action.context,
	        data: undefined,
	        error: null,
	        isPaused: false,
	        status: 'loading',
	        variables: action.variables
	      });

	    case 'success':
	      return _extends$3({}, state, {
	        data: action.data,
	        error: null,
	        status: 'success',
	        isPaused: false
	      });

	    case 'error':
	      return _extends$3({}, state, {
	        data: undefined,
	        error: action.error,
	        failureCount: state.failureCount + 1,
	        isPaused: false,
	        status: 'error'
	      });

	    case 'setState':
	      return _extends$3({}, state, action.state);

	    default:
	      return state;
	  }
	}

	// CLASS
	var MutationCache = /*#__PURE__*/function (_Subscribable) {
	  _inheritsLoose$1(MutationCache, _Subscribable);

	  function MutationCache(config) {
	    var _this;

	    _this = _Subscribable.call(this) || this;
	    _this.config = config || {};
	    _this.mutations = [];
	    _this.mutationId = 0;
	    return _this;
	  }

	  var _proto = MutationCache.prototype;

	  _proto.build = function build(client, options, state) {
	    var mutation = new Mutation({
	      mutationCache: this,
	      mutationId: ++this.mutationId,
	      options: client.defaultMutationOptions(options),
	      state: state,
	      defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : undefined
	    });
	    this.add(mutation);
	    return mutation;
	  };

	  _proto.add = function add(mutation) {
	    this.mutations.push(mutation);
	    this.notify(mutation);
	  };

	  _proto.remove = function remove(mutation) {
	    this.mutations = this.mutations.filter(function (x) {
	      return x !== mutation;
	    });
	    mutation.cancel();
	    this.notify(mutation);
	  };

	  _proto.clear = function clear() {
	    var _this2 = this;

	    notifyManager.batch(function () {
	      _this2.mutations.forEach(function (mutation) {
	        _this2.remove(mutation);
	      });
	    });
	  };

	  _proto.getAll = function getAll() {
	    return this.mutations;
	  };

	  _proto.find = function find(filters) {
	    if (typeof filters.exact === 'undefined') {
	      filters.exact = true;
	    }

	    return this.mutations.find(function (mutation) {
	      return matchMutation(filters, mutation);
	    });
	  };

	  _proto.findAll = function findAll(filters) {
	    return this.mutations.filter(function (mutation) {
	      return matchMutation(filters, mutation);
	    });
	  };

	  _proto.notify = function notify(mutation) {
	    var _this3 = this;

	    notifyManager.batch(function () {
	      _this3.listeners.forEach(function (listener) {
	        listener(mutation);
	      });
	    });
	  };

	  _proto.onFocus = function onFocus() {
	    this.resumePausedMutations();
	  };

	  _proto.onOnline = function onOnline() {
	    this.resumePausedMutations();
	  };

	  _proto.resumePausedMutations = function resumePausedMutations() {
	    var pausedMutations = this.mutations.filter(function (x) {
	      return x.state.isPaused;
	    });
	    return notifyManager.batch(function () {
	      return pausedMutations.reduce(function (promise, mutation) {
	        return promise.then(function () {
	          return mutation.continue().catch(noop$1);
	        });
	      }, Promise.resolve());
	    });
	  };

	  return MutationCache;
	}(Subscribable);

	function infiniteQueryBehavior() {
	  return {
	    onFetch: function onFetch(context) {
	      context.fetchFn = function () {
	        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;

	        var refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;
	        var fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;
	        var pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;
	        var isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';
	        var isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';
	        var oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];
	        var oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];
	        var newPageParams = oldPageParams;
	        var cancelled = false; // Get query function

	        var queryFn = context.options.queryFn || function () {
	          return Promise.reject('Missing queryFn');
	        };

	        var buildNewPages = function buildNewPages(pages, param, page, previous) {
	          newPageParams = previous ? [param].concat(newPageParams) : [].concat(newPageParams, [param]);
	          return previous ? [page].concat(pages) : [].concat(pages, [page]);
	        }; // Create function to fetch a page


	        var fetchPage = function fetchPage(pages, manual, param, previous) {
	          if (cancelled) {
	            return Promise.reject('Cancelled');
	          }

	          if (typeof param === 'undefined' && !manual && pages.length) {
	            return Promise.resolve(pages);
	          }

	          var queryFnContext = {
	            queryKey: context.queryKey,
	            pageParam: param
	          };
	          var queryFnResult = queryFn(queryFnContext);
	          var promise = Promise.resolve(queryFnResult).then(function (page) {
	            return buildNewPages(pages, param, page, previous);
	          });

	          if (isCancelable(queryFnResult)) {
	            var promiseAsAny = promise;
	            promiseAsAny.cancel = queryFnResult.cancel;
	          }

	          return promise;
	        };

	        var promise; // Fetch first page?

	        if (!oldPages.length) {
	          promise = fetchPage([]);
	        } // Fetch next page?
	        else if (isFetchingNextPage) {
	            var manual = typeof pageParam !== 'undefined';
	            var param = manual ? pageParam : getNextPageParam(context.options, oldPages);
	            promise = fetchPage(oldPages, manual, param);
	          } // Fetch previous page?
	          else if (isFetchingPreviousPage) {
	              var _manual = typeof pageParam !== 'undefined';

	              var _param = _manual ? pageParam : getPreviousPageParam(context.options, oldPages);

	              promise = fetchPage(oldPages, _manual, _param, true);
	            } // Refetch pages
	            else {
	                (function () {
	                  newPageParams = [];
	                  var manual = typeof context.options.getNextPageParam === 'undefined';
	                  var shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page

	                  promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages

	                  var _loop = function _loop(i) {
	                    promise = promise.then(function (pages) {
	                      var shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;

	                      if (shouldFetchNextPage) {
	                        var _param2 = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);

	                        return fetchPage(pages, manual, _param2);
	                      }

	                      return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));
	                    });
	                  };

	                  for (var i = 1; i < oldPages.length; i++) {
	                    _loop(i);
	                  }
	                })();
	              }

	        var finalPromise = promise.then(function (pages) {
	          return {
	            pages: pages,
	            pageParams: newPageParams
	          };
	        });
	        var finalPromiseAsAny = finalPromise;

	        finalPromiseAsAny.cancel = function () {
	          cancelled = true;

	          if (isCancelable(promise)) {
	            promise.cancel();
	          }
	        };

	        return finalPromise;
	      };
	    }
	  };
	}
	function getNextPageParam(options, pages) {
	  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);
	}
	function getPreviousPageParam(options, pages) {
	  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);
	}

	// CLASS
	var QueryClient = /*#__PURE__*/function () {
	  function QueryClient(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    this.queryCache = config.queryCache || new QueryCache();
	    this.mutationCache = config.mutationCache || new MutationCache();
	    this.defaultOptions = config.defaultOptions || {};
	    this.queryDefaults = [];
	    this.mutationDefaults = [];
	  }

	  var _proto = QueryClient.prototype;

	  _proto.mount = function mount() {
	    var _this = this;

	    this.unsubscribeFocus = focusManager.subscribe(function () {
	      if (focusManager.isFocused() && onlineManager.isOnline()) {
	        _this.mutationCache.onFocus();

	        _this.queryCache.onFocus();
	      }
	    });
	    this.unsubscribeOnline = onlineManager.subscribe(function () {
	      if (focusManager.isFocused() && onlineManager.isOnline()) {
	        _this.mutationCache.onOnline();

	        _this.queryCache.onOnline();
	      }
	    });
	  };

	  _proto.unmount = function unmount() {
	    var _this$unsubscribeFocu, _this$unsubscribeOnli;

	    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);
	    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);
	  };

	  _proto.isFetching = function isFetching(arg1, arg2) {
	    var _parseFilterArgs = parseFilterArgs(arg1, arg2),
	        filters = _parseFilterArgs[0];

	    filters.fetching = true;
	    return this.queryCache.findAll(filters).length;
	  };

	  _proto.isMutating = function isMutating(filters) {
	    return this.mutationCache.findAll(_extends$3({}, filters, {
	      fetching: true
	    })).length;
	  };

	  _proto.getQueryData = function getQueryData(queryKey, filters) {
	    var _this$queryCache$find;

	    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;
	  };

	  _proto.getQueriesData = function getQueriesData(queryKeyOrFilters) {
	    return this.getQueryCache().findAll(queryKeyOrFilters).map(function (_ref) {
	      var queryKey = _ref.queryKey,
	          state = _ref.state;
	      var data = state.data;
	      return [queryKey, data];
	    });
	  };

	  _proto.setQueryData = function setQueryData(queryKey, updater, options) {
	    var parsedOptions = parseQueryArgs(queryKey);
	    var defaultedOptions = this.defaultQueryOptions(parsedOptions);
	    return this.queryCache.build(this, defaultedOptions).setData(updater, options);
	  };

	  _proto.setQueriesData = function setQueriesData(queryKeyOrFilters, updater, options) {
	    var _this2 = this;

	    return notifyManager.batch(function () {
	      return _this2.getQueryCache().findAll(queryKeyOrFilters).map(function (_ref2) {
	        var queryKey = _ref2.queryKey;
	        return [queryKey, _this2.setQueryData(queryKey, updater, options)];
	      });
	    });
	  };

	  _proto.getQueryState = function getQueryState(queryKey, filters) {
	    var _this$queryCache$find2;

	    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;
	  };

	  _proto.removeQueries = function removeQueries(arg1, arg2) {
	    var _parseFilterArgs2 = parseFilterArgs(arg1, arg2),
	        filters = _parseFilterArgs2[0];

	    var queryCache = this.queryCache;
	    notifyManager.batch(function () {
	      queryCache.findAll(filters).forEach(function (query) {
	        queryCache.remove(query);
	      });
	    });
	  };

	  _proto.resetQueries = function resetQueries(arg1, arg2, arg3) {
	    var _this3 = this;

	    var _parseFilterArgs3 = parseFilterArgs(arg1, arg2, arg3),
	        filters = _parseFilterArgs3[0],
	        options = _parseFilterArgs3[1];

	    var queryCache = this.queryCache;

	    var refetchFilters = _extends$3({}, filters, {
	      active: true
	    });

	    return notifyManager.batch(function () {
	      queryCache.findAll(filters).forEach(function (query) {
	        query.reset();
	      });
	      return _this3.refetchQueries(refetchFilters, options);
	    });
	  };

	  _proto.cancelQueries = function cancelQueries(arg1, arg2, arg3) {
	    var _this4 = this;

	    var _parseFilterArgs4 = parseFilterArgs(arg1, arg2, arg3),
	        filters = _parseFilterArgs4[0],
	        _parseFilterArgs4$ = _parseFilterArgs4[1],
	        cancelOptions = _parseFilterArgs4$ === void 0 ? {} : _parseFilterArgs4$;

	    if (typeof cancelOptions.revert === 'undefined') {
	      cancelOptions.revert = true;
	    }

	    var promises = notifyManager.batch(function () {
	      return _this4.queryCache.findAll(filters).map(function (query) {
	        return query.cancel(cancelOptions);
	      });
	    });
	    return Promise.all(promises).then(noop$1).catch(noop$1);
	  };

	  _proto.invalidateQueries = function invalidateQueries(arg1, arg2, arg3) {
	    var _ref3,
	        _filters$refetchActiv,
	        _filters$refetchInact,
	        _this5 = this;

	    var _parseFilterArgs5 = parseFilterArgs(arg1, arg2, arg3),
	        filters = _parseFilterArgs5[0],
	        options = _parseFilterArgs5[1];

	    var refetchFilters = _extends$3({}, filters, {
	      // if filters.refetchActive is not provided and filters.active is explicitly false,
	      // e.g. invalidateQueries({ active: false }), we don't want to refetch active queries
	      active: (_ref3 = (_filters$refetchActiv = filters.refetchActive) != null ? _filters$refetchActiv : filters.active) != null ? _ref3 : true,
	      inactive: (_filters$refetchInact = filters.refetchInactive) != null ? _filters$refetchInact : false
	    });

	    return notifyManager.batch(function () {
	      _this5.queryCache.findAll(filters).forEach(function (query) {
	        query.invalidate();
	      });

	      return _this5.refetchQueries(refetchFilters, options);
	    });
	  };

	  _proto.refetchQueries = function refetchQueries(arg1, arg2, arg3) {
	    var _this6 = this;

	    var _parseFilterArgs6 = parseFilterArgs(arg1, arg2, arg3),
	        filters = _parseFilterArgs6[0],
	        options = _parseFilterArgs6[1];

	    var promises = notifyManager.batch(function () {
	      return _this6.queryCache.findAll(filters).map(function (query) {
	        return query.fetch(undefined, {
	          meta: {
	            refetchPage: filters == null ? void 0 : filters.refetchPage
	          }
	        });
	      });
	    });
	    var promise = Promise.all(promises).then(noop$1);

	    if (!(options == null ? void 0 : options.throwOnError)) {
	      promise = promise.catch(noop$1);
	    }

	    return promise;
	  };

	  _proto.fetchQuery = function fetchQuery(arg1, arg2, arg3) {
	    var parsedOptions = parseQueryArgs(arg1, arg2, arg3);
	    var defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652

	    if (typeof defaultedOptions.retry === 'undefined') {
	      defaultedOptions.retry = false;
	    }

	    var query = this.queryCache.build(this, defaultedOptions);
	    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
	  };

	  _proto.prefetchQuery = function prefetchQuery(arg1, arg2, arg3) {
	    return this.fetchQuery(arg1, arg2, arg3).then(noop$1).catch(noop$1);
	  };

	  _proto.fetchInfiniteQuery = function fetchInfiniteQuery(arg1, arg2, arg3) {
	    var parsedOptions = parseQueryArgs(arg1, arg2, arg3);
	    parsedOptions.behavior = infiniteQueryBehavior();
	    return this.fetchQuery(parsedOptions);
	  };

	  _proto.prefetchInfiniteQuery = function prefetchInfiniteQuery(arg1, arg2, arg3) {
	    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop$1).catch(noop$1);
	  };

	  _proto.cancelMutations = function cancelMutations() {
	    var _this7 = this;

	    var promises = notifyManager.batch(function () {
	      return _this7.mutationCache.getAll().map(function (mutation) {
	        return mutation.cancel();
	      });
	    });
	    return Promise.all(promises).then(noop$1).catch(noop$1);
	  };

	  _proto.resumePausedMutations = function resumePausedMutations() {
	    return this.getMutationCache().resumePausedMutations();
	  };

	  _proto.executeMutation = function executeMutation(options) {
	    return this.mutationCache.build(this, options).execute();
	  };

	  _proto.getQueryCache = function getQueryCache() {
	    return this.queryCache;
	  };

	  _proto.getMutationCache = function getMutationCache() {
	    return this.mutationCache;
	  };

	  _proto.getDefaultOptions = function getDefaultOptions() {
	    return this.defaultOptions;
	  };

	  _proto.setDefaultOptions = function setDefaultOptions(options) {
	    this.defaultOptions = options;
	  };

	  _proto.setQueryDefaults = function setQueryDefaults(queryKey, options) {
	    var result = this.queryDefaults.find(function (x) {
	      return hashQueryKey(queryKey) === hashQueryKey(x.queryKey);
	    });

	    if (result) {
	      result.defaultOptions = options;
	    } else {
	      this.queryDefaults.push({
	        queryKey: queryKey,
	        defaultOptions: options
	      });
	    }
	  };

	  _proto.getQueryDefaults = function getQueryDefaults(queryKey) {
	    var _this$queryDefaults$f;

	    return queryKey ? (_this$queryDefaults$f = this.queryDefaults.find(function (x) {
	      return partialMatchKey(queryKey, x.queryKey);
	    })) == null ? void 0 : _this$queryDefaults$f.defaultOptions : undefined;
	  };

	  _proto.setMutationDefaults = function setMutationDefaults(mutationKey, options) {
	    var result = this.mutationDefaults.find(function (x) {
	      return hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey);
	    });

	    if (result) {
	      result.defaultOptions = options;
	    } else {
	      this.mutationDefaults.push({
	        mutationKey: mutationKey,
	        defaultOptions: options
	      });
	    }
	  };

	  _proto.getMutationDefaults = function getMutationDefaults(mutationKey) {
	    var _this$mutationDefault;

	    return mutationKey ? (_this$mutationDefault = this.mutationDefaults.find(function (x) {
	      return partialMatchKey(mutationKey, x.mutationKey);
	    })) == null ? void 0 : _this$mutationDefault.defaultOptions : undefined;
	  };

	  _proto.defaultQueryOptions = function defaultQueryOptions(options) {
	    if (options == null ? void 0 : options._defaulted) {
	      return options;
	    }

	    var defaultedOptions = _extends$3({}, this.defaultOptions.queries, this.getQueryDefaults(options == null ? void 0 : options.queryKey), options, {
	      _defaulted: true
	    });

	    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {
	      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);
	    }

	    return defaultedOptions;
	  };

	  _proto.defaultQueryObserverOptions = function defaultQueryObserverOptions(options) {
	    return this.defaultQueryOptions(options);
	  };

	  _proto.defaultMutationOptions = function defaultMutationOptions(options) {
	    if (options == null ? void 0 : options._defaulted) {
	      return options;
	    }

	    return _extends$3({}, this.defaultOptions.mutations, this.getMutationDefaults(options == null ? void 0 : options.mutationKey), options, {
	      _defaulted: true
	    });
	  };

	  _proto.clear = function clear() {
	    this.queryCache.clear();
	    this.mutationCache.clear();
	  };

	  return QueryClient;
	}();

	var QueryObserver = /*#__PURE__*/function (_Subscribable) {
	  _inheritsLoose$1(QueryObserver, _Subscribable);

	  function QueryObserver(client, options) {
	    var _this;

	    _this = _Subscribable.call(this) || this;
	    _this.client = client;
	    _this.options = options;
	    _this.trackedProps = [];
	    _this.previousSelectError = null;

	    _this.bindMethods();

	    _this.setOptions(options);

	    return _this;
	  }

	  var _proto = QueryObserver.prototype;

	  _proto.bindMethods = function bindMethods() {
	    this.remove = this.remove.bind(this);
	    this.refetch = this.refetch.bind(this);
	  };

	  _proto.onSubscribe = function onSubscribe() {
	    if (this.listeners.length === 1) {
	      this.currentQuery.addObserver(this);

	      if (shouldFetchOnMount(this.currentQuery, this.options)) {
	        this.executeFetch();
	      }

	      this.updateTimers();
	    }
	  };

	  _proto.onUnsubscribe = function onUnsubscribe() {
	    if (!this.listeners.length) {
	      this.destroy();
	    }
	  };

	  _proto.shouldFetchOnReconnect = function shouldFetchOnReconnect() {
	    return _shouldFetchOnReconnect(this.currentQuery, this.options);
	  };

	  _proto.shouldFetchOnWindowFocus = function shouldFetchOnWindowFocus() {
	    return _shouldFetchOnWindowFocus(this.currentQuery, this.options);
	  };

	  _proto.destroy = function destroy() {
	    this.listeners = [];
	    this.clearTimers();
	    this.currentQuery.removeObserver(this);
	  };

	  _proto.setOptions = function setOptions(options, notifyOptions) {
	    var prevOptions = this.options;
	    var prevQuery = this.currentQuery;
	    this.options = this.client.defaultQueryObserverOptions(options);

	    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {
	      throw new Error('Expected enabled to be a boolean');
	    } // Keep previous query key if the user does not supply one


	    if (!this.options.queryKey) {
	      this.options.queryKey = prevOptions.queryKey;
	    }

	    this.updateQuery();
	    var mounted = this.hasListeners(); // Fetch if there are subscribers

	    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {
	      this.executeFetch();
	    } // Update result


	    this.updateResult(notifyOptions); // Update stale interval if needed

	    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {
	      this.updateStaleTimeout();
	    } // Update refetch interval if needed


	    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.refetchInterval !== prevOptions.refetchInterval)) {
	      this.updateRefetchInterval();
	    }
	  };

	  _proto.getOptimisticResult = function getOptimisticResult(options) {
	    var defaultedOptions = this.client.defaultQueryObserverOptions(options);
	    var query = this.client.getQueryCache().build(this.client, defaultedOptions);
	    return this.createResult(query, defaultedOptions);
	  };

	  _proto.getCurrentResult = function getCurrentResult() {
	    return this.currentResult;
	  };

	  _proto.trackResult = function trackResult(result) {
	    var _this2 = this;

	    var trackedResult = {};
	    Object.keys(result).forEach(function (key) {
	      Object.defineProperty(trackedResult, key, {
	        configurable: false,
	        enumerable: true,
	        get: function get() {
	          var typedKey = key;

	          if (!_this2.trackedProps.includes(typedKey)) {
	            _this2.trackedProps.push(typedKey);
	          }

	          return result[typedKey];
	        }
	      });
	    });
	    return trackedResult;
	  };

	  _proto.getNextResult = function getNextResult(options) {
	    var _this3 = this;

	    return new Promise(function (resolve, reject) {
	      var unsubscribe = _this3.subscribe(function (result) {
	        if (!result.isFetching) {
	          unsubscribe();

	          if (result.isError && (options == null ? void 0 : options.throwOnError)) {
	            reject(result.error);
	          } else {
	            resolve(result);
	          }
	        }
	      });
	    });
	  };

	  _proto.getCurrentQuery = function getCurrentQuery() {
	    return this.currentQuery;
	  };

	  _proto.remove = function remove() {
	    this.client.getQueryCache().remove(this.currentQuery);
	  };

	  _proto.refetch = function refetch(options) {
	    return this.fetch(_extends$3({}, options, {
	      meta: {
	        refetchPage: options == null ? void 0 : options.refetchPage
	      }
	    }));
	  };

	  _proto.fetchOptimistic = function fetchOptimistic(options) {
	    var _this4 = this;

	    var defaultedOptions = this.client.defaultQueryObserverOptions(options);
	    var query = this.client.getQueryCache().build(this.client, defaultedOptions);
	    return query.fetch().then(function () {
	      return _this4.createResult(query, defaultedOptions);
	    });
	  };

	  _proto.fetch = function fetch(fetchOptions) {
	    var _this5 = this;

	    return this.executeFetch(fetchOptions).then(function () {
	      _this5.updateResult();

	      return _this5.currentResult;
	    });
	  };

	  _proto.executeFetch = function executeFetch(fetchOptions) {
	    // Make sure we reference the latest query as the current one might have been removed
	    this.updateQuery(); // Fetch

	    var promise = this.currentQuery.fetch(this.options, fetchOptions);

	    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {
	      promise = promise.catch(noop$1);
	    }

	    return promise;
	  };

	  _proto.updateStaleTimeout = function updateStaleTimeout() {
	    var _this6 = this;

	    this.clearStaleTimeout();

	    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {
	      return;
	    }

	    var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.
	    // To mitigate this issue we always add 1 ms to the timeout.

	    var timeout = time + 1;
	    this.staleTimeoutId = setTimeout(function () {
	      if (!_this6.currentResult.isStale) {
	        _this6.updateResult();
	      }
	    }, timeout);
	  };

	  _proto.updateRefetchInterval = function updateRefetchInterval() {
	    var _this7 = this;

	    this.clearRefetchInterval();

	    if (isServer || this.options.enabled === false || !isValidTimeout(this.options.refetchInterval)) {
	      return;
	    }

	    this.refetchIntervalId = setInterval(function () {
	      if (_this7.options.refetchIntervalInBackground || focusManager.isFocused()) {
	        _this7.executeFetch();
	      }
	    }, this.options.refetchInterval);
	  };

	  _proto.updateTimers = function updateTimers() {
	    this.updateStaleTimeout();
	    this.updateRefetchInterval();
	  };

	  _proto.clearTimers = function clearTimers() {
	    this.clearStaleTimeout();
	    this.clearRefetchInterval();
	  };

	  _proto.clearStaleTimeout = function clearStaleTimeout() {
	    clearTimeout(this.staleTimeoutId);
	    this.staleTimeoutId = undefined;
	  };

	  _proto.clearRefetchInterval = function clearRefetchInterval() {
	    clearInterval(this.refetchIntervalId);
	    this.refetchIntervalId = undefined;
	  };

	  _proto.createResult = function createResult(query, options) {
	    var prevQuery = this.currentQuery;
	    var prevOptions = this.options;
	    var prevResult = this.currentResult;
	    var prevResultState = this.currentResultState;
	    var prevResultOptions = this.currentResultOptions;
	    var queryChange = query !== prevQuery;
	    var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;
	    var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;
	    var state = query.state;
	    var dataUpdatedAt = state.dataUpdatedAt,
	        error = state.error,
	        errorUpdatedAt = state.errorUpdatedAt,
	        isFetching = state.isFetching,
	        status = state.status;
	    var isPreviousData = false;
	    var isPlaceholderData = false;
	    var data; // Optimistically set result in fetching state if needed

	    if (options.optimisticResults) {
	      var mounted = this.hasListeners();
	      var fetchOnMount = !mounted && shouldFetchOnMount(query, options);
	      var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);

	      if (fetchOnMount || fetchOptionally) {
	        isFetching = true;

	        if (!dataUpdatedAt) {
	          status = 'loading';
	        }
	      }
	    } // Keep previous data if needed


	    if (options.keepPreviousData && !state.dataUpdateCount && (prevQueryResult == null ? void 0 : prevQueryResult.isSuccess) && status !== 'error') {
	      data = prevQueryResult.data;
	      dataUpdatedAt = prevQueryResult.dataUpdatedAt;
	      status = prevQueryResult.status;
	      isPreviousData = true;
	    } // Select data if needed
	    else if (options.select && typeof state.data !== 'undefined') {
	        // Memoize select result
	        if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === (prevResultOptions == null ? void 0 : prevResultOptions.select) && !this.previousSelectError) {
	          data = prevResult.data;
	        } else {
	          try {
	            data = options.select(state.data);

	            if (options.structuralSharing !== false) {
	              data = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, data);
	            }

	            this.previousSelectError = null;
	          } catch (selectError) {
	            getLogger().error(selectError);
	            error = selectError;
	            this.previousSelectError = selectError;
	            errorUpdatedAt = Date.now();
	            status = 'error';
	          }
	        }
	      } // Use query data
	      else {
	          data = state.data;
	        } // Show placeholder data if needed


	    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && (status === 'loading' || status === 'idle')) {
	      var placeholderData; // Memoize placeholder data

	      if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {
	        placeholderData = prevResult.data;
	      } else {
	        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;

	        if (options.select && typeof placeholderData !== 'undefined') {
	          try {
	            placeholderData = options.select(placeholderData);

	            if (options.structuralSharing !== false) {
	              placeholderData = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, placeholderData);
	            }

	            this.previousSelectError = null;
	          } catch (selectError) {
	            getLogger().error(selectError);
	            error = selectError;
	            this.previousSelectError = selectError;
	            errorUpdatedAt = Date.now();
	            status = 'error';
	          }
	        }
	      }

	      if (typeof placeholderData !== 'undefined') {
	        status = 'success';
	        data = placeholderData;
	        isPlaceholderData = true;
	      }
	    }

	    var result = {
	      status: status,
	      isLoading: status === 'loading',
	      isSuccess: status === 'success',
	      isError: status === 'error',
	      isIdle: status === 'idle',
	      data: data,
	      dataUpdatedAt: dataUpdatedAt,
	      error: error,
	      errorUpdatedAt: errorUpdatedAt,
	      failureCount: state.fetchFailureCount,
	      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,
	      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,
	      isFetching: isFetching,
	      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,
	      isPlaceholderData: isPlaceholderData,
	      isPreviousData: isPreviousData,
	      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,
	      isStale: isStale(query, options),
	      refetch: this.refetch,
	      remove: this.remove
	    };
	    return result;
	  };

	  _proto.shouldNotifyListeners = function shouldNotifyListeners(result, prevResult) {
	    if (!prevResult) {
	      return true;
	    }

	    if (result === prevResult) {
	      return false;
	    }

	    var _this$options = this.options,
	        notifyOnChangeProps = _this$options.notifyOnChangeProps,
	        notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;

	    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {
	      return true;
	    }

	    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {
	      return true;
	    }

	    var includedProps = notifyOnChangeProps === 'tracked' ? this.trackedProps : notifyOnChangeProps;
	    return Object.keys(result).some(function (key) {
	      var typedKey = key;
	      var changed = result[typedKey] !== prevResult[typedKey];
	      var isIncluded = includedProps == null ? void 0 : includedProps.some(function (x) {
	        return x === key;
	      });
	      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function (x) {
	        return x === key;
	      });
	      return changed && !isExcluded && (!includedProps || isIncluded);
	    });
	  };

	  _proto.updateResult = function updateResult(notifyOptions) {
	    var prevResult = this.currentResult;
	    this.currentResult = this.createResult(this.currentQuery, this.options);
	    this.currentResultState = this.currentQuery.state;
	    this.currentResultOptions = this.options; // Only notify if something has changed

	    if (shallowEqualObjects(this.currentResult, prevResult)) {
	      return;
	    } // Determine which callbacks to trigger


	    var defaultNotifyOptions = {
	      cache: true
	    };

	    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && this.shouldNotifyListeners(this.currentResult, prevResult)) {
	      defaultNotifyOptions.listeners = true;
	    }

	    this.notify(_extends$3({}, defaultNotifyOptions, notifyOptions));
	  };

	  _proto.updateQuery = function updateQuery() {
	    var query = this.client.getQueryCache().build(this.client, this.options);

	    if (query === this.currentQuery) {
	      return;
	    }

	    var prevQuery = this.currentQuery;
	    this.currentQuery = query;
	    this.currentQueryInitialState = query.state;
	    this.previousQueryResult = this.currentResult;

	    if (this.hasListeners()) {
	      prevQuery == null ? void 0 : prevQuery.removeObserver(this);
	      query.addObserver(this);
	    }
	  };

	  _proto.onQueryUpdate = function onQueryUpdate(action) {
	    var notifyOptions = {};

	    if (action.type === 'success') {
	      notifyOptions.onSuccess = true;
	    } else if (action.type === 'error' && !isCancelledError(action.error)) {
	      notifyOptions.onError = true;
	    }

	    this.updateResult(notifyOptions);

	    if (this.hasListeners()) {
	      this.updateTimers();
	    }
	  };

	  _proto.notify = function notify(notifyOptions) {
	    var _this8 = this;

	    notifyManager.batch(function () {
	      // First trigger the configuration callbacks
	      if (notifyOptions.onSuccess) {
	        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);
	        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);
	      } else if (notifyOptions.onError) {
	        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);
	        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(undefined, _this8.currentResult.error);
	      } // Then trigger the listeners


	      if (notifyOptions.listeners) {
	        _this8.listeners.forEach(function (listener) {
	          listener(_this8.currentResult);
	        });
	      } // Then the cache listeners


	      if (notifyOptions.cache) {
	        _this8.client.getQueryCache().notify({
	          query: _this8.currentQuery,
	          type: 'observerResultsUpdated'
	        });
	      }
	    });
	  };

	  return QueryObserver;
	}(Subscribable);

	function shouldLoadOnMount(query, options) {
	  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);
	}

	function shouldRefetchOnMount(query, options) {
	  return options.enabled !== false && query.state.dataUpdatedAt > 0 && (options.refetchOnMount === 'always' || options.refetchOnMount !== false && isStale(query, options));
	}

	function shouldFetchOnMount(query, options) {
	  return shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options);
	}

	function _shouldFetchOnReconnect(query, options) {
	  return options.enabled !== false && (options.refetchOnReconnect === 'always' || options.refetchOnReconnect !== false && isStale(query, options));
	}

	function _shouldFetchOnWindowFocus(query, options) {
	  return options.enabled !== false && (options.refetchOnWindowFocus === 'always' || options.refetchOnWindowFocus !== false && isStale(query, options));
	}

	function shouldFetchOptionally(query, prevQuery, options, prevOptions) {
	  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (query.state.status !== 'error' || prevOptions.enabled === false) && isStale(query, options);
	}

	function isStale(query, options) {
	  return query.isStaleByTime(options.staleTime);
	}

	var defaultContext = /*#__PURE__*/React$1.createContext(undefined);
	var QueryClientSharingContext = /*#__PURE__*/React$1.createContext(false); // if contextSharing is on, we share the first and at least one
	// instance of the context across the window
	// to ensure that if React Query is used across
	// different bundles or microfrontends they will
	// all use the same **instance** of context, regardless
	// of module scoping.

	function getQueryClientContext(contextSharing) {
	  if (contextSharing && typeof window !== 'undefined') {
	    if (!window.ReactQueryClientContext) {
	      window.ReactQueryClientContext = defaultContext;
	    }

	    return window.ReactQueryClientContext;
	  }

	  return defaultContext;
	}

	var useQueryClient = function useQueryClient() {
	  var queryClient = React$1.useContext(getQueryClientContext(React$1.useContext(QueryClientSharingContext)));

	  if (!queryClient) {
	    throw new Error('No QueryClient set, use QueryClientProvider to set one');
	  }

	  return queryClient;
	};
	var QueryClientProvider = function QueryClientProvider(_ref) {
	  var client = _ref.client,
	      _ref$contextSharing = _ref.contextSharing,
	      contextSharing = _ref$contextSharing === void 0 ? false : _ref$contextSharing,
	      children = _ref.children;
	  React$1.useEffect(function () {
	    client.mount();
	    return function () {
	      client.unmount();
	    };
	  }, [client]);
	  var Context = getQueryClientContext(contextSharing);
	  return /*#__PURE__*/React$1.createElement(QueryClientSharingContext.Provider, {
	    value: contextSharing
	  }, /*#__PURE__*/React$1.createElement(Context.Provider, {
	    value: client
	  }, children));
	};

	function createValue() {
	  var _isReset = false;
	  return {
	    clearReset: function clearReset() {
	      _isReset = false;
	    },
	    reset: function reset() {
	      _isReset = true;
	    },
	    isReset: function isReset() {
	      return _isReset;
	    }
	  };
	}

	var QueryErrorResetBoundaryContext = /*#__PURE__*/React$1.createContext(createValue()); // HOOK

	var useQueryErrorResetBoundary = function useQueryErrorResetBoundary() {
	  return React$1.useContext(QueryErrorResetBoundaryContext);
	}; // COMPONENT

	function shouldThrowError(suspense, _useErrorBoundary, error) {
	  // Allow useErrorBoundary function to override throwing behavior on a per-error basis
	  if (typeof _useErrorBoundary === 'function') {
	    return _useErrorBoundary(error);
	  } // Allow useErrorBoundary to override suspense's throwing behaviour


	  if (typeof _useErrorBoundary === 'boolean') return _useErrorBoundary; // If suspense is enabled default to throwing errors

	  return !!suspense;
	}

	function useBaseQuery(options, Observer) {
	  var mountedRef = React$1.useRef(false);

	  var _React$useState = React$1.useState(0),
	      forceUpdate = _React$useState[1];

	  var queryClient = useQueryClient();
	  var errorResetBoundary = useQueryErrorResetBoundary();
	  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options

	  defaultedOptions.optimisticResults = true; // Include callbacks in batch renders

	  if (defaultedOptions.onError) {
	    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);
	  }

	  if (defaultedOptions.onSuccess) {
	    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);
	  }

	  if (defaultedOptions.onSettled) {
	    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);
	  }

	  if (defaultedOptions.suspense) {
	    // Always set stale time when using suspense to prevent
	    // fetching again when directly mounting after suspending
	    if (typeof defaultedOptions.staleTime !== 'number') {
	      defaultedOptions.staleTime = 1000;
	    }
	  }

	  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {
	    // Prevent retrying failed query if the error boundary has not been reset yet
	    if (!errorResetBoundary.isReset()) {
	      defaultedOptions.retryOnMount = false;
	    }
	  }

	  var _React$useState2 = React$1.useState(function () {
	    return new Observer(queryClient, defaultedOptions);
	  }),
	      observer = _React$useState2[0];

	  var result = observer.getOptimisticResult(defaultedOptions);
	  React$1.useEffect(function () {
	    mountedRef.current = true;
	    errorResetBoundary.clearReset();
	    var unsubscribe = observer.subscribe(notifyManager.batchCalls(function () {
	      if (mountedRef.current) {
	        forceUpdate(function (x) {
	          return x + 1;
	        });
	      }
	    })); // Update result to make sure we did not miss any query updates
	    // between creating the observer and subscribing to it.

	    observer.updateResult();
	    return function () {
	      mountedRef.current = false;
	      unsubscribe();
	    };
	  }, [errorResetBoundary, observer]);
	  React$1.useEffect(function () {
	    // Do not notify on updates because of changes in the options because
	    // these changes should already be reflected in the optimistic result.
	    observer.setOptions(defaultedOptions, {
	      listeners: false
	    });
	  }, [defaultedOptions, observer]); // Handle suspense

	  if (defaultedOptions.suspense && result.isLoading) {
	    throw observer.fetchOptimistic(defaultedOptions).then(function (_ref) {
	      var data = _ref.data;
	      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);
	      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);
	    }).catch(function (error) {
	      errorResetBoundary.clearReset();
	      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);
	      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);
	    });
	  } // Handle error boundary


	  if (result.isError && !result.isFetching && shouldThrowError(defaultedOptions.suspense, defaultedOptions.useErrorBoundary, result.error)) {
	    throw result.error;
	  } // Handle result property usage tracking


	  if (defaultedOptions.notifyOnChangeProps === 'tracked') {
	    result = observer.trackResult(result);
	  }

	  return result;
	}

	function useQuery(arg1, arg2, arg3) {
	  var parsedOptions = parseQueryArgs(arg1, arg2, arg3);
	  return useBaseQuery(parsedOptions, QueryObserver);
	}

	var queryClient = new QueryClient();

	var MonthView = function (props) {
	    var dateContext = props.dateContext, events = props.events, selectedDay = props.selectedDay, handleEventSelect = props.handleEventSelect;
	    var onDayClick = function (e, day) {
	        props.setSelectedDay(day);
	    };
	    var blanks = [];
	    for (var i = 0; i < firstDayOfMonth(dateContext); i++) {
	        blanks.push(jsxRuntime.exports.jsx("td", __assign$2({ className: "emptySlot" }, { children: "" }), i + "-empty-slot"));
	    }
	    var daysInMonthArray = [];
	    var _loop_1 = function (d) {
	        var className = d === currentDay(dateContext) ? "day current-day" : "day";
	        var selectedClass = d === selectedDay ? " selected-day " : "";
	        // Find all events for today
	        var todaysEvents = events.filter(function (event) {
	            var eventDate = new Date(getEventStart(event.event));
	            /** @todo handle this dateContext is just a month but events are calendar month*/
	            if (eventDate.getMonth() === dateContext.month()) {
	                return eventDate.getDate() === d;
	            }
	            return false;
	        });
	        daysInMonthArray.push(jsxRuntime.exports.jsx("td", __assign$2({ className: className + selectedClass }, { children: jsxRuntime.exports.jsxs("div", __assign$2({ className: "content" }, { children: [jsxRuntime.exports.jsx("div", __assign$2({ className: "day-wrapper" }, { children: jsxRuntime.exports.jsx(IconButton$1, __assign$2({ size: "small", onClick: function (e) {
	                                onDayClick(e, d);
	                            }, "aria-label": "close dialog", className: "day-btn" }, { children: d }), void 0) }), void 0), todaysEvents === null || todaysEvents === void 0 ? void 0 : todaysEvents.map(function (event) {
	                        return (jsxRuntime.exports.jsx("div", { children: jsxRuntime.exports.jsx(Button$1, __assign$2({ variant: "contained", className: "event", onClick: function (e) { return handleEventSelect(event.event); } }, { children: jsxRuntime.exports.jsx("span", __assign$2({ className: "button-text" }, { children: event.event.title }), void 0) }), void 0) }, event.event.event_instances[0].event_instance.id));
	                    })] }), void 0) }), d));
	    };
	    for (var d = 1; d <= daysInMonth(dateContext); d++) {
	        _loop_1(d);
	    }
	    var endBlanks = [];
	    for (var i = lastDayOfMonth(dateContext); i < 6; i++) {
	        endBlanks.push(jsxRuntime.exports.jsx("td", __assign$2({ className: "emptySlot" }, { children: "" }), i + "-end-empty-slot"));
	    }
	    var totalSlots = __spreadArray(__spreadArray(__spreadArray([], __read(blanks), false), __read(daysInMonthArray), false), __read(endBlanks), false);
	    var rows = [];
	    var cells = [];
	    totalSlots.forEach(function (row, i) {
	        if (i % 7 !== 0) {
	            cells.push(row);
	        }
	        else {
	            var insertRow = cells.slice();
	            rows.push(insertRow);
	            cells = [];
	            cells.push(row);
	        }
	        if (i === totalSlots.length - 1) {
	            var insertRow = cells.slice();
	            rows.push(insertRow);
	        }
	    });
	    var trElems = rows.map(function (d, i) {
	        return jsxRuntime.exports.jsx("tr", { children: d }, i + "-days");
	    });
	    return (jsxRuntime.exports.jsxs("table", __assign$2({ className: "rlv-month-view table compact calendar" }, { children: [jsxRuntime.exports.jsx("thead", { children: jsxRuntime.exports.jsx("tr", { children: jsxRuntime.exports.jsx(Weekdays, {}, void 0) }, void 0) }, void 0), jsxRuntime.exports.jsx("tbody", { children: trElems }, void 0)] }), void 0));
	};
	// The days of the week seems like this could be a constant
	var Weekdays = React$1.memo(function tableHeader() {
	    return (jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, { children: [jsxRuntime.exports.jsx("th", __assign$2({ className: "week-day", "aria-label": "Sunday", scope: "col" }, { children: "Sun" }), void 0), jsxRuntime.exports.jsx("th", __assign$2({ className: "week-day", "aria-label": "Monday", scope: "col" }, { children: "Mon" }), void 0), jsxRuntime.exports.jsx("th", __assign$2({ className: "week-day", "aria-label": "Tuesday", scope: "col" }, { children: "Tue" }), void 0), jsxRuntime.exports.jsx("th", __assign$2({ className: "week-day", "aria-label": "Wednesday", scope: "col" }, { children: "Wed" }), void 0), jsxRuntime.exports.jsx("th", __assign$2({ className: "week-day", "aria-label": "Thursday", scope: "col" }, { children: "Thur" }), void 0), jsxRuntime.exports.jsx("th", __assign$2({ className: "week-day", "aria-label": "Friday", scope: "col" }, { children: "Fri" }), void 0), jsxRuntime.exports.jsx("th", __assign$2({ className: "week-day", "aria-label": "Saturday", scope: "col" }, { children: "Sat" }), void 0)] }, void 0));
	});
	MonthView.propTypes = {
	    trElems: PropTypes.node,
	};

	var theme$2 = createTheme();
	var MoreInfo = function (_a) {
	    var _b, _c, _d, _e;
	    var event = _a.event;
	    var deptWebsite = ((_b = event === null || event === void 0 ? void 0 : event.custom_fields) === null || _b === void 0 ? void 0 : _b.dept_web_site)
	        ? event.custom_fields.dept_web_site
	        : event.url;
	    var fontWeightMedium = theme$2.typography.fontWeightMedium;
	    return (jsxRuntime.exports.jsx(Box$1, __assign$2({ className: "rlv-more-info", sx: {
	            bgcolor: theme$2.palette.grey[100],
	            paddingTop: theme$2.spacing(2),
	            paddingBottom: theme$2.spacing(2),
	            paddingLeft: theme$2.spacing(2),
	            marginBottom: theme$2.spacing(2),
	            marginTop: theme$2.spacing(2),
	        } }, { children: jsxRuntime.exports.jsxs(Grid, __assign$2({ container: true }, { children: [jsxRuntime.exports.jsx(Grid, __assign$2({ col: 12 }, { children: jsxRuntime.exports.jsx(Typography$1, __assign$2({ variant: "h4", pb: 2 }, { children: "Details" }), void 0) }), void 0), jsxRuntime.exports.jsxs(Grid, __assign$2({ col: 6 }, { children: [jsxRuntime.exports.jsx(Typography$1, __assign$2({ fontWeight: fontWeightMedium }, { children: "When" }), void 0), jsxRuntime.exports.jsxs(Typography$1, __assign$2({ variant: "body2", gutterBottom: true }, { children: [getFullDate(event), jsxRuntime.exports.jsx("br", {}, void 0), getEventFullTime(event)] }), void 0), jsxRuntime.exports.jsx(Typography$1, __assign$2({ fontWeight: fontWeightMedium }, { children: "Where" }), void 0), jsxRuntime.exports.jsx(Typography$1, __assign$2({ variant: "body2", gutterBottom: true }, { children: event.location ? event.location : "NA" }), void 0), jsxRuntime.exports.jsx(Typography$1, __assign$2({ fontWeight: fontWeightMedium }, { children: "Room" }), void 0), jsxRuntime.exports.jsx(Typography$1, __assign$2({ variant: "body2" }, { children: event.room_number ? event.room_number : "NA" }), void 0)] }), void 0), jsxRuntime.exports.jsxs(Grid, __assign$2({ col: 6 }, { children: [jsxRuntime.exports.jsx(Typography$1, __assign$2({ fontWeight: fontWeightMedium }, { children: "Website" }), void 0), jsxRuntime.exports.jsx(Typography$1, __assign$2({ variant: "body2", gutterBottom: true }, { children: deptWebsite ? (jsxRuntime.exports.jsx("a", __assign$2({ href: deptWebsite }, { children: truncateString(deptWebsite, 60) }), void 0)) : ("NA") }), void 0), jsxRuntime.exports.jsx(Typography$1, __assign$2({ fontWeight: fontWeightMedium }, { children: "Contact E-Mail" }), void 0), jsxRuntime.exports.jsx(Typography$1, __assign$2({ variant: "body2", gutterBottom: true }, { children: ((_c = event === null || event === void 0 ? void 0 : event.custom_fields) === null || _c === void 0 ? void 0 : _c.contact_email) ? (jsxRuntime.exports.jsx("a", __assign$2({ href: "mailto:" + ((_d = event === null || event === void 0 ? void 0 : event.custom_fields) === null || _d === void 0 ? void 0 : _d.contact_email) }, { children: (_e = event === null || event === void 0 ? void 0 : event.custom_fields) === null || _e === void 0 ? void 0 : _e.contact_email }), void 0)) : ("NA") }), void 0), jsxRuntime.exports.jsx(Typography$1, __assign$2({ fontWeight: fontWeightMedium }, { children: "Zoom Link" }), void 0), jsxRuntime.exports.jsx(Typography$1, __assign$2({ variant: "body2", className: "zoom-link" }, { children: event.stream_url ? (jsxRuntime.exports.jsx("div", { dangerouslySetInnerHTML: createMarkup(event.stream_url) }, void 0)) : ("NA") }), void 0)] }), void 0)] }), void 0) }), void 0));
	};
	MoreInfo.propTypes = {
	    event: PropTypes.object.isRequired,
	};

	function Tag(_a) {
	    var children = _a.children;
	    if (!children) {
	        return jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {}, void 0);
	    }
	    return jsxRuntime.exports.jsx("span", __assign$2({ className: "rlv-tag" }, { children: children }), void 0);
	}

	function EventDate(_a) {
	    var event = _a.event, hideTime = _a.hideTime;
	    return (jsxRuntime.exports.jsxs("span", __assign$2({ className: "rlv-event-date-time" }, { children: [jsxRuntime.exports.jsx(default_1$3, { className: "access-time-icon" }, void 0), getEventDate(event), " ", hideTime ? "" : "@ " + getEventFullTime(event)] }), void 0));
	}

	var EventInner = function (_a) {
	    var event = _a.event;
	    return (jsxRuntime.exports.jsx("section", __assign$2({ className: "rlv-event-inner event-details" }, { children: jsxRuntime.exports.jsxs("div", { children: [jsxRuntime.exports.jsx("h3", { children: event.title }, void 0), jsxRuntime.exports.jsxs("div", { children: [jsxRuntime.exports.jsx(EventDate, { event: event, hideTime: false }, void 0), jsxRuntime.exports.jsx(EventLocation, { locationName: event.location_name }, void 0), event.tags.map(function (tag, id) {
	                            return jsxRuntime.exports.jsx(Tag, { children: tag }, tag + "-" + id);
	                        })] }, void 0), jsxRuntime.exports.jsxs("div", __assign$2({ className: "field field-name-summary summary" }, { children: [jsxRuntime.exports.jsx("div", __assign$2({ className: "rlv-event-image-wrapper" }, { children: jsxRuntime.exports.jsx(EventImage, { photoUrl: event.photo_url, title: event.title, hideimages: "false", photoCrop: "big" }, void 0) }), void 0), jsxRuntime.exports.jsx("span", { dangerouslySetInnerHTML: { __html: event.description } }, void 0)] }), void 0), jsxRuntime.exports.jsx("div", { className: "clear" }, void 0), jsxRuntime.exports.jsx(MoreInfo, { event: event }, void 0), jsxRuntime.exports.jsx("p", { children: jsxRuntime.exports.jsx(AddCal, { event: event, hideaddcal: "false" }, void 0) }, void 0)] }, void 0) }), void 0));
	};
	EventInner.propTypes = {
	    event: PropTypes.object.isRequired,
	};

	var EventDetails = function (props) {
	    var event = props.event;
	    return jsxRuntime.exports.jsx(EventInner, { event: event }, void 0);
	};
	EventDetails.propTypes = {
	    event: PropTypes.object.isRequired,
	};

	var web_cjs = {};

	var objectWithoutPropertiesLoose = {exports: {}};

	(function (module) {
	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	module.exports = _objectWithoutPropertiesLoose;
	module.exports["default"] = module.exports, module.exports.__esModule = true;
	}(objectWithoutPropertiesLoose));

	var inheritsLoose = {exports: {}};

	var setPrototypeOf = {exports: {}};

	(function (module) {
	function _setPrototypeOf(o, p) {
	  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  module.exports["default"] = module.exports, module.exports.__esModule = true;
	  return _setPrototypeOf(o, p);
	}

	module.exports = _setPrototypeOf;
	module.exports["default"] = module.exports, module.exports.__esModule = true;
	}(setPrototypeOf));

	(function (module) {
	var setPrototypeOf$1 = setPrototypeOf.exports;

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  setPrototypeOf$1(subClass, superClass);
	}

	module.exports = _inheritsLoose;
	module.exports["default"] = module.exports, module.exports.__esModule = true;
	}(inheritsLoose));

	var assertThisInitialized = {exports: {}};

	(function (module) {
	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	module.exports = _assertThisInitialized;
	module.exports["default"] = module.exports, module.exports.__esModule = true;
	}(assertThisInitialized));

	Object.defineProperty(web_cjs, '__esModule', { value: true });

	function _interopDefault$1 (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var _extends$1 = _interopDefault$1(_extends$2.exports);
	var _objectWithoutPropertiesLoose$1 = _interopDefault$1(objectWithoutPropertiesLoose.exports);
	var React = react.exports;
	var React__default = _interopDefault$1(React);
	var _inheritsLoose = _interopDefault$1(inheritsLoose.exports);
	var _assertThisInitialized = _interopDefault$1(assertThisInitialized.exports);

	var is = {
	  arr: Array.isArray,
	  obj: function obj(a) {
	    return Object.prototype.toString.call(a) === '[object Object]';
	  },
	  fun: function fun(a) {
	    return typeof a === 'function';
	  },
	  str: function str(a) {
	    return typeof a === 'string';
	  },
	  num: function num(a) {
	    return typeof a === 'number';
	  },
	  und: function und(a) {
	    return a === void 0;
	  },
	  nul: function nul(a) {
	    return a === null;
	  },
	  set: function set(a) {
	    return a instanceof Set;
	  },
	  map: function map(a) {
	    return a instanceof Map;
	  },
	  equ: function equ(a, b) {
	    if (typeof a !== typeof b) return false;
	    if (is.str(a) || is.num(a)) return a === b;
	    if (is.obj(a) && is.obj(b) && Object.keys(a).length + Object.keys(b).length === 0) return true;
	    var i;

	    for (i in a) {
	      if (!(i in b)) return false;
	    }

	    for (i in b) {
	      if (a[i] !== b[i]) return false;
	    }

	    return is.und(i) ? a === b : true;
	  }
	};
	function merge(target, lowercase) {
	  if (lowercase === void 0) {
	    lowercase = true;
	  }

	  return function (object) {
	    return (is.arr(object) ? object : Object.keys(object)).reduce(function (acc, element) {
	      var key = lowercase ? element[0].toLowerCase() + element.substring(1) : element;
	      acc[key] = target(key);
	      return acc;
	    }, target);
	  };
	}
	function useForceUpdate$1() {
	  var _useState = React.useState(false),
	      f = _useState[1];

	  var forceUpdate = React.useCallback(function () {
	    return f(function (v) {
	      return !v;
	    });
	  }, []);
	  return forceUpdate;
	}
	function withDefault(value, defaultValue) {
	  return is.und(value) || is.nul(value) ? defaultValue : value;
	}
	function toArray$1(a) {
	  return !is.und(a) ? is.arr(a) ? a : [a] : [];
	}
	function callProp(obj) {
	  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  return is.fun(obj) ? obj.apply(void 0, args) : obj;
	}

	function getForwardProps(props) {
	  props.to;
	      props.from;
	      props.config;
	      props.onStart;
	      props.onRest;
	      props.onFrame;
	      props.children;
	      props.reset;
	      props.reverse;
	      props.force;
	      props.immediate;
	      props.delay;
	      props.attach;
	      props.destroyed;
	      props.interpolateTo;
	      props.ref;
	      props.lazy;
	      var forward = _objectWithoutPropertiesLoose$1(props, ["to", "from", "config", "onStart", "onRest", "onFrame", "children", "reset", "reverse", "force", "immediate", "delay", "attach", "destroyed", "interpolateTo", "ref", "lazy"]);

	  return forward;
	}

	function interpolateTo(props) {
	  var forward = getForwardProps(props);
	  if (is.und(forward)) return _extends$1({
	    to: forward
	  }, props);
	  var rest = Object.keys(props).reduce(function (a, k) {
	    var _extends2;

	    return !is.und(forward[k]) ? a : _extends$1({}, a, (_extends2 = {}, _extends2[k] = props[k], _extends2));
	  }, {});
	  return _extends$1({
	    to: forward
	  }, rest);
	}
	function handleRef(ref, forward) {
	  if (forward) {
	    // If it's a function, assume it's a ref callback
	    if (is.fun(forward)) forward(ref);else if (is.obj(forward)) {
	      forward.current = ref;
	    }
	  }

	  return ref;
	}

	var Animated =
	/*#__PURE__*/
	function () {
	  function Animated() {
	    this.payload = void 0;
	    this.children = [];
	  }

	  var _proto = Animated.prototype;

	  _proto.getAnimatedValue = function getAnimatedValue() {
	    return this.getValue();
	  };

	  _proto.getPayload = function getPayload() {
	    return this.payload || this;
	  };

	  _proto.attach = function attach() {};

	  _proto.detach = function detach() {};

	  _proto.getChildren = function getChildren() {
	    return this.children;
	  };

	  _proto.addChild = function addChild(child) {
	    if (this.children.length === 0) this.attach();
	    this.children.push(child);
	  };

	  _proto.removeChild = function removeChild(child) {
	    var index = this.children.indexOf(child);
	    this.children.splice(index, 1);
	    if (this.children.length === 0) this.detach();
	  };

	  return Animated;
	}();
	var AnimatedArray =
	/*#__PURE__*/
	function (_Animated) {
	  _inheritsLoose(AnimatedArray, _Animated);

	  function AnimatedArray() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _Animated.call.apply(_Animated, [this].concat(args)) || this;
	    _this.payload = [];

	    _this.attach = function () {
	      return _this.payload.forEach(function (p) {
	        return p instanceof Animated && p.addChild(_assertThisInitialized(_this));
	      });
	    };

	    _this.detach = function () {
	      return _this.payload.forEach(function (p) {
	        return p instanceof Animated && p.removeChild(_assertThisInitialized(_this));
	      });
	    };

	    return _this;
	  }

	  return AnimatedArray;
	}(Animated);
	var AnimatedObject =
	/*#__PURE__*/
	function (_Animated2) {
	  _inheritsLoose(AnimatedObject, _Animated2);

	  function AnimatedObject() {
	    var _this2;

	    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      args[_key3] = arguments[_key3];
	    }

	    _this2 = _Animated2.call.apply(_Animated2, [this].concat(args)) || this;
	    _this2.payload = {};

	    _this2.attach = function () {
	      return Object.values(_this2.payload).forEach(function (s) {
	        return s instanceof Animated && s.addChild(_assertThisInitialized(_this2));
	      });
	    };

	    _this2.detach = function () {
	      return Object.values(_this2.payload).forEach(function (s) {
	        return s instanceof Animated && s.removeChild(_assertThisInitialized(_this2));
	      });
	    };

	    return _this2;
	  }

	  var _proto2 = AnimatedObject.prototype;

	  _proto2.getValue = function getValue(animated) {
	    if (animated === void 0) {
	      animated = false;
	    }

	    var payload = {};

	    for (var _key4 in this.payload) {
	      var value = this.payload[_key4];
	      if (animated && !(value instanceof Animated)) continue;
	      payload[_key4] = value instanceof Animated ? value[animated ? 'getAnimatedValue' : 'getValue']() : value;
	    }

	    return payload;
	  };

	  _proto2.getAnimatedValue = function getAnimatedValue() {
	    return this.getValue(true);
	  };

	  return AnimatedObject;
	}(Animated);

	var applyAnimatedValues;
	function injectApplyAnimatedValues(fn, transform) {
	  applyAnimatedValues = {
	    fn: fn,
	    transform: transform
	  };
	}
	var colorNames;
	function injectColorNames(names) {
	  colorNames = names;
	}
	var requestFrame = function requestFrame(cb) {
	  return typeof window !== 'undefined' ? window.requestAnimationFrame(cb) : -1;
	};
	var cancelFrame = function cancelFrame(id) {
	  typeof window !== 'undefined' && window.cancelAnimationFrame(id);
	};
	function injectFrame(raf, caf) {
	  requestFrame = raf;
	  cancelFrame = caf;
	}
	var interpolation;
	function injectStringInterpolator(fn) {
	  interpolation = fn;
	}
	var now = function now() {
	  return Date.now();
	};
	function injectNow(nowFn) {
	  now = nowFn;
	}
	var defaultElement;
	function injectDefaultElement(el) {
	  defaultElement = el;
	}
	var animatedApi = function animatedApi(node) {
	  return node.current;
	};
	function injectAnimatedApi(fn) {
	  animatedApi = fn;
	}
	var createAnimatedStyle;
	function injectCreateAnimatedStyle(factory) {
	  createAnimatedStyle = factory;
	}
	var manualFrameloop;
	function injectManualFrameloop(callback) {
	  manualFrameloop = callback;
	}

	var Globals = /*#__PURE__*/Object.freeze({
	  get applyAnimatedValues () { return applyAnimatedValues; },
	  injectApplyAnimatedValues: injectApplyAnimatedValues,
	  get colorNames () { return colorNames; },
	  injectColorNames: injectColorNames,
	  get requestFrame () { return requestFrame; },
	  get cancelFrame () { return cancelFrame; },
	  injectFrame: injectFrame,
	  get interpolation () { return interpolation; },
	  injectStringInterpolator: injectStringInterpolator,
	  get now () { return now; },
	  injectNow: injectNow,
	  get defaultElement () { return defaultElement; },
	  injectDefaultElement: injectDefaultElement,
	  get animatedApi () { return animatedApi; },
	  injectAnimatedApi: injectAnimatedApi,
	  get createAnimatedStyle () { return createAnimatedStyle; },
	  injectCreateAnimatedStyle: injectCreateAnimatedStyle,
	  get manualFrameloop () { return manualFrameloop; },
	  injectManualFrameloop: injectManualFrameloop
	});

	/**
	 * Wraps the `style` property with `AnimatedStyle`.
	 */

	var AnimatedProps =
	/*#__PURE__*/
	function (_AnimatedObject) {
	  _inheritsLoose(AnimatedProps, _AnimatedObject);

	  function AnimatedProps(props, callback) {
	    var _this;

	    _this = _AnimatedObject.call(this) || this;
	    _this.update = void 0;
	    _this.payload = !props.style ? props : _extends$1({}, props, {
	      style: createAnimatedStyle(props.style)
	    });
	    _this.update = callback;

	    _this.attach();

	    return _this;
	  }

	  return AnimatedProps;
	}(AnimatedObject);

	var isFunctionComponent = function isFunctionComponent(val) {
	  return is.fun(val) && !(val.prototype instanceof React__default.Component);
	};

	var createAnimatedComponent = function createAnimatedComponent(Component) {
	  var AnimatedComponent = React.forwardRef(function (props, ref) {
	    var forceUpdate = useForceUpdate$1();
	    var mounted = React.useRef(true);
	    var propsAnimated = React.useRef(null);
	    var node = React.useRef(null);
	    var attachProps = React.useCallback(function (props) {
	      var oldPropsAnimated = propsAnimated.current;

	      var callback = function callback() {
	        var didUpdate = false;

	        if (node.current) {
	          didUpdate = applyAnimatedValues.fn(node.current, propsAnimated.current.getAnimatedValue());
	        }

	        if (!node.current || didUpdate === false) {
	          // If no referenced node has been found, or the update target didn't have a
	          // native-responder, then forceUpdate the animation ...
	          forceUpdate();
	        }
	      };

	      propsAnimated.current = new AnimatedProps(props, callback);
	      oldPropsAnimated && oldPropsAnimated.detach();
	    }, []);
	    React.useEffect(function () {
	      return function () {
	        mounted.current = false;
	        propsAnimated.current && propsAnimated.current.detach();
	      };
	    }, []);
	    React.useImperativeHandle(ref, function () {
	      return animatedApi(node, mounted, forceUpdate);
	    });
	    attachProps(props);

	    var _getValue = propsAnimated.current.getValue();
	        _getValue.scrollTop;
	        _getValue.scrollLeft;
	        var animatedProps = _objectWithoutPropertiesLoose$1(_getValue, ["scrollTop", "scrollLeft"]); // Functions cannot have refs, see:
	    // See: https://github.com/react-spring/react-spring/issues/569


	    var refFn = isFunctionComponent(Component) ? undefined : function (childRef) {
	      return node.current = handleRef(childRef, ref);
	    };
	    return React__default.createElement(Component, _extends$1({}, animatedProps, {
	      ref: refFn
	    }));
	  });
	  return AnimatedComponent;
	};

	var active = false;
	var controllers = new Set();

	var update = function update() {
	  if (!active) return false;
	  var time = now();

	  for (var _iterator = controllers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var controller = _ref;
	    var isActive = false;

	    for (var configIdx = 0; configIdx < controller.configs.length; configIdx++) {
	      var config = controller.configs[configIdx];
	      var endOfAnimation = void 0,
	          lastTime = void 0;

	      for (var valIdx = 0; valIdx < config.animatedValues.length; valIdx++) {
	        var animation = config.animatedValues[valIdx]; // If an animation is done, skip, until all of them conclude

	        if (animation.done) continue;
	        var from = config.fromValues[valIdx];
	        var to = config.toValues[valIdx];
	        var position = animation.lastPosition;
	        var isAnimated = to instanceof Animated;
	        var velocity = Array.isArray(config.initialVelocity) ? config.initialVelocity[valIdx] : config.initialVelocity;
	        if (isAnimated) to = to.getValue(); // Conclude animation if it's either immediate, or from-values match end-state

	        if (config.immediate) {
	          animation.setValue(to);
	          animation.done = true;
	          continue;
	        } // Break animation when string values are involved


	        if (typeof from === 'string' || typeof to === 'string') {
	          animation.setValue(to);
	          animation.done = true;
	          continue;
	        }

	        if (config.duration !== void 0) {
	          /** Duration easing */
	          position = from + config.easing((time - animation.startTime) / config.duration) * (to - from);
	          endOfAnimation = time >= animation.startTime + config.duration;
	        } else if (config.decay) {
	          /** Decay easing */
	          position = from + velocity / (1 - 0.998) * (1 - Math.exp(-(1 - 0.998) * (time - animation.startTime)));
	          endOfAnimation = Math.abs(animation.lastPosition - position) < 0.1;
	          if (endOfAnimation) to = position;
	        } else {
	          /** Spring easing */
	          lastTime = animation.lastTime !== void 0 ? animation.lastTime : time;
	          velocity = animation.lastVelocity !== void 0 ? animation.lastVelocity : config.initialVelocity; // If we lost a lot of frames just jump to the end.

	          if (time > lastTime + 64) lastTime = time; // http://gafferongames.com/game-physics/fix-your-timestep/

	          var numSteps = Math.floor(time - lastTime);

	          for (var i = 0; i < numSteps; ++i) {
	            var force = -config.tension * (position - to);
	            var damping = -config.friction * velocity;
	            var acceleration = (force + damping) / config.mass;
	            velocity = velocity + acceleration * 1 / 1000;
	            position = position + velocity * 1 / 1000;
	          } // Conditions for stopping the spring animation


	          var isOvershooting = config.clamp && config.tension !== 0 ? from < to ? position > to : position < to : false;
	          var isVelocity = Math.abs(velocity) <= config.precision;
	          var isDisplacement = config.tension !== 0 ? Math.abs(to - position) <= config.precision : true;
	          endOfAnimation = isOvershooting || isVelocity && isDisplacement;
	          animation.lastVelocity = velocity;
	          animation.lastTime = time;
	        } // Trails aren't done until their parents conclude


	        if (isAnimated && !config.toValues[valIdx].done) endOfAnimation = false;

	        if (endOfAnimation) {
	          // Ensure that we end up with a round value
	          if (animation.value !== to) position = to;
	          animation.done = true;
	        } else isActive = true;

	        animation.setValue(position);
	        animation.lastPosition = position;
	      } // Keep track of updated values only when necessary


	      if (controller.props.onFrame) controller.values[config.name] = config.interpolation.getValue();
	    } // Update callbacks in the end of the frame


	    if (controller.props.onFrame) controller.props.onFrame(controller.values); // Either call onEnd or next frame

	    if (!isActive) {
	      controllers.delete(controller);
	      controller.stop(true);
	    }
	  } // Loop over as long as there are controllers ...


	  if (controllers.size) {
	    if (manualFrameloop) manualFrameloop();else requestFrame(update);
	  } else {
	    active = false;
	  }

	  return active;
	};

	var start = function start(controller) {
	  if (!controllers.has(controller)) controllers.add(controller);

	  if (!active) {
	    active = true;
	    if (manualFrameloop) requestFrame(manualFrameloop);else requestFrame(update);
	  }
	};

	var stop = function stop(controller) {
	  if (controllers.has(controller)) controllers.delete(controller);
	};

	function createInterpolator(range, output, extrapolate) {
	  if (typeof range === 'function') {
	    return range;
	  }

	  if (Array.isArray(range)) {
	    return createInterpolator({
	      range: range,
	      output: output,
	      extrapolate: extrapolate
	    });
	  }

	  if (interpolation && typeof range.output[0] === 'string') {
	    return interpolation(range);
	  }

	  var config = range;
	  var outputRange = config.output;
	  var inputRange = config.range || [0, 1];
	  var extrapolateLeft = config.extrapolateLeft || config.extrapolate || 'extend';
	  var extrapolateRight = config.extrapolateRight || config.extrapolate || 'extend';

	  var easing = config.easing || function (t) {
	    return t;
	  };

	  return function (input) {
	    var range = findRange(input, inputRange);
	    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight, config.map);
	  };
	}

	function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {
	  var result = map ? map(input) : input; // Extrapolate

	  if (result < inputMin) {
	    if (extrapolateLeft === 'identity') return result;else if (extrapolateLeft === 'clamp') result = inputMin;
	  }

	  if (result > inputMax) {
	    if (extrapolateRight === 'identity') return result;else if (extrapolateRight === 'clamp') result = inputMax;
	  }

	  if (outputMin === outputMax) return outputMin;
	  if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax; // Input Range

	  if (inputMin === -Infinity) result = -result;else if (inputMax === Infinity) result = result - inputMin;else result = (result - inputMin) / (inputMax - inputMin); // Easing

	  result = easing(result); // Output Range

	  if (outputMin === -Infinity) result = -result;else if (outputMax === Infinity) result = result + outputMin;else result = result * (outputMax - outputMin) + outputMin;
	  return result;
	}

	function findRange(input, inputRange) {
	  for (var i = 1; i < inputRange.length - 1; ++i) {
	    if (inputRange[i] >= input) break;
	  }

	  return i - 1;
	}

	var AnimatedInterpolation =
	/*#__PURE__*/
	function (_AnimatedArray) {
	  _inheritsLoose(AnimatedInterpolation, _AnimatedArray);

	  function AnimatedInterpolation(parents, range, output, extrapolate) {
	    var _this;

	    _this = _AnimatedArray.call(this) || this;
	    _this.calc = void 0;
	    _this.payload = parents instanceof AnimatedArray && !(parents instanceof AnimatedInterpolation) ? parents.getPayload() : Array.isArray(parents) ? parents : [parents];
	    _this.calc = createInterpolator(range, output, extrapolate);
	    return _this;
	  }

	  var _proto = AnimatedInterpolation.prototype;

	  _proto.getValue = function getValue() {
	    return this.calc.apply(this, this.payload.map(function (value) {
	      return value.getValue();
	    }));
	  };

	  _proto.updateConfig = function updateConfig(range, output, extrapolate) {
	    this.calc = createInterpolator(range, output, extrapolate);
	  };

	  _proto.interpolate = function interpolate(range, output, extrapolate) {
	    return new AnimatedInterpolation(this, range, output, extrapolate);
	  };

	  return AnimatedInterpolation;
	}(AnimatedArray);

	var interpolate$1 = function interpolate(parents, range, output) {
	  return parents && new AnimatedInterpolation(parents, range, output);
	};

	var config = {
	  default: {
	    tension: 170,
	    friction: 26
	  },
	  gentle: {
	    tension: 120,
	    friction: 14
	  },
	  wobbly: {
	    tension: 180,
	    friction: 12
	  },
	  stiff: {
	    tension: 210,
	    friction: 20
	  },
	  slow: {
	    tension: 280,
	    friction: 60
	  },
	  molasses: {
	    tension: 280,
	    friction: 120
	  }
	};

	/** API
	 *  useChain(references, timeSteps, timeFrame)
	 */

	function useChain(refs, timeSteps, timeFrame) {
	  if (timeFrame === void 0) {
	    timeFrame = 1000;
	  }

	  var previous = React.useRef();
	  React.useEffect(function () {
	    if (is.equ(refs, previous.current)) refs.forEach(function (_ref) {
	      var current = _ref.current;
	      return current && current.start();
	    });else if (timeSteps) {
	      refs.forEach(function (_ref2, index) {
	        var current = _ref2.current;

	        if (current) {
	          var ctrls = current.controllers;

	          if (ctrls.length) {
	            var t = timeFrame * timeSteps[index];
	            ctrls.forEach(function (ctrl) {
	              ctrl.queue = ctrl.queue.map(function (e) {
	                return _extends$1({}, e, {
	                  delay: e.delay + t
	                });
	              });
	              ctrl.start();
	            });
	          }
	        }
	      });
	    } else refs.reduce(function (q, _ref3, rI) {
	      var current = _ref3.current;
	      return q = q.then(function () {
	        return current.start();
	      });
	    }, Promise.resolve());
	    previous.current = refs;
	  });
	}

	/**
	 * Animated works by building a directed acyclic graph of dependencies
	 * transparently when you render your Animated components.
	 *
	 *               new Animated.Value(0)
	 *     .interpolate()        .interpolate()    new Animated.Value(1)
	 *         opacity               translateY      scale
	 *          style                         transform
	 *         View#234                         style
	 *                                         View#123
	 *
	 * A) Top Down phase
	 * When an AnimatedValue is updated, we recursively go down through this
	 * graph in order to find leaf nodes: the views that we flag as needing
	 * an update.
	 *
	 * B) Bottom Up phase
	 * When a view is flagged as needing an update, we recursively go back up
	 * in order to build the new value that it needs. The reason why we need
	 * this two-phases process is to deal with composite props such as
	 * transform which can receive values from multiple parents.
	 */
	function addAnimatedStyles(node, styles) {
	  if ('update' in node) {
	    styles.add(node);
	  } else {
	    node.getChildren().forEach(function (child) {
	      return addAnimatedStyles(child, styles);
	    });
	  }
	}

	var AnimatedValue =
	/*#__PURE__*/
	function (_Animated) {
	  _inheritsLoose(AnimatedValue, _Animated);

	  function AnimatedValue(_value) {
	    var _this;

	    _this = _Animated.call(this) || this;
	    _this.animatedStyles = new Set();
	    _this.value = void 0;
	    _this.startPosition = void 0;
	    _this.lastPosition = void 0;
	    _this.lastVelocity = void 0;
	    _this.startTime = void 0;
	    _this.lastTime = void 0;
	    _this.done = false;

	    _this.setValue = function (value, flush) {
	      if (flush === void 0) {
	        flush = true;
	      }

	      _this.value = value;
	      if (flush) _this.flush();
	    };

	    _this.value = _value;
	    _this.startPosition = _value;
	    _this.lastPosition = _value;
	    return _this;
	  }

	  var _proto = AnimatedValue.prototype;

	  _proto.flush = function flush() {
	    if (this.animatedStyles.size === 0) {
	      addAnimatedStyles(this, this.animatedStyles);
	    }

	    this.animatedStyles.forEach(function (animatedStyle) {
	      return animatedStyle.update();
	    });
	  };

	  _proto.clearStyles = function clearStyles() {
	    this.animatedStyles.clear();
	  };

	  _proto.getValue = function getValue() {
	    return this.value;
	  };

	  _proto.interpolate = function interpolate(range, output, extrapolate) {
	    return new AnimatedInterpolation(this, range, output, extrapolate);
	  };

	  return AnimatedValue;
	}(Animated);

	var AnimatedValueArray =
	/*#__PURE__*/
	function (_AnimatedArray) {
	  _inheritsLoose(AnimatedValueArray, _AnimatedArray);

	  function AnimatedValueArray(values) {
	    var _this;

	    _this = _AnimatedArray.call(this) || this;
	    _this.payload = values.map(function (n) {
	      return new AnimatedValue(n);
	    });
	    return _this;
	  }

	  var _proto = AnimatedValueArray.prototype;

	  _proto.setValue = function setValue(value, flush) {
	    var _this2 = this;

	    if (flush === void 0) {
	      flush = true;
	    }

	    if (Array.isArray(value)) {
	      if (value.length === this.payload.length) {
	        value.forEach(function (v, i) {
	          return _this2.payload[i].setValue(v, flush);
	        });
	      }
	    } else {
	      this.payload.forEach(function (p) {
	        return p.setValue(value, flush);
	      });
	    }
	  };

	  _proto.getValue = function getValue() {
	    return this.payload.map(function (v) {
	      return v.getValue();
	    });
	  };

	  _proto.interpolate = function interpolate(range, output) {
	    return new AnimatedInterpolation(this, range, output);
	  };

	  return AnimatedValueArray;
	}(AnimatedArray);

	var G = 0;

	var Controller =
	/*#__PURE__*/
	function () {
	  function Controller() {
	    var _this = this;

	    this.id = void 0;
	    this.idle = true;
	    this.hasChanged = false;
	    this.guid = 0;
	    this.local = 0;
	    this.props = {};
	    this.merged = {};
	    this.animations = {};
	    this.interpolations = {};
	    this.values = {};
	    this.configs = [];
	    this.listeners = [];
	    this.queue = [];
	    this.localQueue = void 0;

	    this.getValues = function () {
	      return _this.interpolations;
	    };

	    this.id = G++;
	  }
	  /** update(props)
	   *  This function filters input props and creates an array of tasks which are executed in .start()
	   *  Each task is allowed to carry a delay, which means it can execute asnychroneously */


	  var _proto = Controller.prototype;

	  _proto.update = function update$$1(args) {
	    //this._id = n + this.id
	    if (!args) return this; // Extract delay and the to-prop from props

	    var _ref = interpolateTo(args),
	        _ref$delay = _ref.delay,
	        delay = _ref$delay === void 0 ? 0 : _ref$delay,
	        to = _ref.to,
	        props = _objectWithoutPropertiesLoose$1(_ref, ["delay", "to"]);

	    if (is.arr(to) || is.fun(to)) {
	      // If config is either a function or an array queue it up as is
	      this.queue.push(_extends$1({}, props, {
	        delay: delay,
	        to: to
	      }));
	    } else if (to) {
	      // Otherwise go through each key since it could be delayed individually
	      var ops = {};
	      Object.entries(to).forEach(function (_ref2) {
	        var _to;

	        var k = _ref2[0],
	            v = _ref2[1];

	        // Fetch delay and create an entry, consisting of the to-props, the delay, and basic props
	        var entry = _extends$1({
	          to: (_to = {}, _to[k] = v, _to),
	          delay: callProp(delay, k)
	        }, props);

	        var previous = ops[entry.delay] && ops[entry.delay].to;
	        ops[entry.delay] = _extends$1({}, ops[entry.delay], entry, {
	          to: _extends$1({}, previous, entry.to)
	        });
	      });
	      this.queue = Object.values(ops);
	    } // Sort queue, so that async calls go last


	    this.queue = this.queue.sort(function (a, b) {
	      return a.delay - b.delay;
	    }); // Diff the reduced props immediately (they'll contain the from-prop and some config)

	    this.diff(props);
	    return this;
	  }
	  /** start(onEnd)
	   *  This function either executes a queue, if present, or starts the frameloop, which animates */
	  ;

	  _proto.start = function start$$1(onEnd) {
	    var _this2 = this;

	    // If a queue is present we must excecute it
	    if (this.queue.length) {
	      this.idle = false; // Updates can interrupt trailing queues, in that case we just merge values

	      if (this.localQueue) {
	        this.localQueue.forEach(function (_ref3) {
	          var _ref3$from = _ref3.from,
	              from = _ref3$from === void 0 ? {} : _ref3$from,
	              _ref3$to = _ref3.to,
	              to = _ref3$to === void 0 ? {} : _ref3$to;
	          if (is.obj(from)) _this2.merged = _extends$1({}, from, _this2.merged);
	          if (is.obj(to)) _this2.merged = _extends$1({}, _this2.merged, to);
	        });
	      } // The guid helps us tracking frames, a new queue over an old one means an override
	      // We discard async calls in that caseÍ


	      var local = this.local = ++this.guid;
	      var queue = this.localQueue = this.queue;
	      this.queue = []; // Go through each entry and execute it

	      queue.forEach(function (_ref4, index) {
	        var delay = _ref4.delay,
	            props = _objectWithoutPropertiesLoose$1(_ref4, ["delay"]);

	        var cb = function cb(finished) {
	          if (index === queue.length - 1 && local === _this2.guid && finished) {
	            _this2.idle = true;
	            if (_this2.props.onRest) _this2.props.onRest(_this2.merged);
	          }

	          if (onEnd) onEnd();
	        }; // Entries can be delayed, ansyc or immediate


	        var async = is.arr(props.to) || is.fun(props.to);

	        if (delay) {
	          setTimeout(function () {
	            if (local === _this2.guid) {
	              if (async) _this2.runAsync(props, cb);else _this2.diff(props).start(cb);
	            }
	          }, delay);
	        } else if (async) _this2.runAsync(props, cb);else _this2.diff(props).start(cb);
	      });
	    } // Otherwise we kick of the frameloop
	    else {
	        if (is.fun(onEnd)) this.listeners.push(onEnd);
	        if (this.props.onStart) this.props.onStart();

	        start(this);
	      }

	    return this;
	  };

	  _proto.stop = function stop$$1(finished) {
	    this.listeners.forEach(function (onEnd) {
	      return onEnd(finished);
	    });
	    this.listeners = [];
	    return this;
	  }
	  /** Pause sets onEnd listeners free, but also removes the controller from the frameloop */
	  ;

	  _proto.pause = function pause(finished) {
	    this.stop(true);
	    if (finished) stop(this);
	    return this;
	  };

	  _proto.runAsync = function runAsync(_ref5, onEnd) {
	    var _this3 = this;

	    _ref5.delay;
	        var props = _objectWithoutPropertiesLoose$1(_ref5, ["delay"]);

	    var local = this.local; // If "to" is either a function or an array it will be processed async, therefor "to" should be empty right now
	    // If the view relies on certain values "from" has to be present

	    var queue = Promise.resolve(undefined);

	    if (is.arr(props.to)) {
	      var _loop = function _loop(i) {
	        var index = i;

	        var fresh = _extends$1({}, props, interpolateTo(props.to[index]));

	        if (is.arr(fresh.config)) fresh.config = fresh.config[index];
	        queue = queue.then(function () {
	          //this.stop()
	          if (local === _this3.guid) return new Promise(function (r) {
	            return _this3.diff(fresh).start(r);
	          });
	        });
	      };

	      for (var i = 0; i < props.to.length; i++) {
	        _loop(i);
	      }
	    } else if (is.fun(props.to)) {
	      var index = 0;
	      var last;
	      queue = queue.then(function () {
	        return props.to( // next(props)
	        function (p) {
	          var fresh = _extends$1({}, props, interpolateTo(p));

	          if (is.arr(fresh.config)) fresh.config = fresh.config[index];
	          index++; //this.stop()

	          if (local === _this3.guid) return last = new Promise(function (r) {
	            return _this3.diff(fresh).start(r);
	          });
	          return;
	        }, // cancel()
	        function (finished) {
	          if (finished === void 0) {
	            finished = true;
	          }

	          return _this3.stop(finished);
	        }).then(function () {
	          return last;
	        });
	      });
	    }

	    queue.then(onEnd);
	  };

	  _proto.diff = function diff(props) {
	    var _this4 = this;

	    this.props = _extends$1({}, this.props, props);
	    var _this$props = this.props,
	        _this$props$from = _this$props.from,
	        from = _this$props$from === void 0 ? {} : _this$props$from,
	        _this$props$to = _this$props.to,
	        to = _this$props$to === void 0 ? {} : _this$props$to,
	        _this$props$config = _this$props.config,
	        config = _this$props$config === void 0 ? {} : _this$props$config,
	        reverse = _this$props.reverse,
	        attach = _this$props.attach,
	        reset = _this$props.reset,
	        immediate = _this$props.immediate; // Reverse values when requested

	    if (reverse) {
	      var _ref6 = [to, from];
	      from = _ref6[0];
	      to = _ref6[1];
	    } // This will collect all props that were ever set, reset merged props when necessary


	    this.merged = _extends$1({}, from, this.merged, to);
	    this.hasChanged = false; // Attachment handling, trailed springs can "attach" themselves to a previous spring

	    var target = attach && attach(this); // Reduces input { name: value } pairs into animated values

	    this.animations = Object.entries(this.merged).reduce(function (acc, _ref7) {
	      var name = _ref7[0],
	          value = _ref7[1];
	      // Issue cached entries, except on reset
	      var entry = acc[name] || {}; // Figure out what the value is supposed to be

	      var isNumber = is.num(value);
	      var isString = is.str(value) && !value.startsWith('#') && !/\d/.test(value) && !colorNames[value];
	      var isArray = is.arr(value);
	      var isInterpolation = !isNumber && !isArray && !isString;
	      var fromValue = !is.und(from[name]) ? from[name] : value;
	      var toValue = isNumber || isArray ? value : isString ? value : 1;
	      var toConfig = callProp(config, name);
	      if (target) toValue = target.animations[name].parent;
	      var parent = entry.parent,
	          interpolation$$1 = entry.interpolation,
	          toValues = toArray$1(target ? toValue.getPayload() : toValue),
	          animatedValues;
	      var newValue = value;
	      if (isInterpolation) newValue = interpolation({
	        range: [0, 1],
	        output: [value, value]
	      })(1);
	      var currentValue = interpolation$$1 && interpolation$$1.getValue(); // Change detection flags

	      var isFirst = is.und(parent);
	      var isActive = !isFirst && entry.animatedValues.some(function (v) {
	        return !v.done;
	      });
	      var currentValueDiffersFromGoal = !is.equ(newValue, currentValue);
	      var hasNewGoal = !is.equ(newValue, entry.previous);
	      var hasNewConfig = !is.equ(toConfig, entry.config); // Change animation props when props indicate a new goal (new value differs from previous one)
	      // and current values differ from it. Config changes trigger a new update as well (though probably shouldn't?)

	      if (reset || hasNewGoal && currentValueDiffersFromGoal || hasNewConfig) {
	        var _extends2;

	        // Convert regular values into animated values, ALWAYS re-use if possible
	        if (isNumber || isString) parent = interpolation$$1 = entry.parent || new AnimatedValue(fromValue);else if (isArray) parent = interpolation$$1 = entry.parent || new AnimatedValueArray(fromValue);else if (isInterpolation) {
	          var prev = entry.interpolation && entry.interpolation.calc(entry.parent.value);
	          prev = prev !== void 0 && !reset ? prev : fromValue;

	          if (entry.parent) {
	            parent = entry.parent;
	            parent.setValue(0, false);
	          } else parent = new AnimatedValue(0);

	          var range = {
	            output: [prev, value]
	          };

	          if (entry.interpolation) {
	            interpolation$$1 = entry.interpolation;
	            entry.interpolation.updateConfig(range);
	          } else interpolation$$1 = parent.interpolate(range);
	        }
	        toValues = toArray$1(target ? toValue.getPayload() : toValue);
	        animatedValues = toArray$1(parent.getPayload());
	        if (reset && !isInterpolation) parent.setValue(fromValue, false);
	        _this4.hasChanged = true; // Reset animated values

	        animatedValues.forEach(function (value) {
	          value.startPosition = value.value;
	          value.lastPosition = value.value;
	          value.lastVelocity = isActive ? value.lastVelocity : undefined;
	          value.lastTime = isActive ? value.lastTime : undefined;
	          value.startTime = now();
	          value.done = false;
	          value.animatedStyles.clear();
	        }); // Set immediate values

	        if (callProp(immediate, name)) {
	          parent.setValue(isInterpolation ? toValue : value, false);
	        }

	        return _extends$1({}, acc, (_extends2 = {}, _extends2[name] = _extends$1({}, entry, {
	          name: name,
	          parent: parent,
	          interpolation: interpolation$$1,
	          animatedValues: animatedValues,
	          toValues: toValues,
	          previous: newValue,
	          config: toConfig,
	          fromValues: toArray$1(parent.getValue()),
	          immediate: callProp(immediate, name),
	          initialVelocity: withDefault(toConfig.velocity, 0),
	          clamp: withDefault(toConfig.clamp, false),
	          precision: withDefault(toConfig.precision, 0.01),
	          tension: withDefault(toConfig.tension, 170),
	          friction: withDefault(toConfig.friction, 26),
	          mass: withDefault(toConfig.mass, 1),
	          duration: toConfig.duration,
	          easing: withDefault(toConfig.easing, function (t) {
	            return t;
	          }),
	          decay: toConfig.decay
	        }), _extends2));
	      } else {
	        if (!currentValueDiffersFromGoal) {
	          var _extends3;

	          // So ... the current target value (newValue) appears to be different from the previous value,
	          // which normally constitutes an update, but the actual value (currentValue) matches the target!
	          // In order to resolve this without causing an animation update we silently flag the animation as done,
	          // which it technically is. Interpolations also needs a config update with their target set to 1.
	          if (isInterpolation) {
	            parent.setValue(1, false);
	            interpolation$$1.updateConfig({
	              output: [newValue, newValue]
	            });
	          }

	          parent.done = true;
	          _this4.hasChanged = true;
	          return _extends$1({}, acc, (_extends3 = {}, _extends3[name] = _extends$1({}, acc[name], {
	            previous: newValue
	          }), _extends3));
	        }

	        return acc;
	      }
	    }, this.animations);

	    if (this.hasChanged) {
	      // Make animations available to frameloop
	      this.configs = Object.values(this.animations);
	      this.values = {};
	      this.interpolations = {};

	      for (var key in this.animations) {
	        this.interpolations[key] = this.animations[key].interpolation;
	        this.values[key] = this.animations[key].interpolation.getValue();
	      }
	    }

	    return this;
	  };

	  _proto.destroy = function destroy() {
	    this.stop();
	    this.props = {};
	    this.merged = {};
	    this.animations = {};
	    this.interpolations = {};
	    this.values = {};
	    this.configs = [];
	    this.local = 0;
	  };

	  return Controller;
	}();

	/** API
	 * const props = useSprings(number, [{ ... }, { ... }, ...])
	 * const [props, set] = useSprings(number, (i, controller) => ({ ... }))
	 */

	var useSprings = function useSprings(length, props) {
	  var mounted = React.useRef(false);
	  var ctrl = React.useRef();
	  var isFn = is.fun(props); // The controller maintains the animation values, starts and stops animations

	  var _useMemo = React.useMemo(function () {
	    // Remove old controllers
	    if (ctrl.current) {
	      ctrl.current.map(function (c) {
	        return c.destroy();
	      });
	      ctrl.current = undefined;
	    }

	    var ref;
	    return [new Array(length).fill().map(function (_, i) {
	      var ctrl = new Controller();
	      var newProps = isFn ? callProp(props, i, ctrl) : props[i];
	      if (i === 0) ref = newProps.ref;
	      ctrl.update(newProps);
	      if (!ref) ctrl.start();
	      return ctrl;
	    }), ref];
	  }, [length]),
	      controllers = _useMemo[0],
	      ref = _useMemo[1];

	  ctrl.current = controllers; // The hooks reference api gets defined here ...

	  React.useImperativeHandle(ref, function () {
	    return {
	      start: function start() {
	        return Promise.all(ctrl.current.map(function (c) {
	          return new Promise(function (r) {
	            return c.start(r);
	          });
	        }));
	      },
	      stop: function stop(finished) {
	        return ctrl.current.forEach(function (c) {
	          return c.stop(finished);
	        });
	      },

	      get controllers() {
	        return ctrl.current;
	      }

	    };
	  }); // This function updates the controllers

	  var updateCtrl = React.useMemo(function () {
	    return function (updateProps) {
	      return ctrl.current.map(function (c, i) {
	        c.update(isFn ? callProp(updateProps, i, c) : updateProps[i]);
	        if (!ref) c.start();
	      });
	    };
	  }, [length]); // Update controller if props aren't functional

	  React.useEffect(function () {
	    if (mounted.current) {
	      if (!isFn) updateCtrl(props);
	    } else if (!ref) ctrl.current.forEach(function (c) {
	      return c.start();
	    });
	  }); // Update mounted flag and destroy controller on unmount

	  React.useEffect(function () {
	    return mounted.current = true, function () {
	      return ctrl.current.forEach(function (c) {
	        return c.destroy();
	      });
	    };
	  }, []); // Return animated props, or, anim-props + the update-setter above

	  var propValues = ctrl.current.map(function (c) {
	    return c.getValues();
	  });
	  return isFn ? [propValues, updateCtrl, function (finished) {
	    return ctrl.current.forEach(function (c) {
	      return c.pause(finished);
	    });
	  }] : propValues;
	};

	/** API
	 * const props = useSpring({ ... })
	 * const [props, set] = useSpring(() => ({ ... }))
	 */

	var useSpring = function useSpring(props) {
	  var isFn = is.fun(props);

	  var _useSprings = useSprings(1, isFn ? props : [props]),
	      result = _useSprings[0],
	      set = _useSprings[1],
	      pause = _useSprings[2];

	  return isFn ? [result[0], set, pause] : result;
	};

	/** API
	 * const trails = useTrail(number, { ... })
	 * const [trails, set] = useTrail(number, () => ({ ... }))
	 */

	var useTrail = function useTrail(length, props) {
	  var mounted = React.useRef(false);
	  var isFn = is.fun(props);
	  var updateProps = callProp(props);
	  var instances = React.useRef();

	  var _useSprings = useSprings(length, function (i, ctrl) {
	    if (i === 0) instances.current = [];
	    instances.current.push(ctrl);
	    return _extends$1({}, updateProps, {
	      config: callProp(updateProps.config, i),
	      attach: i > 0 && function () {
	        return instances.current[i - 1];
	      }
	    });
	  }),
	      result = _useSprings[0],
	      set = _useSprings[1],
	      pause = _useSprings[2]; // Set up function to update controller


	  var updateCtrl = React.useMemo(function () {
	    return function (props) {
	      return set(function (i, ctrl) {
	        props.reverse ? i === 0 : length - 1 === i;
	        var attachIdx = props.reverse ? i + 1 : i - 1;
	        var attachController = instances.current[attachIdx];
	        return _extends$1({}, props, {
	          config: callProp(props.config || updateProps.config, i),
	          attach: attachController && function () {
	            return attachController;
	          }
	        });
	      });
	    };
	  }, [length, updateProps.reverse]); // Update controller if props aren't functional

	  React.useEffect(function () {
	    return void (mounted.current && !isFn && updateCtrl(props));
	  }); // Update mounted flag and destroy controller on unmount

	  React.useEffect(function () {
	    return void (mounted.current = true);
	  }, []);
	  return isFn ? [result, updateCtrl, pause] : result;
	};

	/** API
	 * const transitions = useTransition(items, itemKeys, { ... })
	 * const [transitions, update] = useTransition(items, itemKeys, () => ({ ... }))
	 */

	var guid = 0;
	var ENTER = 'enter';
	var LEAVE = 'leave';
	var UPDATE = 'update';

	var mapKeys = function mapKeys(items, keys) {
	  return (typeof keys === 'function' ? items.map(keys) : toArray$1(keys)).map(String);
	};

	var get = function get(props) {
	  var items = props.items,
	      _props$keys = props.keys,
	      keys = _props$keys === void 0 ? function (item) {
	    return item;
	  } : _props$keys,
	      rest = _objectWithoutPropertiesLoose$1(props, ["items", "keys"]);

	  items = toArray$1(items !== void 0 ? items : null);
	  return _extends$1({
	    items: items,
	    keys: mapKeys(items, keys)
	  }, rest);
	};

	function useTransition(input, keyTransform, config) {
	  var props = _extends$1({
	    items: input,
	    keys: keyTransform || function (i) {
	      return i;
	    }
	  }, config);

	  var _get = get(props),
	      _get$lazy = _get.lazy,
	      lazy = _get$lazy === void 0 ? false : _get$lazy;
	      _get.unique;
	      var _get$reset = _get.reset,
	      reset = _get$reset === void 0 ? false : _get$reset;
	      _get.enter;
	      _get.leave;
	      _get.update;
	      var onDestroyed = _get.onDestroyed;
	      _get.keys;
	      _get.items;
	      var onFrame = _get.onFrame,
	      _onRest = _get.onRest,
	      onStart = _get.onStart,
	      ref = _get.ref,
	      extra = _objectWithoutPropertiesLoose$1(_get, ["lazy", "unique", "reset", "enter", "leave", "update", "onDestroyed", "keys", "items", "onFrame", "onRest", "onStart", "ref"]);

	  var forceUpdate = useForceUpdate$1();
	  var mounted = React.useRef(false);
	  var state = React.useRef({
	    mounted: false,
	    first: true,
	    deleted: [],
	    current: {},
	    transitions: [],
	    prevProps: {},
	    paused: !!props.ref,
	    instances: !mounted.current && new Map(),
	    forceUpdate: forceUpdate
	  });
	  React.useImperativeHandle(props.ref, function () {
	    return {
	      start: function start() {
	        return Promise.all(Array.from(state.current.instances).map(function (_ref) {
	          var c = _ref[1];
	          return new Promise(function (r) {
	            return c.start(r);
	          });
	        }));
	      },
	      stop: function stop(finished) {
	        return Array.from(state.current.instances).forEach(function (_ref2) {
	          var c = _ref2[1];
	          return c.stop(finished);
	        });
	      },

	      get controllers() {
	        return Array.from(state.current.instances).map(function (_ref3) {
	          var c = _ref3[1];
	          return c;
	        });
	      }

	    };
	  }); // Update state

	  state.current = diffItems(state.current, props);

	  if (state.current.changed) {
	    // Update state
	    state.current.transitions.forEach(function (transition) {
	      var slot = transition.slot,
	          from = transition.from,
	          to = transition.to,
	          config = transition.config,
	          trail = transition.trail,
	          key = transition.key,
	          item = transition.item;
	      if (!state.current.instances.has(key)) state.current.instances.set(key, new Controller()); // update the map object

	      var ctrl = state.current.instances.get(key);

	      var newProps = _extends$1({}, extra, {
	        to: to,
	        from: from,
	        config: config,
	        ref: ref,
	        onRest: function onRest(values) {
	          if (state.current.mounted) {
	            if (transition.destroyed) {
	              // If no ref is given delete destroyed items immediately
	              if (!ref && !lazy) cleanUp(state, key);
	              if (onDestroyed) onDestroyed(item);
	            } // A transition comes to rest once all its springs conclude


	            var curInstances = Array.from(state.current.instances);
	            var active = curInstances.some(function (_ref4) {
	              var c = _ref4[1];
	              return !c.idle;
	            });
	            if (!active && (ref || lazy) && state.current.deleted.length > 0) cleanUp(state);
	            if (_onRest) _onRest(item, slot, values);
	          }
	        },
	        onStart: onStart && function () {
	          return onStart(item, slot);
	        },
	        onFrame: onFrame && function (values) {
	          return onFrame(item, slot, values);
	        },
	        delay: trail,
	        reset: reset && slot === ENTER // Update controller

	      });

	      ctrl.update(newProps);
	      if (!state.current.paused) ctrl.start();
	    });
	  }

	  React.useEffect(function () {
	    state.current.mounted = mounted.current = true;
	    return function () {
	      state.current.mounted = mounted.current = false;
	      Array.from(state.current.instances).map(function (_ref5) {
	        var c = _ref5[1];
	        return c.destroy();
	      });
	      state.current.instances.clear();
	    };
	  }, []);
	  return state.current.transitions.map(function (_ref6) {
	    var item = _ref6.item,
	        slot = _ref6.slot,
	        key = _ref6.key;
	    return {
	      item: item,
	      key: key,
	      state: slot,
	      props: state.current.instances.get(key).getValues()
	    };
	  });
	}

	function cleanUp(state, filterKey) {
	  var deleted = state.current.deleted;

	  var _loop = function _loop() {
	    if (_isArray) {
	      if (_i >= _iterator.length) return "break";
	      _ref8 = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) return "break";
	      _ref8 = _i.value;
	    }

	    var _ref7 = _ref8;
	    var key = _ref7.key;

	    var filter = function filter(t) {
	      return t.key !== key;
	    };

	    if (is.und(filterKey) || filterKey === key) {
	      state.current.instances.delete(key);
	      state.current.transitions = state.current.transitions.filter(filter);
	      state.current.deleted = state.current.deleted.filter(filter);
	    }
	  };

	  for (var _iterator = deleted, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	    var _ref8;

	    var _ret = _loop();

	    if (_ret === "break") break;
	  }

	  state.current.forceUpdate();
	}

	function diffItems(_ref9, props) {
	  var first = _ref9.first,
	      prevProps = _ref9.prevProps,
	      state = _objectWithoutPropertiesLoose$1(_ref9, ["first", "prevProps"]);

	  var _get2 = get(props),
	      items = _get2.items,
	      keys = _get2.keys,
	      initial = _get2.initial,
	      from = _get2.from,
	      enter = _get2.enter,
	      leave = _get2.leave,
	      update = _get2.update,
	      _get2$trail = _get2.trail,
	      trail = _get2$trail === void 0 ? 0 : _get2$trail,
	      unique = _get2.unique,
	      config = _get2.config,
	      _get2$order = _get2.order,
	      order = _get2$order === void 0 ? [ENTER, LEAVE, UPDATE] : _get2$order;

	  var _get3 = get(prevProps),
	      _keys = _get3.keys,
	      _items = _get3.items;

	  var current = _extends$1({}, state.current);

	  var deleted = [].concat(state.deleted); // Compare next keys with current keys

	  var currentKeys = Object.keys(current);
	  var currentSet = new Set(currentKeys);
	  var nextSet = new Set(keys);
	  var added = keys.filter(function (item) {
	    return !currentSet.has(item);
	  });
	  var removed = state.transitions.filter(function (item) {
	    return !item.destroyed && !nextSet.has(item.originalKey);
	  }).map(function (i) {
	    return i.originalKey;
	  });
	  var updated = keys.filter(function (item) {
	    return currentSet.has(item);
	  });
	  var delay = -trail;

	  while (order.length) {
	    var changeType = order.shift();

	    switch (changeType) {
	      case ENTER:
	        {
	          added.forEach(function (key, index) {
	            // In unique mode, remove fading out transitions if their key comes in again
	            if (unique && deleted.find(function (d) {
	              return d.originalKey === key;
	            })) deleted = deleted.filter(function (t) {
	              return t.originalKey !== key;
	            });
	            var keyIndex = keys.indexOf(key);
	            var item = items[keyIndex];
	            var slot = first && initial !== void 0 ? 'initial' : ENTER;
	            current[key] = {
	              slot: slot,
	              originalKey: key,
	              key: unique ? String(key) : guid++,
	              item: item,
	              trail: delay = delay + trail,
	              config: callProp(config, item, slot),
	              from: callProp(first ? initial !== void 0 ? initial || {} : from : from, item),
	              to: callProp(enter, item)
	            };
	          });
	          break;
	        }

	      case LEAVE:
	        {
	          removed.forEach(function (key) {
	            var keyIndex = _keys.indexOf(key);

	            var item = _items[keyIndex];
	            var slot = LEAVE;
	            deleted.unshift(_extends$1({}, current[key], {
	              slot: slot,
	              destroyed: true,
	              left: _keys[Math.max(0, keyIndex - 1)],
	              right: _keys[Math.min(_keys.length, keyIndex + 1)],
	              trail: delay = delay + trail,
	              config: callProp(config, item, slot),
	              to: callProp(leave, item)
	            }));
	            delete current[key];
	          });
	          break;
	        }

	      case UPDATE:
	        {
	          updated.forEach(function (key) {
	            var keyIndex = keys.indexOf(key);
	            var item = items[keyIndex];
	            var slot = UPDATE;
	            current[key] = _extends$1({}, current[key], {
	              item: item,
	              slot: slot,
	              trail: delay = delay + trail,
	              config: callProp(config, item, slot),
	              to: callProp(update, item)
	            });
	          });
	          break;
	        }
	    }
	  }

	  var out = keys.map(function (key) {
	    return current[key];
	  }); // This tries to restore order for deleted items by finding their last known siblings
	  // only using the left sibling to keep order placement consistent for all deleted items

	  deleted.forEach(function (_ref10) {
	    var left = _ref10.left;
	        _ref10.right;
	        var item = _objectWithoutPropertiesLoose$1(_ref10, ["left", "right"]);

	    var pos; // Was it the element on the left, if yes, move there ...

	    if ((pos = out.findIndex(function (t) {
	      return t.originalKey === left;
	    })) !== -1) pos += 1; // And if nothing else helps, move it to the start ¯\_(ツ)_/¯

	    pos = Math.max(0, pos);
	    out = [].concat(out.slice(0, pos), [item], out.slice(pos));
	  });
	  return _extends$1({}, state, {
	    changed: added.length || removed.length || updated.length,
	    first: first && added.length === 0,
	    transitions: out,
	    current: current,
	    deleted: deleted,
	    prevProps: props
	  });
	}

	var AnimatedStyle =
	/*#__PURE__*/
	function (_AnimatedObject) {
	  _inheritsLoose(AnimatedStyle, _AnimatedObject);

	  function AnimatedStyle(style) {
	    var _this;

	    if (style === void 0) {
	      style = {};
	    }

	    _this = _AnimatedObject.call(this) || this;

	    if (style.transform && !(style.transform instanceof Animated)) {
	      style = applyAnimatedValues.transform(style);
	    }

	    _this.payload = style;
	    return _this;
	  }

	  return AnimatedStyle;
	}(AnimatedObject);

	// http://www.w3.org/TR/css3-color/#svg-color
	var colors = {
	  transparent: 0x00000000,
	  aliceblue: 0xf0f8ffff,
	  antiquewhite: 0xfaebd7ff,
	  aqua: 0x00ffffff,
	  aquamarine: 0x7fffd4ff,
	  azure: 0xf0ffffff,
	  beige: 0xf5f5dcff,
	  bisque: 0xffe4c4ff,
	  black: 0x000000ff,
	  blanchedalmond: 0xffebcdff,
	  blue: 0x0000ffff,
	  blueviolet: 0x8a2be2ff,
	  brown: 0xa52a2aff,
	  burlywood: 0xdeb887ff,
	  burntsienna: 0xea7e5dff,
	  cadetblue: 0x5f9ea0ff,
	  chartreuse: 0x7fff00ff,
	  chocolate: 0xd2691eff,
	  coral: 0xff7f50ff,
	  cornflowerblue: 0x6495edff,
	  cornsilk: 0xfff8dcff,
	  crimson: 0xdc143cff,
	  cyan: 0x00ffffff,
	  darkblue: 0x00008bff,
	  darkcyan: 0x008b8bff,
	  darkgoldenrod: 0xb8860bff,
	  darkgray: 0xa9a9a9ff,
	  darkgreen: 0x006400ff,
	  darkgrey: 0xa9a9a9ff,
	  darkkhaki: 0xbdb76bff,
	  darkmagenta: 0x8b008bff,
	  darkolivegreen: 0x556b2fff,
	  darkorange: 0xff8c00ff,
	  darkorchid: 0x9932ccff,
	  darkred: 0x8b0000ff,
	  darksalmon: 0xe9967aff,
	  darkseagreen: 0x8fbc8fff,
	  darkslateblue: 0x483d8bff,
	  darkslategray: 0x2f4f4fff,
	  darkslategrey: 0x2f4f4fff,
	  darkturquoise: 0x00ced1ff,
	  darkviolet: 0x9400d3ff,
	  deeppink: 0xff1493ff,
	  deepskyblue: 0x00bfffff,
	  dimgray: 0x696969ff,
	  dimgrey: 0x696969ff,
	  dodgerblue: 0x1e90ffff,
	  firebrick: 0xb22222ff,
	  floralwhite: 0xfffaf0ff,
	  forestgreen: 0x228b22ff,
	  fuchsia: 0xff00ffff,
	  gainsboro: 0xdcdcdcff,
	  ghostwhite: 0xf8f8ffff,
	  gold: 0xffd700ff,
	  goldenrod: 0xdaa520ff,
	  gray: 0x808080ff,
	  green: 0x008000ff,
	  greenyellow: 0xadff2fff,
	  grey: 0x808080ff,
	  honeydew: 0xf0fff0ff,
	  hotpink: 0xff69b4ff,
	  indianred: 0xcd5c5cff,
	  indigo: 0x4b0082ff,
	  ivory: 0xfffff0ff,
	  khaki: 0xf0e68cff,
	  lavender: 0xe6e6faff,
	  lavenderblush: 0xfff0f5ff,
	  lawngreen: 0x7cfc00ff,
	  lemonchiffon: 0xfffacdff,
	  lightblue: 0xadd8e6ff,
	  lightcoral: 0xf08080ff,
	  lightcyan: 0xe0ffffff,
	  lightgoldenrodyellow: 0xfafad2ff,
	  lightgray: 0xd3d3d3ff,
	  lightgreen: 0x90ee90ff,
	  lightgrey: 0xd3d3d3ff,
	  lightpink: 0xffb6c1ff,
	  lightsalmon: 0xffa07aff,
	  lightseagreen: 0x20b2aaff,
	  lightskyblue: 0x87cefaff,
	  lightslategray: 0x778899ff,
	  lightslategrey: 0x778899ff,
	  lightsteelblue: 0xb0c4deff,
	  lightyellow: 0xffffe0ff,
	  lime: 0x00ff00ff,
	  limegreen: 0x32cd32ff,
	  linen: 0xfaf0e6ff,
	  magenta: 0xff00ffff,
	  maroon: 0x800000ff,
	  mediumaquamarine: 0x66cdaaff,
	  mediumblue: 0x0000cdff,
	  mediumorchid: 0xba55d3ff,
	  mediumpurple: 0x9370dbff,
	  mediumseagreen: 0x3cb371ff,
	  mediumslateblue: 0x7b68eeff,
	  mediumspringgreen: 0x00fa9aff,
	  mediumturquoise: 0x48d1ccff,
	  mediumvioletred: 0xc71585ff,
	  midnightblue: 0x191970ff,
	  mintcream: 0xf5fffaff,
	  mistyrose: 0xffe4e1ff,
	  moccasin: 0xffe4b5ff,
	  navajowhite: 0xffdeadff,
	  navy: 0x000080ff,
	  oldlace: 0xfdf5e6ff,
	  olive: 0x808000ff,
	  olivedrab: 0x6b8e23ff,
	  orange: 0xffa500ff,
	  orangered: 0xff4500ff,
	  orchid: 0xda70d6ff,
	  palegoldenrod: 0xeee8aaff,
	  palegreen: 0x98fb98ff,
	  paleturquoise: 0xafeeeeff,
	  palevioletred: 0xdb7093ff,
	  papayawhip: 0xffefd5ff,
	  peachpuff: 0xffdab9ff,
	  peru: 0xcd853fff,
	  pink: 0xffc0cbff,
	  plum: 0xdda0ddff,
	  powderblue: 0xb0e0e6ff,
	  purple: 0x800080ff,
	  rebeccapurple: 0x663399ff,
	  red: 0xff0000ff,
	  rosybrown: 0xbc8f8fff,
	  royalblue: 0x4169e1ff,
	  saddlebrown: 0x8b4513ff,
	  salmon: 0xfa8072ff,
	  sandybrown: 0xf4a460ff,
	  seagreen: 0x2e8b57ff,
	  seashell: 0xfff5eeff,
	  sienna: 0xa0522dff,
	  silver: 0xc0c0c0ff,
	  skyblue: 0x87ceebff,
	  slateblue: 0x6a5acdff,
	  slategray: 0x708090ff,
	  slategrey: 0x708090ff,
	  snow: 0xfffafaff,
	  springgreen: 0x00ff7fff,
	  steelblue: 0x4682b4ff,
	  tan: 0xd2b48cff,
	  teal: 0x008080ff,
	  thistle: 0xd8bfd8ff,
	  tomato: 0xff6347ff,
	  turquoise: 0x40e0d0ff,
	  violet: 0xee82eeff,
	  wheat: 0xf5deb3ff,
	  white: 0xffffffff,
	  whitesmoke: 0xf5f5f5ff,
	  yellow: 0xffff00ff,
	  yellowgreen: 0x9acd32ff
	};

	// const INTEGER = '[-+]?\\d+';
	var NUMBER = '[-+]?\\d*\\.?\\d+';
	var PERCENTAGE = NUMBER + '%';

	function call() {
	  for (var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++) {
	    parts[_key] = arguments[_key];
	  }

	  return '\\(\\s*(' + parts.join(')\\s*,\\s*(') + ')\\s*\\)';
	}

	var rgb = new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER));
	var rgba = new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER));
	var hsl = new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE));
	var hsla = new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
	var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
	var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
	var hex6 = /^#([0-9a-fA-F]{6})$/;
	var hex8 = /^#([0-9a-fA-F]{8})$/;

	/*
	https://github.com/react-community/normalize-css-color

	BSD 3-Clause License

	Copyright (c) 2016, React Community
	All rights reserved.

	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:

	* Redistributions of source code must retain the above copyright notice, this
	  list of conditions and the following disclaimer.

	* Redistributions in binary form must reproduce the above copyright notice,
	  this list of conditions and the following disclaimer in the documentation
	  and/or other materials provided with the distribution.

	* Neither the name of the copyright holder nor the names of its
	  contributors may be used to endorse or promote products derived from
	  this software without specific prior written permission.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
	FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
	DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
	SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
	OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	function normalizeColor(color) {
	  var match;

	  if (typeof color === 'number') {
	    return color >>> 0 === color && color >= 0 && color <= 0xffffffff ? color : null;
	  } // Ordered based on occurrences on Facebook codebase


	  if (match = hex6.exec(color)) return parseInt(match[1] + 'ff', 16) >>> 0;
	  if (colors.hasOwnProperty(color)) return colors[color];

	  if (match = rgb.exec(color)) {
	    return (parse255(match[1]) << 24 | // r
	    parse255(match[2]) << 16 | // g
	    parse255(match[3]) << 8 | // b
	    0x000000ff) >>> // a
	    0;
	  }

	  if (match = rgba.exec(color)) {
	    return (parse255(match[1]) << 24 | // r
	    parse255(match[2]) << 16 | // g
	    parse255(match[3]) << 8 | // b
	    parse1(match[4])) >>> // a
	    0;
	  }

	  if (match = hex3.exec(color)) {
	    return parseInt(match[1] + match[1] + // r
	    match[2] + match[2] + // g
	    match[3] + match[3] + // b
	    'ff', // a
	    16) >>> 0;
	  } // https://drafts.csswg.org/css-color-4/#hex-notation


	  if (match = hex8.exec(color)) return parseInt(match[1], 16) >>> 0;

	  if (match = hex4.exec(color)) {
	    return parseInt(match[1] + match[1] + // r
	    match[2] + match[2] + // g
	    match[3] + match[3] + // b
	    match[4] + match[4], // a
	    16) >>> 0;
	  }

	  if (match = hsl.exec(color)) {
	    return (hslToRgb(parse360(match[1]), // h
	    parsePercentage(match[2]), // s
	    parsePercentage(match[3]) // l
	    ) | 0x000000ff) >>> // a
	    0;
	  }

	  if (match = hsla.exec(color)) {
	    return (hslToRgb(parse360(match[1]), // h
	    parsePercentage(match[2]), // s
	    parsePercentage(match[3]) // l
	    ) | parse1(match[4])) >>> // a
	    0;
	  }

	  return null;
	}

	function hue2rgb(p, q, t) {
	  if (t < 0) t += 1;
	  if (t > 1) t -= 1;
	  if (t < 1 / 6) return p + (q - p) * 6 * t;
	  if (t < 1 / 2) return q;
	  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
	  return p;
	}

	function hslToRgb(h, s, l) {
	  var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	  var p = 2 * l - q;
	  var r = hue2rgb(p, q, h + 1 / 3);
	  var g = hue2rgb(p, q, h);
	  var b = hue2rgb(p, q, h - 1 / 3);
	  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
	}

	function parse255(str) {
	  var int = parseInt(str, 10);
	  if (int < 0) return 0;
	  if (int > 255) return 255;
	  return int;
	}

	function parse360(str) {
	  var int = parseFloat(str);
	  return (int % 360 + 360) % 360 / 360;
	}

	function parse1(str) {
	  var num = parseFloat(str);
	  if (num < 0) return 0;
	  if (num > 1) return 255;
	  return Math.round(num * 255);
	}

	function parsePercentage(str) {
	  // parseFloat conveniently ignores the final %
	  var int = parseFloat(str);
	  if (int < 0) return 0;
	  if (int > 100) return 1;
	  return int / 100;
	}

	function colorToRgba(input) {
	  var int32Color = normalizeColor(input);
	  if (int32Color === null) return input;
	  int32Color = int32Color || 0;
	  var r = (int32Color & 0xff000000) >>> 24;
	  var g = (int32Color & 0x00ff0000) >>> 16;
	  var b = (int32Color & 0x0000ff00) >>> 8;
	  var a = (int32Color & 0x000000ff) / 255;
	  return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
	} // Problem: https://github.com/animatedjs/animated/pull/102
	// Solution: https://stackoverflow.com/questions/638565/parsing-scientific-notation-sensibly/658662


	var stringShapeRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g; // Covers rgb, rgba, hsl, hsla
	// Taken from https://gist.github.com/olmokramer/82ccce673f86db7cda5e

	var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi; // Covers color names (transparent, blue, etc.)

	var colorNamesRegex = new RegExp("(" + Object.keys(colors).join('|') + ")", 'g');
	/**
	 * Supports string shapes by extracting numbers so new values can be computed,
	 * and recombines those values into new strings of the same shape.  Supports
	 * things like:
	 *
	 *   rgba(123, 42, 99, 0.36)           // colors
	 *   -45deg                            // values with units
	 *   0 2px 2px 0px rgba(0, 0, 0, 0.12) // box shadows
	 */

	var createStringInterpolator = function createStringInterpolator(config) {
	  // Replace colors with rgba
	  var outputRange = config.output.map(function (rangeValue) {
	    return rangeValue.replace(colorRegex, colorToRgba);
	  }).map(function (rangeValue) {
	    return rangeValue.replace(colorNamesRegex, colorToRgba);
	  });
	  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
	    return [];
	  });
	  outputRange.forEach(function (value) {
	    value.match(stringShapeRegex).forEach(function (number, i) {
	      return outputRanges[i].push(+number);
	    });
	  });
	  var interpolations = outputRange[0].match(stringShapeRegex).map(function (_value, i) {
	    return createInterpolator(_extends$1({}, config, {
	      output: outputRanges[i]
	    }));
	  });
	  return function (input) {
	    var i = 0;
	    return outputRange[0] // 'rgba(0, 100, 200, 0)'
	    // ->
	    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'
	    .replace(stringShapeRegex, function () {
	      return interpolations[i++](input);
	    }) // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to
	    // round the opacity (4th column).
	    .replace(/rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi, function (_, p1, p2, p3, p4) {
	      return "rgba(" + Math.round(p1) + ", " + Math.round(p2) + ", " + Math.round(p3) + ", " + p4 + ")";
	    });
	  };
	};

	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	var prefixKey = function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	};

	var prefixes = ['Webkit', 'Ms', 'Moz', 'O'];
	isUnitlessNumber = Object.keys(isUnitlessNumber).reduce(function (acc, prop) {
	  prefixes.forEach(function (prefix) {
	    return acc[prefixKey(prefix, prop)] = acc[prop];
	  });
	  return acc;
	}, isUnitlessNumber);

	function dangerousStyleValue(name, value, isCustomProperty) {
	  if (value == null || typeof value === 'boolean' || value === '') return '';
	  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers

	  return ('' + value).trim();
	}

	var attributeCache = {};
	injectCreateAnimatedStyle(function (style) {
	  return new AnimatedStyle(style);
	});
	injectDefaultElement('div');
	injectStringInterpolator(createStringInterpolator);
	injectColorNames(colors);
	injectApplyAnimatedValues(function (instance, props) {
	  if (instance.nodeType && instance.setAttribute !== undefined) {
	    var style = props.style,
	        children = props.children,
	        scrollTop = props.scrollTop,
	        scrollLeft = props.scrollLeft,
	        attributes = _objectWithoutPropertiesLoose$1(props, ["style", "children", "scrollTop", "scrollLeft"]);

	    var filter = instance.nodeName === 'filter' || instance.parentNode && instance.parentNode.nodeName === 'filter';
	    if (scrollTop !== void 0) instance.scrollTop = scrollTop;
	    if (scrollLeft !== void 0) instance.scrollLeft = scrollLeft; // Set textContent, if children is an animatable value

	    if (children !== void 0) instance.textContent = children; // Set styles ...

	    for (var styleName in style) {
	      if (!style.hasOwnProperty(styleName)) continue;
	      var isCustomProperty = styleName.indexOf('--') === 0;
	      var styleValue = dangerousStyleValue(styleName, style[styleName], isCustomProperty);
	      if (styleName === 'float') styleName = 'cssFloat';
	      if (isCustomProperty) instance.style.setProperty(styleName, styleValue);else instance.style[styleName] = styleValue;
	    } // Set attributes ...


	    for (var name in attributes) {
	      // Attributes are written in dash case
	      var dashCase = filter ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, function (n) {
	        return '-' + n.toLowerCase();
	      }));
	      if (typeof instance.getAttribute(dashCase) !== 'undefined') instance.setAttribute(dashCase, attributes[name]);
	    }

	    return;
	  } else return false;
	}, function (style) {
	  return style;
	});

	var domElements = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
	'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];
	// Extend animated with all the available THREE elements
	var apply = merge(createAnimatedComponent, false);
	var extendedAnimated = apply(domElements);

	web_cjs.apply = apply;
	var config_1 = web_cjs.config = config;
	web_cjs.update = update;
	var animated = web_cjs.animated = extendedAnimated;
	web_cjs.a = extendedAnimated;
	web_cjs.interpolate = interpolate$1;
	web_cjs.Globals = Globals;
	web_cjs.useSpring = useSpring;
	web_cjs.useTrail = useTrail;
	var useTransition_1 = web_cjs.useTransition = useTransition;
	web_cjs.useChain = useChain;
	web_cjs.useSprings = useSprings;

	/* eslint-disable no-restricted-globals, eqeqeq  */

	/**
	 * React currently throws a warning when using useLayoutEffect on the server.
	 * To get around it, we can conditionally useEffect on the server (no-op) and
	 * useLayoutEffect in the browser. We occasionally need useLayoutEffect to
	 * ensure we don't get a render flash for certain operations, but we may also
	 * need affected components to render on the server. One example is when setting
	 * a component's descendants to retrieve their index values.
	 *
	 * Important to note that using this hook as an escape hatch will break the
	 * eslint dependency warnings unless you rename the import to `useLayoutEffect`.
	 * Use sparingly only when the effect won't effect the rendered HTML to avoid
	 * any server/client mismatch.
	 *
	 * If a useLayoutEffect is needed and the result would create a mismatch, it's
	 * likely that the component in question shouldn't be rendered on the server at
	 * all, so a better approach would be to lazily render those in a parent
	 * component after client-side hydration.
	 *
	 * TODO: We are calling useLayoutEffect in a couple of places that will likely
	 * cause some issues for SSR users, whether the warning shows or not. Audit and
	 * fix these.
	 *
	 * https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85
	 * https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.js
	 *
	 * @param effect
	 * @param deps
	 */
	var useIsomorphicLayoutEffect = /*#__PURE__*/canUseDOM() ? react.exports.useLayoutEffect : react.exports.useEffect;
	/**
	 * Passes or assigns an arbitrary value to a ref function or object.
	 *
	 * @param ref
	 * @param value
	 */

	function assignRef$1(ref, value) {
	  if (ref == null) return;

	  if (isFunction(ref)) {
	    ref(value);
	  } else {
	    try {
	      ref.current = value;
	    } catch (error) {
	      throw new Error("Cannot assign value \"" + value + "\" to ref \"" + ref + "\"");
	    }
	  }
	}
	function canUseDOM() {
	  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
	}
	/**
	 * This is a hack for sure. The thing is, getting a component to intelligently
	 * infer props based on a component or JSX string passed into an `as` prop is
	 * kind of a huge pain. Getting it to work and satisfy the constraints of
	 * `forwardRef` seems dang near impossible. To avoid needing to do this awkward
	 * type song-and-dance every time we want to forward a ref into a component
	 * that accepts an `as` prop, we abstract all of that mess to this function for
	 * the time time being.
	 */

	function forwardRefWithAs(render) {
	  return /*#__PURE__*/react.exports.forwardRef(render);
	}
	/**
	 * Get an element's owner document. Useful when components are used in iframes
	 * or other environments like dev tools.
	 *
	 * @param element
	 */

	function getOwnerDocument(element) {
	  return canUseDOM() ? element ? element.ownerDocument : document : null;
	}
	/**
	 * Checks whether or not a value is a function.
	 *
	 * @param value
	 */

	function isFunction(value) {
	  return !!(value && {}.toString.call(value) == "[object Function]");
	}
	/**
	 * No-op function.
	 */

	function noop() {}
	/**
	 * Forces a re-render, similar to `forceUpdate` in class components.
	 */

	function useForceUpdate() {
	  var _React$useState2 = react.exports.useState(Object.create(null)),
	      dispatch = _React$useState2[1];

	  return react.exports.useCallback(function () {
	    dispatch(Object.create(null));
	  }, []);
	}
	/**
	 * Passes or assigns a value to multiple refs (typically a DOM node). Useful for
	 * dealing with components that need an explicit ref for DOM calculations but
	 * also forwards refs assigned by an app.
	 *
	 * @param refs Refs to fork
	 */

	function useForkedRef() {
	  for (var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	    refs[_key4] = arguments[_key4];
	  }

	  return react.exports.useMemo(function () {
	    if (refs.every(function (ref) {
	      return ref == null;
	    })) {
	      return null;
	    }

	    return function (node) {
	      refs.forEach(function (ref) {
	        assignRef$1(ref, node);
	      });
	    }; // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [].concat(refs));
	}
	/**
	 * Wraps a lib-defined event handler and a user-defined event handler, returning
	 * a single handler that allows a user to prevent lib-defined handlers from
	 * firing.
	 *
	 * @param theirHandler User-supplied event handler
	 * @param ourHandler Library-supplied event handler
	 */

	function wrapEvent(theirHandler, ourHandler) {
	  return function (event) {
	    theirHandler && theirHandler(event);

	    if (!event.defaultPrevented) {
	      return ourHandler(event);
	    }
	  };
	} // Export types

	/**
	 * Welcome to @reach/portal!
	 *
	 * Creates and appends a DOM node to the end of `document.body` and renders a
	 * React tree into it. Useful for rendering a natural React element hierarchy
	 * with a different DOM hierarchy to prevent parent styles from clipping or
	 * hiding content (for popovers, dropdowns, and modals).
	 *
	 * @see Docs   https://reach.tech/portal
	 * @see Source https://github.com/reach/reach-ui/tree/main/packages/portal
	 * @see React  https://reactjs.org/docs/portals.html
	 */
	/**
	 * Portal
	 *
	 * @see Docs https://reach.tech/portal#portal
	 */

	var Portal = function Portal(_ref) {
	  var children = _ref.children,
	      _ref$type = _ref.type,
	      type = _ref$type === void 0 ? "reach-portal" : _ref$type;
	  var mountNode = react.exports.useRef(null);
	  var portalNode = react.exports.useRef(null);
	  var forceUpdate = useForceUpdate();
	  useIsomorphicLayoutEffect(function () {
	    // This ref may be null when a hot-loader replaces components on the page
	    if (!mountNode.current) return; // It's possible that the content of the portal has, itself, been portaled.
	    // In that case, it's important to append to the correct document element.

	    var ownerDocument = mountNode.current.ownerDocument;
	    portalNode.current = ownerDocument == null ? void 0 : ownerDocument.createElement(type);
	    ownerDocument.body.appendChild(portalNode.current);
	    forceUpdate();
	    return function () {
	      if (portalNode.current && portalNode.current.ownerDocument) {
	        portalNode.current.ownerDocument.body.removeChild(portalNode.current);
	      }
	    };
	  }, [type, forceUpdate]);
	  return portalNode.current ? /*#__PURE__*/reactDom.exports.createPortal(children, portalNode.current) : /*#__PURE__*/react.exports.createElement("span", {
	    ref: mountNode
	  });
	};

	var FOCUS_GROUP = 'data-focus-lock';
	var FOCUS_DISABLED = 'data-focus-lock-disabled';
	var FOCUS_ALLOW = 'data-no-focus-lock';
	var FOCUS_AUTO = 'data-autofocus-inside';

	/**
	 * Assigns a value for a given ref, no matter of the ref format
	 * @param {RefObject} ref - a callback function or ref object
	 * @param value - a new value
	 *
	 * @see https://github.com/theKashey/use-callback-ref#assignref
	 * @example
	 * const refObject = useRef();
	 * const refFn = (ref) => {....}
	 *
	 * assignRef(refObject, "refValue");
	 * assignRef(refFn, "refValue");
	 */
	function assignRef(ref, value) {
	    if (typeof ref === 'function') {
	        ref(value);
	    }
	    else if (ref) {
	        ref.current = value;
	    }
	    return ref;
	}

	/**
	 * creates a MutableRef with ref change callback
	 * @param initialValue - initial ref value
	 * @param {Function} callback - a callback to run when value changes
	 *
	 * @example
	 * const ref = useCallbackRef(0, (newValue, oldValue) => console.log(oldValue, '->', newValue);
	 * ref.current = 1;
	 * // prints 0 -> 1
	 *
	 * @see https://reactjs.org/docs/hooks-reference.html#useref
	 * @see https://github.com/theKashey/use-callback-ref#usecallbackref---to-replace-reactuseref
	 * @returns {MutableRefObject}
	 */
	function useCallbackRef(initialValue, callback) {
	    var ref = react.exports.useState(function () { return ({
	        // value
	        value: initialValue,
	        // last callback
	        callback: callback,
	        // "memoized" public interface
	        facade: {
	            get current() {
	                return ref.value;
	            },
	            set current(value) {
	                var last = ref.value;
	                if (last !== value) {
	                    ref.value = value;
	                    ref.callback(value, last);
	                }
	            }
	        }
	    }); })[0];
	    // update callback
	    ref.callback = callback;
	    return ref.facade;
	}

	/**
	 * Merges two or more refs together providing a single interface to set their value
	 * @param {RefObject|Ref} refs
	 * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}
	 *
	 * @see {@link mergeRefs} a version without buit-in memoization
	 * @see https://github.com/theKashey/use-callback-ref#usemergerefs
	 * @example
	 * const Component = React.forwardRef((props, ref) => {
	 *   const ownRef = useRef();
	 *   const domRef = useMergeRefs([ref, ownRef]); // 👈 merge together
	 *   return <div ref={domRef}>...</div>
	 * }
	 */
	function useMergeRefs(refs, defaultValue) {
	    return useCallbackRef(defaultValue, function (newValue) {
	        return refs.forEach(function (ref) { return assignRef(ref, newValue); });
	    });
	}

	var hiddenGuard = {
	  width: '1px',
	  height: '0px',
	  padding: 0,
	  overflow: 'hidden',
	  position: 'fixed',
	  top: '1px',
	  left: '1px'
	};

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */

	var __assign$1 = function() {
	    __assign$1 = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1.apply(this, arguments);
	};

	function __rest$1(s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	}

	function ItoI(a) {
	    return a;
	}
	function innerCreateMedium(defaults, middleware) {
	    if (middleware === void 0) { middleware = ItoI; }
	    var buffer = [];
	    var assigned = false;
	    var medium = {
	        read: function () {
	            if (assigned) {
	                throw new Error('Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.');
	            }
	            if (buffer.length) {
	                return buffer[buffer.length - 1];
	            }
	            return defaults;
	        },
	        useMedium: function (data) {
	            var item = middleware(data, assigned);
	            buffer.push(item);
	            return function () {
	                buffer = buffer.filter(function (x) { return x !== item; });
	            };
	        },
	        assignSyncMedium: function (cb) {
	            assigned = true;
	            while (buffer.length) {
	                var cbs = buffer;
	                buffer = [];
	                cbs.forEach(cb);
	            }
	            buffer = {
	                push: function (x) { return cb(x); },
	                filter: function () { return buffer; },
	            };
	        },
	        assignMedium: function (cb) {
	            assigned = true;
	            var pendingQueue = [];
	            if (buffer.length) {
	                var cbs = buffer;
	                buffer = [];
	                cbs.forEach(cb);
	                pendingQueue = buffer;
	            }
	            var executeQueue = function () {
	                var cbs = pendingQueue;
	                pendingQueue = [];
	                cbs.forEach(cb);
	            };
	            var cycle = function () { return Promise.resolve().then(executeQueue); };
	            cycle();
	            buffer = {
	                push: function (x) {
	                    pendingQueue.push(x);
	                    cycle();
	                },
	                filter: function (filter) {
	                    pendingQueue = pendingQueue.filter(filter);
	                    return buffer;
	                },
	            };
	        },
	    };
	    return medium;
	}
	function createMedium(defaults, middleware) {
	    if (middleware === void 0) { middleware = ItoI; }
	    return innerCreateMedium(defaults, middleware);
	}
	function createSidecarMedium(options) {
	    if (options === void 0) { options = {}; }
	    var medium = innerCreateMedium(null);
	    medium.options = __assign$1({ async: true, ssr: false }, options);
	    return medium;
	}

	var SideCar$1 = function (_a) {
	    var sideCar = _a.sideCar, rest = __rest$1(_a, ["sideCar"]);
	    if (!sideCar) {
	        throw new Error('Sidecar: please provide `sideCar` property to import the right car');
	    }
	    var Target = sideCar.read();
	    if (!Target) {
	        throw new Error('Sidecar medium not found');
	    }
	    return react.exports.createElement(Target, __assign$1({}, rest));
	};
	SideCar$1.isSideCarExport = true;
	function exportSidecar(medium, exported) {
	    medium.useMedium(exported);
	    return SideCar$1;
	}

	var mediumFocus = createMedium({}, function (_ref) {
	  var target = _ref.target,
	      currentTarget = _ref.currentTarget;
	  return {
	    target: target,
	    currentTarget: currentTarget
	  };
	});
	var mediumBlur = createMedium();
	var mediumEffect = createMedium();
	var mediumSidecar = createSidecarMedium({
	  async: true
	});

	var emptyArray = [];
	var FocusLock$1 = /*#__PURE__*/react.exports.forwardRef(function FocusLockUI(props, parentRef) {
	  var _extends2;

	  var _React$useState = react.exports.useState(),
	      realObserved = _React$useState[0],
	      setObserved = _React$useState[1];

	  var observed = react.exports.useRef();
	  var isActive = react.exports.useRef(false);
	  var originalFocusedElement = react.exports.useRef(null);
	  var children = props.children,
	      disabled = props.disabled,
	      noFocusGuards = props.noFocusGuards,
	      persistentFocus = props.persistentFocus,
	      crossFrame = props.crossFrame,
	      autoFocus = props.autoFocus;
	      props.allowTextSelection;
	      var group = props.group,
	      className = props.className,
	      whiteList = props.whiteList,
	      _props$shards = props.shards,
	      shards = _props$shards === void 0 ? emptyArray : _props$shards,
	      _props$as = props.as,
	      Container = _props$as === void 0 ? 'div' : _props$as,
	      _props$lockProps = props.lockProps,
	      containerProps = _props$lockProps === void 0 ? {} : _props$lockProps,
	      SideCar = props.sideCar,
	      shouldReturnFocus = props.returnFocus,
	      onActivationCallback = props.onActivation,
	      onDeactivationCallback = props.onDeactivation;

	  var _React$useState2 = react.exports.useState({}),
	      id = _React$useState2[0]; // SIDE EFFECT CALLBACKS


	  var onActivation = react.exports.useCallback(function () {
	    originalFocusedElement.current = originalFocusedElement.current || document && document.activeElement;

	    if (observed.current && onActivationCallback) {
	      onActivationCallback(observed.current);
	    }

	    isActive.current = true;
	  }, [onActivationCallback]);
	  var onDeactivation = react.exports.useCallback(function () {
	    isActive.current = false;

	    if (onDeactivationCallback) {
	      onDeactivationCallback(observed.current);
	    }
	  }, [onDeactivationCallback]);
	  var returnFocus = react.exports.useCallback(function (allowDefer) {
	    var current = originalFocusedElement.current;

	    if (Boolean(shouldReturnFocus) && current && current.focus) {
	      var focusOptions = typeof shouldReturnFocus === 'object' ? shouldReturnFocus : undefined;
	      originalFocusedElement.current = null;

	      if (allowDefer) {
	        // React might return focus after update
	        // it's safer to defer the action
	        Promise.resolve().then(function () {
	          return current.focus(focusOptions);
	        });
	      } else {
	        current.focus(focusOptions);
	      }
	    }
	  }, [shouldReturnFocus]); // MEDIUM CALLBACKS

	  var onFocus = react.exports.useCallback(function (event) {
	    if (isActive.current) {
	      mediumFocus.useMedium(event);
	    }
	  }, []);
	  var onBlur = mediumBlur.useMedium; // REF PROPAGATION
	  // not using real refs due to race conditions

	  var setObserveNode = react.exports.useCallback(function (newObserved) {
	    if (observed.current !== newObserved) {
	      observed.current = newObserved;
	      setObserved(newObserved);
	    }
	  }, []);

	  var lockProps = _extends$3((_extends2 = {}, _extends2[FOCUS_DISABLED] = disabled && 'disabled', _extends2[FOCUS_GROUP] = group, _extends2), containerProps);

	  var hasLeadingGuards = noFocusGuards !== true;
	  var hasTailingGuards = hasLeadingGuards && noFocusGuards !== 'tail';
	  var mergedRef = useMergeRefs([parentRef, setObserveNode]);
	  return /*#__PURE__*/react.exports.createElement(react.exports.Fragment, null, hasLeadingGuards && [/*#__PURE__*/react.exports.createElement("div", {
	    key: "guard-first",
	    "data-focus-guard": true,
	    tabIndex: disabled ? -1 : 0,
	    style: hiddenGuard
	  }),
	  /*#__PURE__*/
	  // nearest focus guard
	  react.exports.createElement("div", {
	    key: "guard-nearest",
	    "data-focus-guard": true,
	    tabIndex: disabled ? -1 : 1,
	    style: hiddenGuard
	  }) // first tabbed element guard
	  ], !disabled && /*#__PURE__*/react.exports.createElement(SideCar, {
	    id: id,
	    sideCar: mediumSidecar,
	    observed: realObserved,
	    disabled: disabled,
	    persistentFocus: persistentFocus,
	    crossFrame: crossFrame,
	    autoFocus: autoFocus,
	    whiteList: whiteList,
	    shards: shards,
	    onActivation: onActivation,
	    onDeactivation: onDeactivation,
	    returnFocus: returnFocus
	  }), /*#__PURE__*/react.exports.createElement(Container, _extends$3({
	    ref: mergedRef
	  }, lockProps, {
	    className: className,
	    onBlur: onBlur,
	    onFocus: onFocus
	  }), children), hasTailingGuards && /*#__PURE__*/react.exports.createElement("div", {
	    "data-focus-guard": true,
	    tabIndex: disabled ? -1 : 0,
	    style: hiddenGuard
	  }));
	});
	FocusLock$1.propTypes = {};
	FocusLock$1.defaultProps = {
	  children: undefined,
	  disabled: false,
	  returnFocus: false,
	  noFocusGuards: false,
	  autoFocus: true,
	  persistentFocus: false,
	  crossFrame: true,
	  allowTextSelection: undefined,
	  group: undefined,
	  className: undefined,
	  whiteList: undefined,
	  shards: undefined,
	  as: 'div',
	  lockProps: {},
	  onActivation: undefined,
	  onDeactivation: undefined
	};
	var FocusLockUI = FocusLock$1;

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function withSideEffect(reducePropsToState, handleStateChangeOnClient) {

	  function getDisplayName(WrappedComponent) {
	    return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	  }

	  return function wrap(WrappedComponent) {

	    var mountedInstances = [];
	    var state;

	    function emitChange() {
	      state = reducePropsToState(mountedInstances.map(function (instance) {
	        return instance.props;
	      }));
	      handleStateChangeOnClient(state);
	    }

	    var SideEffect = /*#__PURE__*/function (_PureComponent) {
	      _inheritsLoose$1(SideEffect, _PureComponent);

	      function SideEffect() {
	        return _PureComponent.apply(this, arguments) || this;
	      }

	      // Try to use displayName of wrapped component
	      SideEffect.peek = function peek() {
	        return state;
	      };

	      var _proto = SideEffect.prototype;

	      _proto.componentDidMount = function componentDidMount() {
	        mountedInstances.push(this);
	        emitChange();
	      };

	      _proto.componentDidUpdate = function componentDidUpdate() {
	        emitChange();
	      };

	      _proto.componentWillUnmount = function componentWillUnmount() {
	        var index = mountedInstances.indexOf(this);
	        mountedInstances.splice(index, 1);
	        emitChange();
	      };

	      _proto.render = function render() {
	        return /*#__PURE__*/React$1.createElement(WrappedComponent, this.props);
	      };

	      return SideEffect;
	    }(react.exports.PureComponent);

	    _defineProperty(SideEffect, "displayName", "SideEffect(" + getDisplayName(WrappedComponent) + ")");

	    return SideEffect;
	  };
	}

	var toArray = function (a) {
	    var ret = Array(a.length);
	    for (var i = 0; i < a.length; ++i) {
	        ret[i] = a[i];
	    }
	    return ret;
	};
	var asArray = function (a) { return (Array.isArray(a) ? a : [a]); };

	var filterNested = function (nodes) {
	    var contained = new Set();
	    var l = nodes.length;
	    for (var i = 0; i < l; i += 1) {
	        for (var j = i + 1; j < l; j += 1) {
	            var position = nodes[i].compareDocumentPosition(nodes[j]);
	            if ((position & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) {
	                contained.add(j);
	            }
	            if ((position & Node.DOCUMENT_POSITION_CONTAINS) > 0) {
	                contained.add(i);
	            }
	        }
	    }
	    return nodes.filter(function (_, index) { return !contained.has(index); });
	};
	var getTopParent = function (node) {
	    return node.parentNode ? getTopParent(node.parentNode) : node;
	};
	var getAllAffectedNodes = function (node) {
	    var nodes = asArray(node);
	    return nodes.filter(Boolean).reduce(function (acc, currentNode) {
	        var group = currentNode.getAttribute(FOCUS_GROUP);
	        acc.push.apply(acc, (group
	            ? filterNested(toArray(getTopParent(currentNode).querySelectorAll("[" + FOCUS_GROUP + "=\"" + group + "\"]:not([" + FOCUS_DISABLED + "=\"disabled\"])")))
	            : [currentNode]));
	        return acc;
	    }, []);
	};

	var isElementHidden = function (node) {
	    if (node.nodeType !== Node.ELEMENT_NODE) {
	        return false;
	    }
	    var computedStyle = window.getComputedStyle(node, null);
	    if (!computedStyle || !computedStyle.getPropertyValue) {
	        return false;
	    }
	    return (computedStyle.getPropertyValue('display') === 'none' || computedStyle.getPropertyValue('visibility') === 'hidden');
	};
	var isVisibleUncached = function (node, checkParent) {
	    return !node ||
	        node === document ||
	        (node && node.nodeType === Node.DOCUMENT_NODE) ||
	        (!isElementHidden(node) &&
	            checkParent(node.parentNode && node.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE
	                ? node.parentNode.host
	                : node.parentNode));
	};
	var isVisibleCached = function (visibilityCache, node) {
	    var cached = visibilityCache.get(node);
	    if (cached !== undefined) {
	        return cached;
	    }
	    var result = isVisibleUncached(node, isVisibleCached.bind(undefined, visibilityCache));
	    visibilityCache.set(node, result);
	    return result;
	};
	var notHiddenInput = function (node) {
	    return !((node.tagName === 'INPUT' || node.tagName === 'BUTTON') && (node.type === 'hidden' || node.disabled));
	};
	var isGuard = function (node) { return Boolean(node && node.dataset && node.dataset.focusGuard); };
	var isNotAGuard = function (node) { return !isGuard(node); };
	var isDefined = function (x) { return Boolean(x); };

	var tabSort = function (a, b) {
	    var tabDiff = a.tabIndex - b.tabIndex;
	    var indexDiff = a.index - b.index;
	    if (tabDiff) {
	        if (!a.tabIndex) {
	            return 1;
	        }
	        if (!b.tabIndex) {
	            return -1;
	        }
	    }
	    return tabDiff || indexDiff;
	};
	var orderByTabIndex = function (nodes, filterNegative, keepGuards) {
	    return toArray(nodes)
	        .map(function (node, index) { return ({
	        node: node,
	        index: index,
	        tabIndex: keepGuards && node.tabIndex === -1 ? ((node.dataset || {}).focusGuard ? 0 : -1) : node.tabIndex,
	    }); })
	        .filter(function (data) { return !filterNegative || data.tabIndex >= 0; })
	        .sort(tabSort);
	};

	var tabbables = [
	    'button:enabled',
	    'select:enabled',
	    'textarea:enabled',
	    'input:enabled',
	    'a[href]',
	    'area[href]',
	    'summary',
	    'iframe',
	    'object',
	    'embed',
	    'audio[controls]',
	    'video[controls]',
	    '[tabindex]',
	    '[contenteditable]',
	    '[autofocus]',
	];

	var queryTabbables = tabbables.join(',');
	var queryGuardTabbables = queryTabbables + ", [data-focus-guard]";
	var getFocusables = function (parents, withGuards) {
	    return parents.reduce(function (acc, parent) {
	        return acc.concat(toArray(parent.querySelectorAll(withGuards ? queryGuardTabbables : queryTabbables)), parent.parentNode
	            ? toArray(parent.parentNode.querySelectorAll(queryTabbables)).filter(function (node) { return node === parent; })
	            : []);
	    }, []);
	};
	var getParentAutofocusables = function (parent) {
	    var parentFocus = parent.querySelectorAll("[" + FOCUS_AUTO + "]");
	    return toArray(parentFocus)
	        .map(function (node) { return getFocusables([node]); })
	        .reduce(function (acc, nodes) { return acc.concat(nodes); }, []);
	};

	var filterFocusable = function (nodes, visibilityCache) {
	    return toArray(nodes)
	        .filter(function (node) { return isVisibleCached(visibilityCache, node); })
	        .filter(function (node) { return notHiddenInput(node); });
	};
	var getTabbableNodes = function (topNodes, visibilityCache, withGuards) {
	    return orderByTabIndex(filterFocusable(getFocusables(topNodes, withGuards), visibilityCache), true, withGuards);
	};
	var getAllTabbableNodes = function (topNodes, visibilityCache) {
	    return orderByTabIndex(filterFocusable(getFocusables(topNodes), visibilityCache), false);
	};
	var parentAutofocusables = function (topNode, visibilityCache) {
	    return filterFocusable(getParentAutofocusables(topNode), visibilityCache);
	};

	var getParents = function (node, parents) {
	    if (parents === void 0) { parents = []; }
	    parents.push(node);
	    if (node.parentNode) {
	        getParents(node.parentNode, parents);
	    }
	    return parents;
	};
	var getCommonParent = function (nodeA, nodeB) {
	    var parentsA = getParents(nodeA);
	    var parentsB = getParents(nodeB);
	    for (var i = 0; i < parentsA.length; i += 1) {
	        var currentParent = parentsA[i];
	        if (parentsB.indexOf(currentParent) >= 0) {
	            return currentParent;
	        }
	    }
	    return false;
	};
	var getTopCommonParent = function (baseActiveElement, leftEntry, rightEntries) {
	    var activeElements = asArray(baseActiveElement);
	    var leftEntries = asArray(leftEntry);
	    var activeElement = activeElements[0];
	    var topCommon = false;
	    leftEntries.filter(Boolean).forEach(function (entry) {
	        topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
	        rightEntries.filter(Boolean).forEach(function (subEntry) {
	            var common = getCommonParent(activeElement, subEntry);
	            if (common) {
	                if (!topCommon || common.contains(topCommon)) {
	                    topCommon = common;
	                }
	                else {
	                    topCommon = getCommonParent(common, topCommon);
	                }
	            }
	        });
	    });
	    return topCommon;
	};
	var allParentAutofocusables = function (entries, visibilityCache) {
	    return entries.reduce(function (acc, node) { return acc.concat(parentAutofocusables(node, visibilityCache)); }, []);
	};

	var getFocusabledIn = function (topNode) {
	    var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
	    var commonParent = getTopCommonParent(topNode, topNode, entries);
	    var visibilityCache = new Map();
	    var outerNodes = getTabbableNodes([commonParent], visibilityCache, true);
	    var innerElements = getTabbableNodes(entries, visibilityCache)
	        .filter(function (_a) {
	        var node = _a.node;
	        return isNotAGuard(node);
	    })
	        .map(function (_a) {
	        var node = _a.node;
	        return node;
	    });
	    return outerNodes.map(function (_a) {
	        var node = _a.node, index = _a.index;
	        return ({
	            node: node,
	            index: index,
	            lockItem: innerElements.indexOf(node) >= 0,
	            guard: isGuard(node),
	        });
	    });
	};

	var focusInFrame = function (frame) { return frame === document.activeElement; };
	var focusInsideIframe = function (topNode) {
	    return Boolean(toArray(topNode.querySelectorAll('iframe')).some(function (node) { return focusInFrame(node); }));
	};
	var focusInside = function (topNode) {
	    var activeElement = document && document.activeElement;
	    if (!activeElement || (activeElement.dataset && activeElement.dataset.focusGuard)) {
	        return false;
	    }
	    return getAllAffectedNodes(topNode).reduce(function (result, node) { return result || node.contains(activeElement) || focusInsideIframe(node); }, false);
	};

	var focusIsHidden = function () {
	    return document &&
	        toArray(document.querySelectorAll("[" + FOCUS_ALLOW + "]")).some(function (node) { return node.contains(document.activeElement); });
	};

	var isRadio = function (node) { return node.tagName === 'INPUT' && node.type === 'radio'; };
	var findSelectedRadio = function (node, nodes) {
	    return nodes
	        .filter(isRadio)
	        .filter(function (el) { return el.name === node.name; })
	        .filter(function (el) { return el.checked; })[0] || node;
	};
	var correctNode = function (node, nodes) {
	    if (isRadio(node) && node.name) {
	        return findSelectedRadio(node, nodes);
	    }
	    return node;
	};
	var correctNodes = function (nodes) {
	    var resultSet = new Set();
	    nodes.forEach(function (node) { return resultSet.add(correctNode(node, nodes)); });
	    return nodes.filter(function (node) { return resultSet.has(node); });
	};

	var pickFirstFocus = function (nodes) {
	    if (nodes[0] && nodes.length > 1) {
	        return correctNode(nodes[0], nodes);
	    }
	    return nodes[0];
	};
	var pickFocusable = function (nodes, index) {
	    if (nodes.length > 1) {
	        return nodes.indexOf(correctNode(nodes[index], nodes));
	    }
	    return index;
	};

	var NEW_FOCUS = 'NEW_FOCUS';
	var newFocus = function (innerNodes, outerNodes, activeElement, lastNode) {
	    var cnt = innerNodes.length;
	    var firstFocus = innerNodes[0];
	    var lastFocus = innerNodes[cnt - 1];
	    var isOnGuard = isGuard(activeElement);
	    if (innerNodes.indexOf(activeElement) >= 0) {
	        return undefined;
	    }
	    var activeIndex = outerNodes.indexOf(activeElement);
	    var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
	    var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
	    var indexDiff = activeIndex - lastIndex;
	    var firstNodeIndex = outerNodes.indexOf(firstFocus);
	    var lastNodeIndex = outerNodes.indexOf(lastFocus);
	    var correctedNodes = correctNodes(outerNodes);
	    var correctedIndexDiff = correctedNodes.indexOf(activeElement) - (lastNode ? correctedNodes.indexOf(lastNode) : activeIndex);
	    var returnFirstNode = pickFocusable(innerNodes, 0);
	    var returnLastNode = pickFocusable(innerNodes, cnt - 1);
	    if (activeIndex === -1 || lastNodeInside === -1) {
	        return NEW_FOCUS;
	    }
	    if (!indexDiff && lastNodeInside >= 0) {
	        return lastNodeInside;
	    }
	    if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
	        return returnLastNode;
	    }
	    if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
	        return returnFirstNode;
	    }
	    if (indexDiff && Math.abs(correctedIndexDiff) > 1) {
	        return lastNodeInside;
	    }
	    if (activeIndex <= firstNodeIndex) {
	        return returnLastNode;
	    }
	    if (activeIndex > lastNodeIndex) {
	        return returnFirstNode;
	    }
	    if (indexDiff) {
	        if (Math.abs(indexDiff) > 1) {
	            return lastNodeInside;
	        }
	        return (cnt + lastNodeInside + indexDiff) % cnt;
	    }
	    return undefined;
	};

	var findAutoFocused = function (autoFocusables) { return function (node) {
	    return node.autofocus || (node.dataset && !!node.dataset.autofocus) || autoFocusables.indexOf(node) >= 0;
	}; };
	var reorderNodes = function (srcNodes, dstNodes) {
	    var remap = new Map();
	    dstNodes.forEach(function (entity) { return remap.set(entity.node, entity); });
	    return srcNodes.map(function (node) { return remap.get(node); }).filter(isDefined);
	};
	var getFocusMerge = function (topNode, lastNode) {
	    var activeElement = (document && document.activeElement);
	    var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
	    var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);
	    var visibilityCache = new Map();
	    var anyFocusable = getAllTabbableNodes(entries, visibilityCache);
	    var innerElements = getTabbableNodes(entries, visibilityCache).filter(function (_a) {
	        var node = _a.node;
	        return isNotAGuard(node);
	    });
	    if (!innerElements[0]) {
	        innerElements = anyFocusable;
	        if (!innerElements[0]) {
	            return undefined;
	        }
	    }
	    var outerNodes = getAllTabbableNodes([commonParent], visibilityCache).map(function (_a) {
	        var node = _a.node;
	        return node;
	    });
	    var orderedInnerElements = reorderNodes(outerNodes, innerElements);
	    var innerNodes = orderedInnerElements.map(function (_a) {
	        var node = _a.node;
	        return node;
	    });
	    var newId = newFocus(innerNodes, outerNodes, activeElement, lastNode);
	    if (newId === NEW_FOCUS) {
	        var autoFocusable = anyFocusable
	            .map(function (_a) {
	            var node = _a.node;
	            return node;
	        })
	            .filter(findAutoFocused(allParentAutofocusables(entries, visibilityCache)));
	        return {
	            node: autoFocusable && autoFocusable.length ? pickFirstFocus(autoFocusable) : pickFirstFocus(innerNodes),
	        };
	    }
	    if (newId === undefined) {
	        return newId;
	    }
	    return orderedInnerElements[newId];
	};

	var focusOn = function (target) {
	    target.focus();
	    if ('contentWindow' in target && target.contentWindow) {
	        target.contentWindow.focus();
	    }
	};
	var guardCount = 0;
	var lockDisabled = false;
	var setFocus = function (topNode, lastNode) {
	    var focusable = getFocusMerge(topNode, lastNode);
	    if (lockDisabled) {
	        return;
	    }
	    if (focusable) {
	        if (guardCount > 2) {
	            console.error('FocusLock: focus-fighting detected. Only one focus management system could be active. ' +
	                'See https://github.com/theKashey/focus-lock/#focus-fighting');
	            lockDisabled = true;
	            setTimeout(function () {
	                lockDisabled = false;
	            }, 1);
	            return;
	        }
	        guardCount++;
	        focusOn(focusable.node);
	        guardCount--;
	    }
	};

	var moveFocusInside = setFocus;

	function deferAction(action) {
	  // Hidding setImmediate from Webpack to avoid inserting polyfill
	  var _window = window,
	      setImmediate = _window.setImmediate;

	  if (typeof setImmediate !== 'undefined') {
	    setImmediate(action);
	  } else {
	    setTimeout(action, 1);
	  }
	}

	var focusOnBody = function focusOnBody() {
	  return document && document.activeElement === document.body;
	};

	var isFreeFocus = function isFreeFocus() {
	  return focusOnBody() || focusIsHidden();
	};

	var lastActiveTrap = null;
	var lastActiveFocus = null;
	var lastPortaledElement = null;
	var focusWasOutsideWindow = false;

	var defaultWhitelist = function defaultWhitelist() {
	  return true;
	};

	var focusWhitelisted = function focusWhitelisted(activeElement) {
	  return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
	};

	var recordPortal = function recordPortal(observerNode, portaledElement) {
	  lastPortaledElement = {
	    observerNode: observerNode,
	    portaledElement: portaledElement
	  };
	};

	var focusIsPortaledPair = function focusIsPortaledPair(element) {
	  return lastPortaledElement && lastPortaledElement.portaledElement === element;
	};

	function autoGuard(startIndex, end, step, allNodes) {
	  var lastGuard = null;
	  var i = startIndex;

	  do {
	    var item = allNodes[i];

	    if (item.guard) {
	      if (item.node.dataset.focusAutoGuard) {
	        lastGuard = item;
	      }
	    } else if (item.lockItem) {
	      if (i !== startIndex) {
	        // we will tab to the next element
	        return;
	      }

	      lastGuard = null;
	    } else {
	      break;
	    }
	  } while ((i += step) !== end);

	  if (lastGuard) {
	    lastGuard.node.tabIndex = 0;
	  }
	}

	var extractRef$1 = function extractRef(ref) {
	  return ref && 'current' in ref ? ref.current : ref;
	};

	var focusWasOutside = function focusWasOutside(crossFrameOption) {
	  if (crossFrameOption) {
	    // with cross frame return true for any value
	    return Boolean(focusWasOutsideWindow);
	  } // in other case return only of focus went a while aho


	  return focusWasOutsideWindow === 'meanwhile';
	};

	var activateTrap = function activateTrap() {
	  var result = false;

	  if (lastActiveTrap) {
	    var _lastActiveTrap = lastActiveTrap,
	        observed = _lastActiveTrap.observed,
	        persistentFocus = _lastActiveTrap.persistentFocus,
	        autoFocus = _lastActiveTrap.autoFocus,
	        shards = _lastActiveTrap.shards,
	        crossFrame = _lastActiveTrap.crossFrame;
	    var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
	    var activeElement = document && document.activeElement;

	    if (workingNode) {
	      var workingArea = [workingNode].concat(shards.map(extractRef$1).filter(Boolean));

	      if (!activeElement || focusWhitelisted(activeElement)) {
	        if (persistentFocus || focusWasOutside(crossFrame) || !isFreeFocus() || !lastActiveFocus && autoFocus) {
	          if (workingNode && !(focusInside(workingArea) || focusIsPortaledPair(activeElement))) {
	            if (document && !lastActiveFocus && activeElement && !autoFocus) {
	              // Check if blur() exists, which is missing on certain elements on IE
	              if (activeElement.blur) {
	                activeElement.blur();
	              }

	              document.body.focus();
	            } else {
	              result = moveFocusInside(workingArea, lastActiveFocus);
	              lastPortaledElement = {};
	            }
	          }

	          focusWasOutsideWindow = false;
	          lastActiveFocus = document && document.activeElement;
	        }
	      }

	      if (document) {
	        var newActiveElement = document && document.activeElement;
	        var allNodes = getFocusabledIn(workingArea);
	        var focusedIndex = allNodes.map(function (_ref) {
	          var node = _ref.node;
	          return node;
	        }).indexOf(newActiveElement);

	        if (focusedIndex > -1) {
	          // remove old focus
	          allNodes.filter(function (_ref2) {
	            var guard = _ref2.guard,
	                node = _ref2.node;
	            return guard && node.dataset.focusAutoGuard;
	          }).forEach(function (_ref3) {
	            var node = _ref3.node;
	            return node.removeAttribute('tabIndex');
	          });
	          autoGuard(focusedIndex, allNodes.length, +1, allNodes);
	          autoGuard(focusedIndex, -1, -1, allNodes);
	        }
	      }
	    }
	  }

	  return result;
	};

	var onTrap = function onTrap(event) {
	  if (activateTrap() && event) {
	    // prevent scroll jump
	    event.stopPropagation();
	    event.preventDefault();
	  }
	};

	var onBlur = function onBlur() {
	  return deferAction(activateTrap);
	};

	var onFocus = function onFocus(event) {
	  // detect portal
	  var source = event.target;
	  var currentNode = event.currentTarget;

	  if (!currentNode.contains(source)) {
	    recordPortal(currentNode, source);
	  }
	};

	var FocusWatcher = function FocusWatcher() {
	  return null;
	};

	var onWindowBlur = function onWindowBlur() {
	  focusWasOutsideWindow = 'just'; // using setTimeout to set  this variable after React/sidecar reaction

	  setTimeout(function () {
	    focusWasOutsideWindow = 'meanwhile';
	  }, 0);
	};

	var attachHandler = function attachHandler() {
	  document.addEventListener('focusin', onTrap, true);
	  document.addEventListener('focusout', onBlur);
	  window.addEventListener('blur', onWindowBlur);
	};

	var detachHandler = function detachHandler() {
	  document.removeEventListener('focusin', onTrap, true);
	  document.removeEventListener('focusout', onBlur);
	  window.removeEventListener('blur', onWindowBlur);
	};

	function reducePropsToState(propsList) {
	  return propsList.filter(function (_ref5) {
	    var disabled = _ref5.disabled;
	    return !disabled;
	  });
	}

	function handleStateChangeOnClient(traps) {
	  var trap = traps.slice(-1)[0];

	  if (trap && !lastActiveTrap) {
	    attachHandler();
	  }

	  var lastTrap = lastActiveTrap;
	  var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
	  lastActiveTrap = trap;

	  if (lastTrap && !sameTrap) {
	    lastTrap.onDeactivation(); // return focus only of last trap was removed

	    if (!traps.filter(function (_ref6) {
	      var id = _ref6.id;
	      return id === lastTrap.id;
	    }).length) {
	      // allow defer is no other trap is awaiting restore
	      lastTrap.returnFocus(!trap);
	    }
	  }

	  if (trap) {
	    lastActiveFocus = null;

	    if (!sameTrap || lastTrap.observed !== trap.observed) {
	      trap.onActivation();
	    }

	    activateTrap();
	    deferAction(activateTrap);
	  } else {
	    detachHandler();
	    lastActiveFocus = null;
	  }
	} // bind medium


	mediumFocus.assignSyncMedium(onFocus);
	mediumBlur.assignMedium(onBlur);
	mediumEffect.assignMedium(function (cb) {
	  return cb({
	    moveFocusInside: moveFocusInside,
	    focusInside: focusInside
	  });
	});
	var FocusTrap = withSideEffect(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);

	/* that would be a BREAKING CHANGE!
	// delaying sidecar execution till the first usage
	const RequireSideCar = (props) => {
	  // eslint-disable-next-line global-require
	  const SideCar = require('./Trap').default;
	  return <SideCar {...props} />;
	};
	*/

	var FocusLockCombination = /*#__PURE__*/react.exports.forwardRef(function FocusLockUICombination(props, ref) {
	  return /*#__PURE__*/react.exports.createElement(FocusLockUI, _extends$3({
	    sideCar: FocusTrap,
	    ref: ref
	  }, props));
	});

	var _ref = FocusLockUI.propTypes || {};
	    _ref.sideCar;
	    _objectWithoutPropertiesLoose$2(_ref, ["sideCar"]);

	FocusLockCombination.propTypes = {};
	var FocusLock = FocusLockCombination;

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */

	var __assign = function() {
	    __assign = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};

	function __rest(s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	}

	var zeroRightClassName = 'right-scroll-bar-position';
	var fullWidthClassName = 'width-before-scroll-bar';
	var noScrollbarsClassName = 'with-scroll-bars-hidden';
	var removedBarSizeVariable = '--removed-body-scroll-bar-size';

	var effectCar = createSidecarMedium();

	var nothing = function () {
	    return;
	};
	/**
	 * Removes scrollbar from the page and contain the scroll within the Lock
	 */
	var RemoveScroll$1 = react.exports.forwardRef(function (props, parentRef) {
	    var ref = react.exports.useRef(null);
	    var _a = react.exports.useState({
	        onScrollCapture: nothing,
	        onWheelCapture: nothing,
	        onTouchMoveCapture: nothing
	    }), callbacks = _a[0], setCallbacks = _a[1];
	    var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container = _b === void 0 ? 'div' : _b, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]);
	    var SideCar = sideCar;
	    var containerRef = useMergeRefs([
	        ref,
	        parentRef
	    ]);
	    var containerProps = __assign({}, rest, callbacks);
	    return (react.exports.createElement(react.exports.Fragment, null,
	        enabled && (react.exports.createElement(SideCar, { sideCar: effectCar, removeScrollBar: removeScrollBar, shards: shards, noIsolation: noIsolation, inert: inert, setCallbacks: setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref })),
	        forwardProps ? (react.exports.cloneElement(react.exports.Children.only(children), __assign({}, containerProps, { ref: containerRef }))) : (react.exports.createElement(Container, __assign({}, containerProps, { className: className, ref: containerRef }), children))));
	});
	RemoveScroll$1.defaultProps = {
	    enabled: true,
	    removeScrollBar: true,
	    inert: false
	};
	RemoveScroll$1.classNames = {
	    fullWidth: fullWidthClassName,
	    zeroRight: zeroRightClassName
	};

	var getNonce = function () {
	    if (typeof __webpack_nonce__ !== 'undefined') {
	        return __webpack_nonce__;
	    }
	    return undefined;
	};

	function makeStyleTag() {
	    if (!document)
	        return null;
	    var tag = document.createElement('style');
	    tag.type = 'text/css';
	    var nonce = getNonce();
	    if (nonce) {
	        tag.setAttribute('nonce', nonce);
	    }
	    return tag;
	}
	function injectStyles(tag, css) {
	    if (tag.styleSheet) {
	        tag.styleSheet.cssText = css;
	    }
	    else {
	        tag.appendChild(document.createTextNode(css));
	    }
	}
	function insertStyleTag(tag) {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    head.appendChild(tag);
	}
	var stylesheetSingleton = function () {
	    var counter = 0;
	    var stylesheet = null;
	    return {
	        add: function (style) {
	            if (counter == 0) {
	                if (stylesheet = makeStyleTag()) {
	                    injectStyles(stylesheet, style);
	                    insertStyleTag(stylesheet);
	                }
	            }
	            counter++;
	        },
	        remove: function () {
	            counter--;
	            if (!counter && stylesheet) {
	                stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
	                stylesheet = null;
	            }
	        }
	    };
	};

	var styleHookSingleton = function () {
	    var sheet = stylesheetSingleton();
	    return function (styles) {
	        react.exports.useEffect(function () {
	            sheet.add(styles);
	            return function () {
	                sheet.remove();
	            };
	        }, []);
	    };
	};

	var styleSingleton = function () {
	    var useStyle = styleHookSingleton();
	    var Sheet = function (_a) {
	        var styles = _a.styles;
	        useStyle(styles);
	        return null;
	    };
	    return Sheet;
	};

	var zeroGap = {
	    left: 0,
	    top: 0,
	    right: 0,
	    gap: 0,
	};
	var parse = function (x) { return parseInt(x || '', 10) || 0; };
	var getOffset = function (gapMode) {
	    var cs = window.getComputedStyle(document.body);
	    var left = cs[gapMode === 'padding' ? 'paddingLeft' : 'marginLeft'];
	    var top = cs[gapMode === 'padding' ? 'paddingTop' : 'marginTop'];
	    var right = cs[gapMode === 'padding' ? 'paddingRight' : 'marginRight'];
	    return [
	        parse(left),
	        parse(top),
	        parse(right),
	    ];
	};
	var getGapWidth = function (gapMode) {
	    if (gapMode === void 0) { gapMode = 'margin'; }
	    if (typeof window === 'undefined') {
	        return zeroGap;
	    }
	    var offsets = getOffset(gapMode);
	    var documentWidth = document.documentElement.clientWidth;
	    var windowWidth = window.innerWidth;
	    return {
	        left: offsets[0],
	        top: offsets[1],
	        right: offsets[2],
	        gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0]),
	    };
	};

	var Style = styleSingleton();
	var getStyles = function (_a, allowRelative, gapMode, important) {
	    var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;
	    if (gapMode === void 0) { gapMode = 'margin'; }
	    return "\n  ." + noScrollbarsClassName + " {\n   overflow: hidden " + important + ";\n   padding-right: " + gap + "px " + important + ";\n  }\n  body {\n    overflow: hidden " + important + ";\n    " + [
	        allowRelative && "position: relative " + important + ";",
	        gapMode === 'margin' && "\n    padding-left: " + left + "px;\n    padding-top: " + top + "px;\n    padding-right: " + right + "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: " + gap + "px " + important + ";\n    ",
	        gapMode === 'padding' && "padding-right: " + gap + "px " + important + ";",
	    ].filter(Boolean).join('') + "\n  }\n  \n  ." + zeroRightClassName + " {\n    right: " + gap + "px " + important + ";\n  }\n  \n  ." + fullWidthClassName + " {\n    margin-right: " + gap + "px " + important + ";\n  }\n  \n  ." + zeroRightClassName + " ." + zeroRightClassName + " {\n    right: 0 " + important + ";\n  }\n  \n  ." + fullWidthClassName + " ." + fullWidthClassName + " {\n    margin-right: 0 " + important + ";\n  }\n  \n  body {\n    " + removedBarSizeVariable + ": " + gap + "px;\n  }\n";
	};
	var RemoveScrollBar = function (props) {
	    var _a = react.exports.useState(getGapWidth(props.gapMode)), gap = _a[0], setGap = _a[1];
	    react.exports.useEffect(function () {
	        setGap(getGapWidth(props.gapMode));
	    }, [props.gapMode]);
	    var noRelative = props.noRelative, noImportant = props.noImportant, _b = props.gapMode, gapMode = _b === void 0 ? 'margin' : _b;
	    return react.exports.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : '') });
	};

	var elementCouldBeVScrolled = function (node) {
	    var styles = window.getComputedStyle(node);
	    return (styles.overflowY !== 'hidden' && // not-not-scrollable
	        !(styles.overflowY === styles.overflowX && styles.overflowY === 'visible') // scrollable
	    );
	};
	var elementCouldBeHScrolled = function (node) {
	    var styles = window.getComputedStyle(node);
	    // we allow horizontal scroll on range elements
	    if (node.type === "range") {
	        return true;
	    }
	    return (styles.overflowX !== 'hidden' && // not-not-scrollable
	        !(styles.overflowY === styles.overflowX && styles.overflowX === 'visible') // scrollable
	    );
	};
	var locationCouldBeScrolled = function (axis, node) {
	    var current = node;
	    do {
	        // Skip over shadow root
	        if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
	            current = current.host;
	        }
	        var isScrollable = elementCouldBeScrolled(axis, current);
	        if (isScrollable) {
	            var _a = getScrollVariables(axis, current), s = _a[1], d = _a[2];
	            if (s > d) {
	                return true;
	            }
	        }
	        current = current.parentNode;
	    } while (current && current !== document.body);
	    return false;
	};
	var getVScrollVariables = function (_a) {
	    var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
	    return [scrollTop, scrollHeight, clientHeight];
	};
	var getHScrollVariables = function (_a) {
	    var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
	    return [scrollLeft, scrollWidth, clientWidth];
	};
	var elementCouldBeScrolled = function (axis, node) {
	    return axis === 'v' ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
	};
	var getScrollVariables = function (axis, node) {
	    return axis === 'v' ? getVScrollVariables(node) : getHScrollVariables(node);
	};
	var handleScroll = function (axis, endTarget, event, sourceDelta, noOverscroll) {
	    var delta = sourceDelta;
	    // find scrollable target
	    var target = event.target;
	    var targetInLock = endTarget.contains(target);
	    var shouldCancelScroll = false;
	    var isDeltaPositive = delta > 0;
	    var availableScroll = 0;
	    var availableScrollTop = 0;
	    do {
	        var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2];
	        var elementScroll = scroll_1 - capacity - position;
	        if (position || elementScroll) {
	            if (elementCouldBeScrolled(axis, target)) {
	                availableScroll += elementScroll;
	                availableScrollTop += position;
	            }
	        }
	        target = target.parentNode;
	    } while (
	    // portaled content
	    (!targetInLock && target !== document.body) ||
	        // self content
	        (targetInLock && (endTarget.contains(target) || endTarget === target)));
	    if (isDeltaPositive &&
	        ((noOverscroll && availableScroll === 0) ||
	            (!noOverscroll && delta > availableScroll))) {
	        shouldCancelScroll = true;
	    }
	    else if (!isDeltaPositive &&
	        ((noOverscroll && availableScrollTop === 0) ||
	            (!noOverscroll && -delta > availableScrollTop))) {
	        shouldCancelScroll = true;
	    }
	    return shouldCancelScroll;
	};

	var passiveSupported = false;
	if (typeof window !== 'undefined') {
	    try {
	        var options = Object.defineProperty({}, 'passive', {
	            get: function () {
	                passiveSupported = true;
	                return true;
	            }
	        });
	        window.addEventListener('test', options, options);
	        window.removeEventListener('test', options, options);
	    }
	    catch (err) {
	        passiveSupported = false;
	    }
	}
	var nonPassive = passiveSupported ? { passive: false } : false;

	var getTouchXY = function (event) {
	    return 'changedTouches' in event
	        ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY]
	        : [0, 0];
	};
	var getDeltaXY = function (event) { return [event.deltaX, event.deltaY]; };
	var extractRef = function (ref) {
	    return ref && 'current' in ref ? ref.current : ref;
	};
	var deltaCompare = function (x, y) {
	    return x[0] === y[0] && x[1] === y[1];
	};
	var generateStyle = function (id) { return "\n  .block-interactivity-" + id + " {pointer-events: none;}\n  .allow-interactivity-" + id + " {pointer-events: all;}\n"; };
	var idCounter = 0;
	var lockStack = [];
	function RemoveScrollSideCar(props) {
	    var shouldPreventQueue = react.exports.useRef([]);
	    var touchStartRef = react.exports.useRef([0, 0]);
	    var activeAxis = react.exports.useRef();
	    var id = react.exports.useState(idCounter++)[0];
	    var Style = react.exports.useState(function () { return styleSingleton(); })[0];
	    var lastProps = react.exports.useRef(props);
	    react.exports.useEffect(function () {
	        lastProps.current = props;
	    }, [props]);
	    react.exports.useEffect(function () {
	        if (props.inert) {
	            document.body.classList.add("block-interactivity-" + id);
	            var allow_1 = [
	                props.lockRef.current
	            ].concat((props.shards || []).map(extractRef)).filter(Boolean);
	            allow_1.forEach(function (el) { return el.classList.add("allow-interactivity-" + id); });
	            return function () {
	                document.body.classList.remove("block-interactivity-" + id);
	                allow_1.forEach(function (el) {
	                    return el.classList.remove("allow-interactivity-" + id);
	                });
	            };
	        }
	        return;
	    }, [props.inert, props.lockRef.current, props.shards]);
	    var shouldCancelEvent = react.exports.useCallback(function (event, parent) {
	        if ('touches' in event && event.touches.length === 2) {
	            return !lastProps.current.allowPinchZoom;
	        }
	        var touch = getTouchXY(event);
	        var touchStart = touchStartRef.current;
	        var deltaX = 'deltaX' in event ? event.deltaX : touchStart[0] - touch[0];
	        var deltaY = 'deltaY' in event ? event.deltaY : touchStart[1] - touch[1];
	        var currentAxis;
	        var target = event.target;
	        var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? 'h' : 'v';
	        var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
	        if (!canBeScrolledInMainDirection) {
	            return true;
	        }
	        if (canBeScrolledInMainDirection) {
	            currentAxis = moveDirection;
	        }
	        else {
	            currentAxis = moveDirection === 'v' ? 'h' : 'v';
	            canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
	            // other axis might be not scrollable
	        }
	        if (!canBeScrolledInMainDirection) {
	            return false;
	        }
	        if (!activeAxis.current &&
	            'changedTouches' in event &&
	            (deltaX || deltaY)) {
	            activeAxis.current = currentAxis;
	        }
	        if (!currentAxis) {
	            return true;
	        }
	        var cancelingAxis = activeAxis.current || currentAxis;
	        return handleScroll(cancelingAxis, parent, event, cancelingAxis === 'h' ? deltaX : deltaY, true);
	    }, []);
	    var shouldPrevent = react.exports.useCallback(function (_event) {
	        var event = _event;
	        if (!lockStack.length || lockStack[lockStack.length - 1] !== Style) {
	            // not the last active
	            return;
	        }
	        var delta = 'deltaY' in event ? getDeltaXY(event) : getTouchXY(event);
	        var sourceEvent = shouldPreventQueue.current.filter(function (e) {
	            return e.name === event.type &&
	                e.target === event.target &&
	                deltaCompare(e.delta, delta);
	        })[0];
	        // self event, and should be canceled
	        if (sourceEvent && sourceEvent.should) {
	            event.preventDefault();
	            return;
	        }
	        // outside or shard event
	        if (!sourceEvent) {
	            var shardNodes = (lastProps.current.shards || [])
	                .map(extractRef)
	                .filter(Boolean)
	                .filter(function (node) { return node.contains(event.target); });
	            var shouldStop = shardNodes.length > 0
	                ? shouldCancelEvent(event, shardNodes[0])
	                : !lastProps.current.noIsolation;
	            if (shouldStop) {
	                event.preventDefault();
	            }
	        }
	    }, []);
	    var shouldCancel = react.exports.useCallback(function (name, delta, target, should) {
	        var event = { name: name, delta: delta, target: target, should: should };
	        shouldPreventQueue.current.push(event);
	        setTimeout(function () {
	            shouldPreventQueue.current = shouldPreventQueue.current.filter(function (e) { return e !== event; });
	        }, 1);
	    }, []);
	    var scrollTouchStart = react.exports.useCallback(function (event) {
	        touchStartRef.current = getTouchXY(event);
	        activeAxis.current = undefined;
	    }, []);
	    var scrollWheel = react.exports.useCallback(function (event) {
	        shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
	    }, []);
	    var scrollTouchMove = react.exports.useCallback(function (event) {
	        shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
	    }, []);
	    react.exports.useEffect(function () {
	        lockStack.push(Style);
	        props.setCallbacks({
	            onScrollCapture: scrollWheel,
	            onWheelCapture: scrollWheel,
	            onTouchMoveCapture: scrollTouchMove
	        });
	        document.addEventListener('wheel', shouldPrevent, nonPassive);
	        document.addEventListener('touchmove', shouldPrevent, nonPassive);
	        document.addEventListener('touchstart', scrollTouchStart, nonPassive);
	        return function () {
	            lockStack = lockStack.filter(function (inst) { return inst !== Style; });
	            document.removeEventListener('wheel', shouldPrevent, nonPassive);
	            document.removeEventListener('touchmove', shouldPrevent, nonPassive);
	            document.removeEventListener('touchstart', scrollTouchStart, nonPassive);
	        };
	    }, []);
	    var removeScrollBar = props.removeScrollBar, inert = props.inert;
	    return (react.exports.createElement(react.exports.Fragment, null,
	        inert ? react.exports.createElement(Style, { styles: generateStyle(id) }) : null,
	        removeScrollBar ? react.exports.createElement(RemoveScrollBar, { gapMode: "margin" }) : null));
	}

	var SideCar = exportSidecar(effectCar, RemoveScrollSideCar);

	var ReactRemoveScroll = react.exports.forwardRef(function (props, ref) { return (react.exports.createElement(RemoveScroll$1, __assign({}, props, { ref: ref, sideCar: SideCar }))); });
	ReactRemoveScroll.classNames = RemoveScroll$1.classNames;
	var RemoveScroll = ReactRemoveScroll;

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	({
	  allowPinchZoom: PropTypes.bool,
	  dangerouslyBypassFocusLock: PropTypes.bool,
	  dangerouslyBypassScrollLock: PropTypes.bool,
	  // TODO:
	  initialFocusRef: function initialFocusRef() {
	    return null;
	  },
	  onDismiss: PropTypes.func
	}); ////////////////////////////////////////////////////////////////////////////////

	/**
	 * DialogOverlay
	 *
	 * Low-level component if you need more control over the styles or rendering of
	 * the dialog overlay.
	 *
	 * Note: You must render a `DialogContent` inside.
	 *
	 * @see Docs https://reach.tech/dialog#dialogoverlay
	 */

	var DialogOverlay = /*#__PURE__*/forwardRefWithAs(function DialogOverlay(_ref, forwardedRef) {
	  var _ref$as = _ref.as,
	      Comp = _ref$as === void 0 ? "div" : _ref$as,
	      _ref$isOpen = _ref.isOpen,
	      isOpen = _ref$isOpen === void 0 ? true : _ref$isOpen,
	      props = _objectWithoutPropertiesLoose(_ref, ["as", "isOpen"]);
	  // up again when the menu closes, only pops up when focus returns again
	  // to the tooltip (like native OS tooltips).

	  react.exports.useEffect(function () {
	    if (isOpen) {
	      // @ts-ignore
	      window.__REACH_DISABLE_TOOLTIPS = true;
	    } else {
	      window.requestAnimationFrame(function () {
	        // Wait a frame so that this doesn't fire before tooltip does
	        // @ts-ignore
	        window.__REACH_DISABLE_TOOLTIPS = false;
	      });
	    }
	  }, [isOpen]);
	  return isOpen ? /*#__PURE__*/react.exports.createElement(Portal, {
	    "data-reach-dialog-wrapper": ""
	  }, /*#__PURE__*/react.exports.createElement(DialogInner, _extends({
	    ref: forwardedRef,
	    as: Comp
	  }, props))) : null;
	});

	////////////////////////////////////////////////////////////////////////////////

	/**
	 * DialogInner
	 */
	var DialogInner = /*#__PURE__*/forwardRefWithAs(function DialogInner(_ref2, forwardedRef) {
	  var allowPinchZoom = _ref2.allowPinchZoom,
	      _ref2$as = _ref2.as,
	      Comp = _ref2$as === void 0 ? "div" : _ref2$as,
	      _ref2$dangerouslyBypa = _ref2.dangerouslyBypassFocusLock,
	      dangerouslyBypassFocusLock = _ref2$dangerouslyBypa === void 0 ? false : _ref2$dangerouslyBypa,
	      _ref2$dangerouslyBypa2 = _ref2.dangerouslyBypassScrollLock,
	      dangerouslyBypassScrollLock = _ref2$dangerouslyBypa2 === void 0 ? false : _ref2$dangerouslyBypa2,
	      initialFocusRef = _ref2.initialFocusRef,
	      onClick = _ref2.onClick,
	      _ref2$onDismiss = _ref2.onDismiss,
	      onDismiss = _ref2$onDismiss === void 0 ? noop : _ref2$onDismiss,
	      onKeyDown = _ref2.onKeyDown,
	      onMouseDown = _ref2.onMouseDown,
	      _ref2$unstable_lockFo = _ref2.unstable_lockFocusAcrossFrames,
	      unstable_lockFocusAcrossFrames = _ref2$unstable_lockFo === void 0 ? true : _ref2$unstable_lockFo,
	      props = _objectWithoutPropertiesLoose(_ref2, ["allowPinchZoom", "as", "dangerouslyBypassFocusLock", "dangerouslyBypassScrollLock", "initialFocusRef", "onClick", "onDismiss", "onKeyDown", "onMouseDown", "unstable_lockFocusAcrossFrames"]);

	  var mouseDownTarget = react.exports.useRef(null);
	  var overlayNode = react.exports.useRef(null);
	  var ref = useForkedRef(overlayNode, forwardedRef);
	  var activateFocusLock = react.exports.useCallback(function () {
	    if (initialFocusRef && initialFocusRef.current) {
	      initialFocusRef.current.focus();
	    }
	  }, [initialFocusRef]);

	  function handleClick(event) {
	    if (mouseDownTarget.current === event.target) {
	      event.stopPropagation();
	      onDismiss(event);
	    }
	  }

	  function handleKeyDown(event) {
	    if (event.key === "Escape") {
	      event.stopPropagation();
	      onDismiss(event);
	    }
	  }

	  function handleMouseDown(event) {
	    mouseDownTarget.current = event.target;
	  }

	  react.exports.useEffect(function () {
	    return overlayNode.current ? createAriaHider(overlayNode.current) : void null;
	  }, []);
	  return /*#__PURE__*/react.exports.createElement(FocusLock, {
	    autoFocus: true,
	    returnFocus: true,
	    onActivation: activateFocusLock,
	    disabled: dangerouslyBypassFocusLock,
	    crossFrame: unstable_lockFocusAcrossFrames
	  }, /*#__PURE__*/react.exports.createElement(RemoveScroll, {
	    allowPinchZoom: allowPinchZoom,
	    enabled: !dangerouslyBypassScrollLock
	  }, /*#__PURE__*/react.exports.createElement(Comp, _extends({}, props, {
	    ref: ref,
	    "data-reach-dialog-overlay": ""
	    /*
	     * We can ignore the `no-static-element-interactions` warning here
	     * because our overlay is only designed to capture any outside
	     * clicks, not to serve as a clickable element itself.
	     */
	    ,
	    onClick: wrapEvent(onClick, handleClick),
	    onKeyDown: wrapEvent(onKeyDown, handleKeyDown),
	    onMouseDown: wrapEvent(onMouseDown, handleMouseDown)
	  }))));
	});

	/**
	 * DialogContent
	 *
	 * Low-level component if you need more control over the styles or rendering of
	 * the dialog content.
	 *
	 * Note: Must be a child of `DialogOverlay`.
	 *
	 * Note: You only need to use this when you are also styling `DialogOverlay`,
	 * otherwise you can use the high-level `Dialog` component and pass the props
	 * to it. Any props passed to `Dialog` component (besides `isOpen` and
	 * `onDismiss`) will be spread onto `DialogContent`.
	 *
	 * @see Docs https://reach.tech/dialog#dialogcontent
	 */


	var DialogContent = /*#__PURE__*/forwardRefWithAs(function DialogContent(_ref3, forwardedRef) {
	  var _ref3$as = _ref3.as,
	      Comp = _ref3$as === void 0 ? "div" : _ref3$as,
	      onClick = _ref3.onClick;
	      _ref3.onKeyDown;
	      var props = _objectWithoutPropertiesLoose(_ref3, ["as", "onClick", "onKeyDown"]);

	  return /*#__PURE__*/react.exports.createElement(Comp, _extends({
	    "aria-modal": "true",
	    role: "dialog",
	    tabIndex: -1
	  }, props, {
	    ref: forwardedRef,
	    "data-reach-dialog-content": "",
	    onClick: wrapEvent(onClick, function (event) {
	      event.stopPropagation();
	    })
	  }));
	});


	function createAriaHider(dialogNode) {
	  var originalValues = [];
	  var rootNodes = [];
	  var ownerDocument = getOwnerDocument(dialogNode);

	  if (!dialogNode) {

	    return noop;
	  }

	  Array.prototype.forEach.call(ownerDocument.querySelectorAll("body > *"), function (node) {
	    var _dialogNode$parentNod, _dialogNode$parentNod2;

	    var portalNode = (_dialogNode$parentNod = dialogNode.parentNode) == null ? void 0 : (_dialogNode$parentNod2 = _dialogNode$parentNod.parentNode) == null ? void 0 : _dialogNode$parentNod2.parentNode;

	    if (node === portalNode) {
	      return;
	    }

	    var attr = node.getAttribute("aria-hidden");
	    var alreadyHidden = attr !== null && attr !== "false";

	    if (alreadyHidden) {
	      return;
	    }

	    originalValues.push(attr);
	    rootNodes.push(node);
	    node.setAttribute("aria-hidden", "true");
	  });
	  return function () {
	    rootNodes.forEach(function (node, index) {
	      var originalValue = originalValues[index];

	      if (originalValue === null) {
	        node.removeAttribute("aria-hidden");
	      } else {
	        node.setAttribute("aria-hidden", originalValue);
	      }
	    });
	  };
	}

	var Close = {};

	var _interopRequireDefault$2 = interopRequireDefault.exports;

	Object.defineProperty(Close, "__esModule", {
	  value: true
	});
	var default_1$2 = Close.default = void 0;

	var _createSvgIcon$2 = _interopRequireDefault$2(createSvgIcon);

	var _jsxRuntime$2 = jsxRuntime.exports;

	var _default$2 = (0, _createSvgIcon$2.default)( /*#__PURE__*/(0, _jsxRuntime$2.jsx)("path", {
	  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
	}), 'Close');

	default_1$2 = Close.default = _default$2;

	var AnimatedDialogOverlay = animated(DialogOverlay);
	var AnimatedDialogContent = animated(DialogContent);
	var transitionKeys = {
	    from: { opacity: 0, y: -10 },
	    enter: { opacity: 1, y: 0 },
	    leave: { opacity: 0, y: 10 },
	    config: config_1.stiff,
	};
	function ModalDialog(props) {
	    // const [showDialog, setShowDialog] = useState(false);
	    var transitions = useTransition_1(props.showDialog, null, transitionKeys);
	    return (jsxRuntime.exports.jsx("div", __assign$2({ className: "cwd-events-modal-dialog" }, { children: transitions.map(function (_a) {
	            var item = _a.item, styles = _a.props, key = _a.key;
	            return item && (
	            // @todo fix this https://github.com/pmndrs/react-spring/issues/1283
	            // @ts-ignore: next line
	            jsxRuntime.exports.jsx(AnimatedDialogOverlay, __assign$2({ style: { opacity: styles.opacity }, onDismiss: function () { return props.setShowDialog(false); } }, { children: 
	                // @ts-ignore: next line
	                jsxRuntime.exports.jsxs(AnimatedDialogContent, __assign$2({ "aria-label": "The selected event dialog", style: {
	                        // @ts-ignore: next line
	                        // transform: styles.y.interpolate(
	                        //   (value: string) => `translate3d(0px, ${value}px, 0px)`
	                        // ),
	                        border: "4px solid hsla(0, 0%, 0%, 0.5)",
	                        borderRadius: 10,
	                        minHeight: 300,
	                    } }, { children: [jsxRuntime.exports.jsx(IconButton$1, __assign$2({ style: { float: "right" }, onClick: function () { return props.setShowDialog(false); }, "aria-label": "close dialog", size: "large" }, { children: jsxRuntime.exports.jsx(default_1$2, {}, void 0) }), void 0), props.children] }), void 0) }), key));
	        }) }), void 0));
	}
	ModalDialog.propTypes = {
	    showDialog: PropTypes.bool.isRequired,
	    setShowDialog: PropTypes.func.isRequired,
	    children: PropTypes.node,
	};

	var Checkbox = function (_a) {
	    var name = _a.name, color = _a.color, label = _a.label, _b = _a.checked, checked = _b === void 0 ? false : _b, onChange = _a.onChange;
	    return (jsxRuntime.exports.jsx(FormControlLabel$1, { control: jsxRuntime.exports.jsx(MuiCheckbox, { onChange: onChange, checked: checked, color: color, name: name, inputProps: {} }, void 0), label: label }, void 0));
	};
	Checkbox.propTypes = {
	    name: PropTypes.string.isRequired,
	    checked: PropTypes.bool,
	    onChange: PropTypes.func.isRequired,
	};

	var theme$1 = createTheme();
	var Filters = function () {
	    var _a = react.exports.useContext(EventsContext), events = _a.events, setFilteredEvents = _a.setFilteredEvents;
	    var _b = __read(react.exports.useState(new Map()), 2), checkedItems = _b[0], setCheckedItems = _b[1];
	    var eventTypesFull = [];
	    var eventKeywordsFull = [];
	    var eventGroupNamesFull = [];
	    if (!events) {
	        return jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {}, void 0);
	    }
	    events.forEach(function (event) {
	        var _a;
	        if (isNested(event, "event", "filters", "event_types")) {
	            event.event.filters.event_types.forEach(function (type) {
	                eventTypesFull.push(type.name);
	            });
	        }
	        if (isNested(event, "event", "keywords")) {
	            event.event.keywords.forEach(function (keyword) {
	                eventKeywordsFull.push(keyword);
	            });
	        }
	        if (isNested(event, "event", "group_name")) {
	            eventGroupNamesFull.push(((_a = event.event) === null || _a === void 0 ? void 0 : _a.group_name) || "");
	        }
	        //}
	    });
	    var eventTypes = __spreadArray([], __read(new Set(eventTypesFull)), false).sort();
	    var eventKeywords = __spreadArray([], __read(new Set(eventKeywordsFull)), false).sort();
	    var eventGroupNames = __spreadArray([], __read(new Set(eventGroupNamesFull)), false).sort();
	    var handleChange = function (e) {
	        var item = e.target.name;
	        var isChecked = e.target.checked;
	        setCheckedItems(new Map(checkedItems.set(item, isChecked)));
	        filterEvents();
	    };
	    var filterEvents = function () {
	        var filteredEvents = __spreadArray([], __read(events), false).filter(function (event) {
	            if (checkedItems.get(event.event.group_name)) {
	                return true;
	            }
	            if (isNested(event, "event", "filters", "event_types")) {
	                var foundEventTypesName = event.event.filters.event_types.find(function (type) { return checkedItems.get(type.name); });
	                if (foundEventTypesName) {
	                    return true;
	                }
	            }
	            var foundKeyword = event.event.keywords.find(function (element) {
	                return checkedItems.get(element);
	            });
	            return foundKeyword;
	        });
	        if (filteredEvents.length) {
	            setFilteredEvents(filteredEvents);
	        }
	        else {
	            setFilteredEvents(__spreadArray([], __read(events), false));
	        }
	    };
	    var handleResetFilters = function () {
	        checkedItems.forEach(function (value, key, map) { return map.set(key, false); });
	        setFilteredEvents(__spreadArray([], __read(events), false));
	    };
	    var hasGroupNames = eventGroupNames.length;
	    var hasTypes = eventTypes.length;
	    var hasKeywords = eventKeywords.length;
	    return (jsxRuntime.exports.jsxs("div", __assign$2({ id: "rlv-filters" }, { children: [jsxRuntime.exports.jsx(Typography$1, __assign$2({ variant: "subtitle2" }, { children: "Check the boxes below to broaden your results." }), void 0), jsxRuntime.exports.jsx(Box$1, __assign$2({ bgcolor: theme$1.palette.background.default, mr: 1 }, { children: jsxRuntime.exports.jsxs("div", __assign$2({ className: "filter-groups padded" }, { children: [hasGroupNames ? (jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, { children: [jsxRuntime.exports.jsx(Typography$1, __assign$2({ variant: "h4" }, { children: "Group Name" }), void 0), jsxRuntime.exports.jsx("div", __assign$2({ className: "filter-group" }, { children: jsxRuntime.exports.jsx("ul", { children: eventGroupNames.map(function (group, id) {
	                                            return (jsxRuntime.exports.jsxs("li", { children: [jsxRuntime.exports.jsx(Checkbox, { name: group, label: group, color: "primary", checked: checkedItems.get(group), onChange: handleChange }, void 0), "(", eventGroupNamesFull.filter(function (fullType) {
	                                                        return fullType === group;
	                                                    }).length, ")"] }, group));
	                                        }) }, void 0) }), void 0), hasTypes ? jsxRuntime.exports.jsx("hr", {}, void 0) : ""] }, void 0)) : (""), hasTypes ? (jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, { children: [jsxRuntime.exports.jsx(Typography$1, __assign$2({ variant: "h4" }, { children: "Types" }), void 0), jsxRuntime.exports.jsx("div", __assign$2({ className: "filter-group" }, { children: jsxRuntime.exports.jsx("ul", { children: eventTypes.map(function (type, id) {
	                                            return (jsxRuntime.exports.jsxs("li", { children: [jsxRuntime.exports.jsx(Checkbox, { name: type, label: type, color: "primary", checked: checkedItems.get(type), onChange: handleChange }, void 0), "(", eventTypesFull.filter(function (fullType) {
	                                                        return fullType === type;
	                                                    }).length, ")"] }, type));
	                                        }) }, void 0) }), void 0), hasKeywords ? jsxRuntime.exports.jsx("hr", {}, void 0) : ""] }, void 0)) : (""), hasKeywords ? (jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, { children: [jsxRuntime.exports.jsx(Typography$1, __assign$2({ variant: "h4" }, { children: "Keywords" }), void 0), jsxRuntime.exports.jsx("div", __assign$2({ className: "filter-group" }, { children: jsxRuntime.exports.jsx("ul", { children: eventKeywords.map(function (keyword, id) {
	                                            return (jsxRuntime.exports.jsxs("li", { children: [jsxRuntime.exports.jsx(Checkbox, { name: keyword, label: keyword, color: "primary", checked: checkedItems.get(keyword), onChange: handleChange }, void 0), " ", "(", eventKeywordsFull.filter(function (fullType) {
	                                                        return fullType === keyword;
	                                                    }).length, ")"] }, keyword));
	                                        }) }, void 0) }), void 0)] }, void 0)) : (""), hasGroupNames || hasTypes || hasKeywords
	                            ? ""
	                            : "No Filters Available", hasGroupNames || hasTypes || hasKeywords ? (jsxRuntime.exports.jsx("div", __assign$2({ className: "reset" }, { children: jsxRuntime.exports.jsx(Button$1, __assign$2({ variant: "contained", onClick: function () {
	                                    handleResetFilters();
	                                } }, { children: "Reset Filters" }), void 0) }), void 0)) : ("")] }), void 0) }), void 0)] }), void 0));
	};

	var AgendaInnerContent = function (props) {
	    var 
	    // calendarEvent,
	    hideimages = props.hideimages, hidetime = props.hidetime, setShowDialog = props.setShowDialog, setEventSelected = props.setEventSelected, event = props.event;
	    /**
	     *
	     * @param {obj} eventTypes
	     * @return {string} Html string
	     */
	    var tagStr = function (eventTypes) {
	        var spanStr;
	        if (eventTypes) {
	            spanStr = eventTypes.map(function (element) {
	                return (jsxRuntime.exports.jsx("span", __assign$2({ className: "inline-events-type" }, { children: element.name }), element.id));
	            });
	        }
	        return spanStr;
	    };
	    var handleOnClick = function () {
	        setEventSelected(event);
	        setShowDialog(true);
	    };
	    var eventTime = getEventTime(event);
	    var classList = getClassItem(event);
	    return (jsxRuntime.exports.jsx("div", __assign$2({ className: "rlv-agenda-inner-content " + classList }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "events" }, { children: jsxRuntime.exports.jsxs("a", __assign$2({ href: "#" + event.id, className: "group-link-wrapper field-group-link", onClick: handleOnClick }, { children: [hidetime ? "" : jsxRuntime.exports.jsx(Time, { event: event }, void 0), jsxRuntime.exports.jsx("div", __assign$2({ className: "field title" }, { children: jsxRuntime.exports.jsx("h3", { children: event.title }, void 0) }), void 0), jsxRuntime.exports.jsx("div", __assign$2({ className: "field meta" }, { children: jsxRuntime.exports.jsxs("p", { children: [hidetime ? "" : eventTime, event.location_name ? ", " + event.location_name : "", tagStr(event.filters.event_types)] }, void 0) }), void 0), jsxRuntime.exports.jsx("div", __assign$2({ className: "field field-name-summary summary" }, { children: jsxRuntime.exports.jsxs("p", { children: [jsxRuntime.exports.jsx(EventImage, { photoUrl: event.photo_url, title: event.title, hideimages: hideimages, photoCrop: "big" }, void 0), jsxRuntime.exports.jsx(Truncate, { event: event, hidedescription: "false", truncatedescription: "300", readMore: "read more" }, void 0)] }, void 0) }), void 0)] }), void 0) }), void 0) }), void 0));
	};
	AgendaInnerContent.propTypes = {
	    hideaddcal: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    truncatedescription: PropTypes.string.isRequired,
	    hidedescription: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hideimages: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hidetime: PropTypes.bool,
	    setShowDialog: PropTypes.func.isRequired,
	    setEventSelected: PropTypes.func.isRequired,
	};
	AgendaInnerContent.defaultProps = {
	    hidetime: false,
	};

	var AgendaListView = function (props) {
	    return jsxRuntime.exports.jsx(AgendaInnerContent, __assign$2({}, props, { event: props.event }), void 0);
	};
	AgendaListView.propTypes = {
	    event: PropTypes.object.isRequired,
	    hideaddcal: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    truncatedescription: PropTypes.string.isRequired,
	    hidedescription: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hideimages: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hidetime: PropTypes.bool,
	    setShowDialog: PropTypes.func.isRequired,
	    setEventSelected: PropTypes.func.isRequired,
	};
	AgendaListView.defaultProps = {
	    hidetime: false,
	};

	function AgendaList(props) {
	    var _a = react.exports.useContext(EventsContext), setShowDialog = _a.setShowDialog, setEventSelected = _a.setEventSelected;
	    if (props.events.length === 0) {
	        return jsxRuntime.exports.jsx("p", { children: "There are no events in this range." }, void 0);
	    }
	    return (jsxRuntime.exports.jsx("section", __assign$2({ className: "events-modern-compact modern", title: "Events List" }, { children: jsxRuntime.exports.jsx("div", __assign$2({ className: "events-main-body" }, { children: props.events.map(function (event) { return (jsxRuntime.exports.jsx("div", __assign$2({ className: "rlv-component cwd-card-grid" }, { children: jsxRuntime.exports.jsx(AgendaListView, { event: event.event, hideaddcal: props.hideaddcal, hidedescription: props.hidedescription, hideimages: props.hideimages, setEventSelected: setEventSelected, setShowDialog: setShowDialog, truncatedescription: props.truncatedescription }, void 0) }), event.event.event_instances[0].event_instance.id)); }) }), void 0) }), void 0));
	}

	var ChevronRight = {};

	var _interopRequireDefault$1 = interopRequireDefault.exports;

	Object.defineProperty(ChevronRight, "__esModule", {
	  value: true
	});
	var default_1$1 = ChevronRight.default = void 0;

	var _createSvgIcon$1 = _interopRequireDefault$1(createSvgIcon);

	var _jsxRuntime$1 = jsxRuntime.exports;

	var _default$1 = (0, _createSvgIcon$1.default)( /*#__PURE__*/(0, _jsxRuntime$1.jsx)("path", {
	  d: "M10 6 8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
	}), 'ChevronRight');

	default_1$1 = ChevronRight.default = _default$1;

	var ChevronLeft = {};

	var _interopRequireDefault = interopRequireDefault.exports;

	Object.defineProperty(ChevronLeft, "__esModule", {
	  value: true
	});
	var default_1 = ChevronLeft.default = void 0;

	var _createSvgIcon = _interopRequireDefault(createSvgIcon);

	var _jsxRuntime = jsxRuntime.exports;

	var _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
	  d: "M15.41 7.41 14 6l-6 6 6 6 1.41-1.41L10.83 12z"
	}), 'ChevronLeft');

	default_1 = ChevronLeft.default = _default;

	var Toolbar = function (props) {
	    var prevMonth = props.prevMonth, nextMonth = props.nextMonth, children = props.children, setView = props.setView, view = props.view, today = props.today;
	    return (jsxRuntime.exports.jsxs("div", __assign$2({ className: "rlv-tool-bar" }, { children: [jsxRuntime.exports.jsxs("div", __assign$2({ className: "links" }, { children: [jsxRuntime.exports.jsx(Button$1, __assign$2({ variant: "contained", onClick: function (e) {
	                            prevMonth();
	                        }, startIcon: jsxRuntime.exports.jsx(default_1, {}, void 0) }, { children: "Back" }), void 0), jsxRuntime.exports.jsxs(Button$1, __assign$2({ variant: "contained", onClick: function (e) {
	                            today();
	                        } }, { children: [" ", "Today"] }), void 0), jsxRuntime.exports.jsx(Button$1, __assign$2({ variant: "contained", onClick: function (e) {
	                            nextMonth();
	                        }, endIcon: jsxRuntime.exports.jsx(default_1$1, {}, void 0) }, { children: "Next" }), void 0)] }), void 0), jsxRuntime.exports.jsx("div", __assign$2({ className: "header-title" }, { children: jsxRuntime.exports.jsx(Typography$1, __assign$2({ variant: "h2" }, { children: children }), void 0) }), void 0), jsxRuntime.exports.jsxs("div", __assign$2({ className: "view" }, { children: [jsxRuntime.exports.jsx(Button$1, __assign$2({ variant: "contained", className: view === "month" ? "active" : "", onClick: function () {
	                            setView("month");
	                        } }, { children: "Month" }), void 0), jsxRuntime.exports.jsx(Button$1, __assign$2({ variant: "contained", className: view === "day" ? "active" : "", onClick: function () {
	                            setView("day");
	                        } }, { children: "Day" }), void 0), jsxRuntime.exports.jsx(Button$1, __assign$2({ variant: "contained", className: view === "list" ? "active" : "", onClick: function () {
	                            setView("list");
	                        } }, { children: "List" }), void 0)] }), void 0)] }), void 0));
	};

	var Calendar = function (props) {
	    var queryId = getQueryId(props);
	    var _a = react.exports.useContext(EventsContext), setEvents = _a.setEvents, filteredEvents = _a.filteredEvents, setFilteredEvents = _a.setFilteredEvents, showDialog = _a.showDialog, setShowDialog = _a.setShowDialog, eventSelected = _a.eventSelected, setEventSelected = _a.setEventSelected, setDisplayedDateRange = _a.setDisplayedDateRange;
	    var _b = __read(react.exports.useState(moment()), 2), dateContext = _b[0], setDateContext = _b[1];
	    var _c = __read(react.exports.useState(initDateRange()), 2), dateRange = _c[0], setDateRange = _c[1];
	    var _d = __read(react.exports.useState(moment().date()), 2), selectedDay = _d[0], setSelectedDay = _d[1];
	    var _e = __read(react.exports.useState("month"), 2), view = _e[0], setView = _e[1];
	    var key = getKeyFromDateRange(dateRange);
	    // @todo all of this should be moved up to the main component.
	    var data = useQuery([queryId, key], function () { return fetchEvents(props, 0, dateRange); }, { keepPreviousData: true, staleTime: Infinity }).data;
	    var preFetchData = react.exports.useCallback(function (dr) {
	        var lastMonthDateRange = getLastMonth(dr);
	        queryClient.prefetchQuery([queryId, getKeyFromDateRange(lastMonthDateRange)], function () { return fetchEvents(props, 0, lastMonthDateRange); }, { staleTime: Infinity });
	        var nextMonthDateRange = getNextMonth(dr);
	        queryClient.prefetchQuery([queryId, getKeyFromDateRange(nextMonthDateRange)], function () { return fetchEvents(props, 0, nextMonthDateRange); }, { staleTime: Infinity });
	        if (data) {
	            setEvents(data.events);
	            setFilteredEvents(data.events);
	            // preload and disc-cache event images @todo replace big with actual
	            // Photo crop should be defined in the base parent.
	            // Or each component is responsible for pre-fetching their images.
	            data.events.forEach(function (event) {
	                var src = event.event.photo_url.replace("/huge/", "/big/");
	                var img = new Image();
	                img.src = src;
	            });
	        }
	    }, [props, setEvents, setFilteredEvents, data, queryId]);
	    react.exports.useEffect(function () {
	        var mounted = true;
	        if (mounted) {
	            preFetchData(dateRange);
	        }
	        return function cleanup() {
	            mounted = false;
	        };
	        // This is ok we only want to fetch new data when the date range changes,
	        // This allows us to apply filtering.
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [dateRange]);
	    var nextMonth = function () {
	        var newDateContext = moment(dateContext).clone().add(1, "month");
	        var newDateRange = getNextMonth(dateRange);
	        setDateContext(newDateContext);
	        setDateRange(newDateRange);
	        setDisplayedDateRange(newDateRange); // I don't believe this is used anymore
	    };
	    var prevMonth = function () {
	        var newDateContext = moment(dateContext).clone().subtract(1, "month");
	        var newDateRange = getLastMonth(dateRange);
	        setDateContext(newDateContext);
	        setDateRange(newDateRange);
	        setDisplayedDateRange(newDateRange); // I don't believe this is used anymore
	    };
	    var today = function () {
	        var newDateContext = moment();
	        var newDateRange = initDateRange();
	        setSelectedDay(newDateContext.date());
	        setDateContext(newDateContext);
	        setDateRange(newDateRange);
	        setDisplayedDateRange(newDateRange); // I don't believe this is used anymore
	    };
	    var handleEventSelect = function (event) {
	        setEventSelected(event);
	        setShowDialog(true);
	    };
	    var handleDateClick = function (date) {
	        setSelectedDay(date);
	        setView("day");
	    };
	    var title = (jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, { children: [jsxRuntime.exports.jsx("span", __assign$2({ className: "label-month" }, { children: dateContext.format("MMMM") }), void 0), " ", view === "day" ? jsxRuntime.exports.jsxs("span", __assign$2({ className: "label-day" }, { children: [selectedDay, ", "] }), void 0) : "", jsxRuntime.exports.jsx("span", __assign$2({ className: "label-year" }, { children: dateContext.format("Y") }), void 0)] }, void 0));
	    return (jsxRuntime.exports.jsxs("div", __assign$2({ className: "calendar-container" }, { children: [jsxRuntime.exports.jsx(ModalDialog, __assign$2({ showDialog: showDialog, setShowDialog: setShowDialog, "aria-label": "Selected Event" }, { children: eventSelected ? jsxRuntime.exports.jsx(EventDetails, { event: eventSelected }, void 0) : "" }), void 0), jsxRuntime.exports.jsxs(Grid, __assign$2({ container: true }, { children: [jsxRuntime.exports.jsx(Grid, __assign$2({ col: 3 }, { children: jsxRuntime.exports.jsx(Filters, {}, key) }), void 0), jsxRuntime.exports.jsx(Grid, __assign$2({ col: 9 }, { children: jsxRuntime.exports.jsxs("div", { children: [jsxRuntime.exports.jsx(Toolbar, __assign$2({ setView: setView, nextMonth: nextMonth, prevMonth: prevMonth, view: view, today: today }, { children: title }), void 0), view === "month" ? (jsxRuntime.exports.jsx("div", __assign$2({ className: "month-view" }, { children: jsxRuntime.exports.jsx(MonthView, { events: filteredEvents || [], dateContext: dateContext, setSelectedDay: handleDateClick, selectedDay: selectedDay, handleEventSelect: handleEventSelect }, void 0) }), void 0)) : (""), view === "list" ? (jsxRuntime.exports.jsx(AgendaList
	                                // Only show events for the month.
	                                , { 
	                                    // Only show events for the month.
	                                    events: filteredEvents.filter(function (event) {
	                                        return (moment(getEventStart(event.event)).month() ===
	                                            dateContext.month());
	                                    }), hideaddcal: "true", hidedescription: "false", hideimages: "true", truncatedescription: "200", setShowDialog: setShowDialog, setEventSelected: setEventSelected, dateContext: dateContext }, void 0)) : (""), view === "day" ? (jsxRuntime.exports.jsx(AgendaList
	                                // Only show events for the month.
	                                , { 
	                                    // Only show events for the month.
	                                    events: filteredEvents.filter(function (event) {
	                                        return (moment(getEventStart(event.event)).date() ===
	                                            (selectedDay || moment().date()));
	                                    }), hideaddcal: "true", hidedescription: "false", hideimages: "true", truncatedescription: "200", setShowDialog: setShowDialog, setEventSelected: setEventSelected, dateContext: dateContext }, void 0)) : ("")] }, void 0) }), void 0)] }), void 0)] }), void 0));
	};

	function Loading() {
	    return (jsxRuntime.exports.jsx("div", __assign$2({ className: "rlv-loading" }, { children: jsxRuntime.exports.jsx(CircularProgress$1, {}, void 0) }), void 0));
	}

	var LocalistView = function (props) {
	    var component;
	    var format = props.format, page = props.page, loading = props.loading;
	    if (loading) {
	        return jsxRuntime.exports.jsx(Loading, {}, void 0);
	    }
	    switch (format) {
	        case "standard":
	            component = jsxRuntime.exports.jsx(Standard, __assign$2({}, props), page);
	            break;
	        case "compact":
	            component = jsxRuntime.exports.jsx(Compact, __assign$2({}, props), page);
	            break;
	        case "modern_standard":
	            props.wrapperClassArray.push("singles");
	            component = jsxRuntime.exports.jsx(ModernStandard, __assign$2({}, props), page);
	            break;
	        case "modern_compact":
	            props.wrapperClassArray.push("compact");
	            component = jsxRuntime.exports.jsx(ModernCompact, __assign$2({}, props), page);
	            break;
	        case "inline_compact":
	            component = jsxRuntime.exports.jsx(InlineCompact, __assign$2({}, props), page);
	            break;
	        case "calendar":
	            component = jsxRuntime.exports.jsx(Calendar, __assign$2({}, props), page);
	            break;
	        default:
	            component = jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, { children: "Invalid Component Selected" }, void 0);
	            break;
	    }
	    return component;
	};
	LocalistView.propTypes = {
	    events: PropTypes.array.isRequired,
	    format: PropTypes.oneOf([
	        "standard",
	        "compact",
	        "modern_compact",
	        "modern_standard",
	        "inline_compact",
	        "calendar",
	    ]).isRequired,
	    truncatedescription: PropTypes.string.isRequired,
	    hidedescription: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hideimages: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    hideaddcal: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        .isRequired,
	    filterby: PropTypes.string.isRequired,
	    wrapperclass: PropTypes.string.isRequired,
	    listclass: PropTypes.string.isRequired,
	    itemclass: PropTypes.string.isRequired,
	    page: PropTypes.number.isRequired,
	    loading: PropTypes.bool.isRequired,
	    wrapperClassArray: PropTypes.array.isRequired,
	    listClassArray: PropTypes.array.isRequired,
	};

	/**
	 * Gets the filter types from events.
	 *  Creates an array of objects used to build buttons.
	 * @param {obj} event The localist event.
	 */
	var buildEventWrapperFilters = function (events, filterby) {
	    if (filterby === "none") {
	        return "";
	    }
	    var filters = [];
	    events.forEach(function (eventObj) {
	        var event = eventObj.event;
	        var groupName = getGroupName(event);
	        var groupId = getGroupId(event);
	        if (filterby === "type" && event.filters.event_types) {
	            var types = event.filters.event_types;
	            types.forEach(function (type) {
	                var id = type.id, name = type.name;
	                addUniqueObj(filters, { id: id, name: name });
	            });
	        }
	        else if (filterby === "dept" && event.filters.departments) {
	            var departments = event.filters.departments;
	            departments.forEach(function (department) {
	                var id = department.id, name = department.name;
	                addUniqueObj(filters, { id: id, name: name });
	            });
	        }
	        else if (filterby === "group" && groupName !== "") {
	            addUniqueObj(filters, { id: groupId, name: groupName });
	        }
	    });
	    return filters;
	};

	var FilterButton = function (props) {
	    var filterId = props.filterId, active = props.active, clickHandler = props.clickHandler, name = props.name;
	    return (jsxRuntime.exports.jsx("button", __assign$2({ id: filterId, className: "rlv-filter-button filter-btn " + (active === filterId ? "active" : ""), type: "button", onClick: clickHandler }, { children: name }), void 0));
	};
	FilterButton.propTypes = {
	    name: PropTypes.string.isRequired,
	    clickHandler: PropTypes.func.isRequired,
	    filterId: PropTypes.string.isRequired,
	    active: PropTypes.string,
	};
	FilterButton.defaultProps = {
	    active: "",
	};

	/**
	 * @param {obj} props The props.
	 */
	var EventFilters = function (props) {
	    var handleEventFilter = props.handleEventFilter, filterby = props.filterby, events = props.events, active = props.active, setActive = props.setActive;
	    var filterButtons = buildEventWrapperFilters(events, filterby);
	    if (filterby === "none") {
	        return jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {}, void 0);
	    }
	    var applyFilter = function (obj) {
	        events.forEach(function (event) {
	            var ids = getTypeIds(event.event);
	            var departmentIds = getDepartmentIds(event.event);
	            var groupId = getGroupId(event.event);
	            if (obj.name === "filterAll") {
	                event.event.itemClassArray = removeElement(event.event.itemClassArray, "fadeOut");
	            }
	            else if (filterby === "type" && ids.includes(obj.id)) {
	                event.event.itemClassArray = removeElement(event.event.itemClassArray, "fadeOut");
	            }
	            else if (filterby === "dept" && departmentIds.includes(obj.id)) {
	                event.event.itemClassArray = removeElement(event.event.itemClassArray, "fadeOut");
	            }
	            else if (filterby === "group" && groupId === obj.id) {
	                event.event.itemClassArray = removeElement(event.event.itemClassArray, "fadeOut");
	            }
	            else {
	                addUniqueElement(event.event.itemClassArray, "fadeOut");
	            }
	        });
	        handleEventFilter(events, obj.name);
	    };
	    return (jsxRuntime.exports.jsxs("div", __assign$2({ className: "rlv-event-filter-by" }, { children: [jsxRuntime.exports.jsx("h3", __assign$2({ className: "hidden" }, { children: "Show:" }), void 0), jsxRuntime.exports.jsxs("ul", __assign$2({ className: "events-filters" }, { children: [jsxRuntime.exports.jsx("li", { children: jsxRuntime.exports.jsx(FilterButton, { filterId: "filterAll", active: active, name: "All Events", clickHandler: function () {
	                                var obj = { id: -1, name: "filterAll" };
	                                applyFilter(obj);
	                                setActive("filterAll");
	                            } }, void 0) }, "filterAll"), filterButtons
	                        ? filterButtons.map(function (obj) {
	                            var id = obj.id, name = obj.name;
	                            var filterId = "filter" + id;
	                            return (jsxRuntime.exports.jsx("li", { children: jsxRuntime.exports.jsx(FilterButton, { filterId: filterId, active: active, name: name, clickHandler: function () {
	                                        applyFilter(obj);
	                                        setActive(filterId);
	                                    } }, void 0) }, id));
	                        })
	                        : ""] }), void 0)] }), void 0));
	};
	EventFilters.propTypes = {
	    // Filterby shape [{id:integer, name:string}...]
	    handleEventFilter: PropTypes.func.isRequired,
	    filterby: PropTypes.string.isRequired,
	    events: PropTypes.array.isRequired,
	    active: PropTypes.string.isRequired,
	    setActive: PropTypes.func.isRequired,
	};

	var dateRange = initDateRange();
	/**
	 * Localist Component
	 */
	var Localist = function (props) {
	    var _a, _b;
	    var _c = react.exports.useContext(EventsContext), events = _c.events, setEvents = _c.setEvents, setFilteredEvents = _c.setFilteredEvents;
	    var _d = __read(react.exports.useState({
	        current: props.page,
	        size: 1,
	        total: 1,
	    }), 2), llPage = _d[0], setLlPage = _d[1];
	    var _e = __read(react.exports.useState(props.page), 2), currentPage = _e[0], setCurrentPage = _e[1];
	    var _f = __read(react.exports.useState("filterAll"), 2), filter = _f[0], setFilter = _f[1];
	    var queryId = getQueryId(props);
	    var key = props.format === "calendar" ? getKeyFromDateRange(dateRange) : currentPage;
	    var _g = useQuery([queryId, key], function () { return fetchEvents(props, currentPage, dateRange); }, { keepPreviousData: true, staleTime: Infinity }), loading = _g.isLoading, data = _g.data;
	    var wrapperClassArray = (_a = props === null || props === void 0 ? void 0 : props.wrapperclass) === null || _a === void 0 ? void 0 : _a.split(" ");
	    if (isHidden(props.hideimages) && wrapperClassArray) {
	        wrapperClassArray.push("no-thumbnails");
	    }
	    var classes = ["events-listing"];
	    wrapperClassArray = wrapperClassArray === null || wrapperClassArray === void 0 ? void 0 : wrapperClassArray.concat(classes);
	    var listClassArray = (_b = props === null || props === void 0 ? void 0 : props.listclass) === null || _b === void 0 ? void 0 : _b.split(" ");
	    listClassArray === null || listClassArray === void 0 ? void 0 : listClassArray.push("events-list");
	    react.exports.useEffect(function () {
	        var _a;
	        var mounted = true;
	        if (mounted) {
	            if (data) {
	                // There has got to be a better way to set these.
	                var itemClassArray_1 = ((_a = props === null || props === void 0 ? void 0 : props.itemclass) === null || _a === void 0 ? void 0 : _a.split(" ").concat(["event-node"])) || [];
	                data.events.forEach(function (event) {
	                    event.event.itemClassArray = __spreadArray([], __read(itemClassArray_1), false);
	                });
	                // Used by calendar only.
	                setFilteredEvents(data.events);
	                setEvents(data.events);
	                setLlPage(data.page);
	            }
	            // prefetch pagination data next page
	            var isUsingPagination = isNotHidden(props.hidepagination);
	            if (props.format !== "calendar" && llPage.current && isUsingPagination) {
	                var morePages = llPage.current < llPage.total;
	                var nextPage_1 = llPage.current + 1;
	                if (morePages) {
	                    queryClient.prefetchQuery(["events", nextPage_1], function () { return fetchEvents(props, nextPage_1, dateRange); }, { staleTime: Infinity });
	                }
	            }
	        }
	        return function cleanup() {
	            mounted = false;
	        };
	    }, [llPage, data, loading]); // this was key, data, loading changed to llPage
	    function handlePageClick(data) {
	        var newPage = data.selected + 1;
	        setCurrentPage(newPage);
	    }
	    function handleEventFilter(events, filter) {
	        setFilter(filter);
	        setEvents(events);
	    }
	    return (jsxRuntime.exports.jsxs("div", __assign$2({ className: "rlc-localist" }, { children: [jsxRuntime.exports.jsx(Heading, { heading: props.heading || "", readmore: props.readmore || "", url: props.url || "" }, void 0), jsxRuntime.exports.jsx(EventFilters, { events: events, handleEventFilter: handleEventFilter, active: filter, setActive: setFilter, filterby: props.filterby }, currentPage), jsxRuntime.exports.jsx(LocalistView, __assign$2({}, props, { events: events, page: currentPage || 1, loading: loading, wrapperClassArray: wrapperClassArray || [], listClassArray: listClassArray || [], hidedescription: props.hidedescription || "", hideimages: props.hideimages || "", hideaddcal: props.hideimages || "", wrapperclass: props.wrapperclass || "", listclass: props.listclass || "", itemclass: props.itemclass || "" }), filter), jsxRuntime.exports.jsx(Paginate, { hidepagination: props.hidepagination || "", total: llPage.total, handlePageClick: handlePageClick }, void 0)] }), void 0));
	};
	Localist.propTypes = {
	    calendarurl: PropTypes.string.isRequired,
	    entries: PropTypes.string,
	    daysahead: PropTypes.string,
	    depts: PropTypes.string,
	    group: PropTypes.string,
	    keyword: PropTypes.string,
	    format: PropTypes.oneOf([
	        "standard",
	        "compact",
	        "modern_compact",
	        "modern_standard",
	        "inline_compact",
	        "calendar",
	    ]),
	    apikey: PropTypes.string,
	    truncatedescription: PropTypes.string.isRequired,
	    heading: PropTypes.string,
	    hidedescription: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	    hideimages: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	    hideaddcal: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	    hidepagination: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
	    filterby: PropTypes.oneOf(["group", "dept", "type", "none"]),
	    wrapperclass: PropTypes.string,
	    listclass: PropTypes.string,
	    itemclass: PropTypes.string,
	    page: PropTypes.number,
	    readmore: PropTypes.string,
	    url: PropTypes.string,
	    api: PropTypes.string,
	};
	Localist.defaultProps = {
	    depts: "0",
	    group: "0",
	    keyword: "",
	    entries: "3",
	    format: "standard",
	    apikey: "",
	    daysahead: "365",
	    heading: "",
	    filterby: "group",
	    hidedescription: "false",
	    hideimages: "false",
	    hidepagination: "true",
	    hideaddcal: "false",
	    wrapperclass: "",
	    listclass: "",
	    itemclass: "",
	    page: 1,
	    readmore: "",
	    url: "",
	};

	var EventsState = function (_a) {
	    var children = _a.children;
	    var _b = __read(react.exports.useState([]), 2), events = _b[0], setEvents = _b[1];
	    var _c = __read(react.exports.useState([]), 2), filteredEvents = _c[0], setFilteredEvents = _c[1];
	    var _d = __read(react.exports.useState(false), 2), showDialog = _d[0], setShowDialog = _d[1];
	    var _e = __read(react.exports.useState(initialEvent), 2), eventSelected = _e[0], setEventSelected = _e[1];
	    var _f = __read(react.exports.useState({
	        start: moment().startOf("month"),
	        end: moment().endOf("month"),
	    }), 2), displayedDateRange = _f[0], setDisplayedDateRange = _f[1];
	    // const initEvent: InitialEventState = eventSelected as InitialEventState;
	    return (jsxRuntime.exports.jsx(EventsContext.Provider, __assign$2({ value: {
	            events: events,
	            setEvents: setEvents,
	            filteredEvents: filteredEvents,
	            setFilteredEvents: setFilteredEvents,
	            showDialog: showDialog,
	            setShowDialog: setShowDialog,
	            eventSelected: eventSelected,
	            setEventSelected: setEventSelected,
	            displayedDateRange: displayedDateRange,
	            setDisplayedDateRange: setDisplayedDateRange,
	        } }, { children: children }), void 0));
	};
	EventsState.propTypes = {
	    children: PropTypes.node.isRequired,
	};

	var devtools = {exports: {}};

	{
	  devtools.exports = {
	    ReactQueryDevtools: function () {
	      return null
	    },
	    ReactQueryDevtoolsPanel: function () {
	      return null
	    },
	  };
	}

	function RlvTheme(_a) {
	    var children = _a.children;
	    return jsxRuntime.exports.jsx("div", __assign$2({ className: "rlv-theme" }, { children: children }), void 0);
	}

	var theme = createTheme({
	    palette: {
	        mode: "light",
	        primary: {
	            main: "#2d668e",
	        },
	        secondary: {
	            main: "#b31b1b",
	        },
	    },
	    typography: {
	        fontFamily: [
	            "-apple-system",
	            "system-ui",
	            "BlinkMacSystemFont",
	            "Avenir Next",
	            "Segoe UI",
	            "Roboto",
	            "Helvetica",
	            "Neue",
	            "sans-serif",
	        ].join(","),
	        h1: {
	            fontFamily: "Georgia, serif",
	        },
	        h2: {
	            fontFamily: "Georgia, serif",
	            fontSize: "30px",
	        },
	        h3: {
	            fontFamily: "Georgia, serif",
	            fontSize: "24px",
	        },
	        h4: {
	            fontFamily: "Georgia, serif",
	            fontSize: "18px",
	        },
	        h5: {
	            fontFamily: "Georgia, serif",
	            fontSize: "16px",
	        },
	        h6: {
	            fontFamily: "Georgia, serif",
	        },
	    },
	});

	// declare module "@mui/styles/defaultTheme" {
	//   // eslint-disable-next-line @typescript-eslint/no-empty-interface
	//   interface DefaultTheme extends Theme {}
	// }
	var App = function (props) { return (jsxRuntime.exports.jsxs(QueryClientProvider, __assign$2({ client: queryClient }, { children: [jsxRuntime.exports.jsx(EventsState, { children: jsxRuntime.exports.jsxs(StyledEngineProvider, __assign$2({ injectFirst: true }, { children: [jsxRuntime.exports.jsx(CssBaseline, {}, void 0), jsxRuntime.exports.jsx(ThemeProvider, __assign$2({ theme: theme }, { children: jsxRuntime.exports.jsx(RlvTheme, { children: jsxRuntime.exports.jsx(Localist, __assign$2({}, props), void 0) }, void 0) }), void 0)] }), void 0) }, void 0), jsxRuntime.exports.jsx(devtools.exports.ReactQueryDevtools, { initialIsOpen: false }, void 0)] }), void 0)); };

	var localistRun = function (props) {
	    var target = props.target, heading = props.heading, calendarurl = props.calendarurl, apikey = props.apikey, format = props.format, entries = props.entries, daysahead = props.daysahead, depts = props.depts, group = props.group, keyword = props.keyword, hidedescription = props.hidedescription, truncatedescription = props.truncatedescription, hideimages = props.hideimages, hideaddcal = props.hideaddcal, hidepagination = props.hidepagination, filterby = props.filterby, wrapperclass = props.wrapperclass, listclass = props.listclass, itemclass = props.itemclass, readmore = props.readmore, url = props.url, api = props.api;
	    if (typeof document === 'undefined' || !document.getElementById(target)) {
	        console.warn("invalid target: " + target);
	        return;
	    }
	    ReactDOM.render(jsxRuntime.exports.jsx(App, { target: target, depts: depts, entries: entries, daysahead: daysahead, format: format, group: group, keyword: keyword, heading: heading, filterby: filterby, calendarurl: calendarurl, apikey: apikey, hideaddcal: hideaddcal, hidedescription: hidedescription, truncatedescription: truncatedescription, hideimages: hideimages, hidepagination: hidepagination, wrapperclass: wrapperclass, listclass: listclass, itemclass: itemclass, readmore: readmore, url: url, api: api }, void 0), document.getElementById(target));
	};
	// Add localist to the dom.
	if (typeof window !== 'undefined') {
	    // @ts-ignore: add element to window.
	    window.localistViewer = localistRun;
	}

	return localistRun;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
